[{"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\index.js":"1","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\reportWebVitals.js":"2","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\App.js":"3","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\app\\store.js":"4","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\LoginSignUp\\index.jsx":"5","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\Dashboard\\testpage.jsx":"6","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\styles\\AppContainer.style.js":"7","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\LoginSignUp\\accountContext.js":"8","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\LoginSignUp\\loginForm.jsx":"9","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\LoginSignUp\\signupForm.jsx":"10","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\LoginSignUp\\common.jsx":"11","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\marginer\\index.jsx":"12","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\profile\\Profile.jsx":"13","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\home\\Home.jsx":"14","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\features\\auth\\authSlice.js":"15","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\features\\spotify\\spotifySlice.js":"16","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\features\\auth\\authService.js":"17","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\features\\spotify\\spotifyService.js":"18","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\profileLeft\\ProfileLeft.jsx":"19","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\rightSide\\RightSide.jsx":"20","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\profileCard\\ProfileCard.jsx":"21","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\postSide\\PostSide.jsx":"22","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\profileSide\\ProfileSide.jsx":"23","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\infoCard\\InfoCard.jsx":"24","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\songRecsCard\\SongRecsCard.jsx":"25","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\switchCard\\SwitchCard.jsx":"26","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\logoSearch\\LogoSearch.jsx":"27","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\shareModal\\ShareModal.jsx":"28","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\postShare\\PostShare.jsx":"29","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\Data\\SongRecsData.js":"30","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\Data\\PostsData.js":"31","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\profileModal\\ProfileModal.jsx":"32","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\Post\\Post.jsx":"33","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\LoginSignUp\\emailSent.jsx":"34","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\passwordReset\\passwordReset.jsx":"35","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\features\\post\\postSlice.js":"36","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\features\\spotify\\spotify.js":"37","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\features\\post\\postService.js":"38","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\spotifyConnectModal\\SpotifyModal.jsx":"39","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\PostContainer\\PostContainer.jsx":"40","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\utils.js":"41","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\styles\\StyledGrid.js":"42","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\SongCard\\SongCard.jsx":"43","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\imageModal\\ImageModal.jsx":"44","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\spotifyModal\\SpotifyPopUp.jsx":"45","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\LoginSignUp\\passReset.jsx":"46","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\loadingScreen\\loading.jsx":"47","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\deleteModal\\DeleteModal.jsx":"48"},{"size":716,"mtime":1670418236164,"results":"49","hashOfConfig":"50"},{"size":375,"mtime":1670418236176,"results":"51","hashOfConfig":"50"},{"size":1844,"mtime":1670418236037,"results":"52","hashOfConfig":"50"},{"size":1073,"mtime":1670418236039,"results":"53","hashOfConfig":"50"},{"size":9636,"mtime":1670418236170,"results":"54","hashOfConfig":"50"},{"size":2958,"mtime":1670418236166,"results":"55","hashOfConfig":"50"},{"size":202,"mtime":1670418236124,"results":"56","hashOfConfig":"50"},{"size":89,"mtime":1670418236167,"results":"57","hashOfConfig":"50"},{"size":3502,"mtime":1670418236171,"results":"58","hashOfConfig":"50"},{"size":6190,"mtime":1670418236172,"results":"59","hashOfConfig":"50"},{"size":2118,"mtime":1670418236168,"results":"60","hashOfConfig":"50"},{"size":651,"mtime":1670418236048,"results":"61","hashOfConfig":"50"},{"size":1602,"mtime":1670418236176,"results":"62","hashOfConfig":"50"},{"size":2806,"mtime":1670418236173,"results":"63","hashOfConfig":"50"},{"size":11932,"mtime":1670418236127,"results":"64","hashOfConfig":"50"},{"size":7573,"mtime":1670418236132,"results":"65","hashOfConfig":"50"},{"size":4635,"mtime":1670418236127,"results":"66","hashOfConfig":"50"},{"size":12149,"mtime":1670418236132,"results":"67","hashOfConfig":"50"},{"size":1548,"mtime":1670418236052,"results":"68","hashOfConfig":"50"},{"size":1260,"mtime":1670418236055,"results":"69","hashOfConfig":"50"},{"size":8756,"mtime":1670418236051,"results":"70","hashOfConfig":"50"},{"size":418,"mtime":1670418236050,"results":"71","hashOfConfig":"50"},{"size":1072,"mtime":1670418236054,"results":"72","hashOfConfig":"50"},{"size":6858,"mtime":1670418236045,"results":"73","hashOfConfig":"50"},{"size":3357,"mtime":1670418236057,"results":"74","hashOfConfig":"50"},{"size":702,"mtime":1670418236126,"results":"75","hashOfConfig":"50"},{"size":3989,"mtime":1670418236047,"results":"76","hashOfConfig":"50"},{"size":595,"mtime":1670418236056,"results":"77","hashOfConfig":"50"},{"size":6613,"mtime":1670418236049,"results":"78","hashOfConfig":"50"},{"size":395,"mtime":1667788362477,"results":"79","hashOfConfig":"50"},{"size":571,"mtime":1670418236038,"results":"80","hashOfConfig":"50"},{"size":12879,"mtime":1670418236053,"results":"81","hashOfConfig":"50"},{"size":4838,"mtime":1670418236040,"results":"82","hashOfConfig":"50"},{"size":2104,"mtime":1670418236169,"results":"83","hashOfConfig":"50"},{"size":6328,"mtime":1670418236174,"results":"84","hashOfConfig":"50"},{"size":6881,"mtime":1670418236130,"results":"85","hashOfConfig":"50"},{"size":8725,"mtime":1670418236131,"results":"86","hashOfConfig":"50"},{"size":2487,"mtime":1670418236130,"results":"87","hashOfConfig":"50"},{"size":6885,"mtime":1670418236058,"results":"88","hashOfConfig":"50"},{"size":2161,"mtime":1670418236041,"results":"89","hashOfConfig":"50"},{"size":676,"mtime":1669764805750,"results":"90","hashOfConfig":"50"},{"size":1615,"mtime":1669764805720,"results":"91","hashOfConfig":"50"},{"size":1200,"mtime":1670418236042,"results":"92","hashOfConfig":"50"},{"size":554,"mtime":1669764805674,"results":"93","hashOfConfig":"50"},{"size":6377,"mtime":1670418236122,"results":"94","hashOfConfig":"50"},{"size":5117,"mtime":1670418236171,"results":"95","hashOfConfig":"50"},{"size":478,"mtime":1670418236046,"results":"96","hashOfConfig":"50"},{"size":1794,"mtime":1670418236043,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7yr49e",{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225"},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243"},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253"},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260"},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271"},"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\index.js",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\App.js",["272","273"],[],"import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'\r\nimport { ToastContainer } from 'react-toastify'\r\nimport './App.css';\r\nimport { LoginSignUp } from './pages/LoginSignUp/index.jsx';\r\nimport { EmailSent } from './pages/LoginSignUp/emailSent.jsx';\r\nimport { Testpage } from './pages/Dashboard/testpage.jsx';\r\nimport { PasswordReset } from './pages/passwordReset/passwordReset.jsx';\r\nimport { ResetReq } from './pages/LoginSignUp/passReset';\r\nimport { AppContainer } from './components/styles/AppContainer.style';\r\nimport Home from './pages/home/Home'\r\nimport Profile from './pages/profile/Profile'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useEffect } from 'react';\r\nimport { connect } from './features/spotify/spotifySlice'\r\n\r\n\r\nfunction App() {\r\n  const { user } = useSelector((state) => state.auth);\r\n  const { isConnected } = useSelector((store) => store.spotify);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!isConnected && localStorage.getItem('spotify_access_token') != null) {\r\n      dispatch(connect())\r\n    }\r\n  }, [isConnected, user])\r\n\r\n  return (<>\r\n    <AppContainer>\r\n      <Router>\r\n        <div className='container'>\r\n          <Routes>\r\n            <Route path='/' element={<LoginSignUp />} />\r\n            <Route path='/password_request' element={<ResetReq />} />\r\n            <Route path='/verification_sent' element={<EmailSent />} />\r\n            <Route path='/home' element={user ? <Home /> : <Navigate to=\"/\" />} />\r\n            <Route path='/profile/:username' element={user ? <Profile /> : <Navigate to=\"/\" />} />\r\n            <Route path='/reset_password/:token' element={<PasswordReset />} />\r\n          </Routes>\r\n        </div>\r\n      </Router>\r\n      <ToastContainer />\r\n    </AppContainer>\r\n  </>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default App;","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\app\\store.js",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\LoginSignUp\\index.jsx",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\Dashboard\\testpage.jsx",["274","275","276"],[],"import React from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useEffect } from 'react' \r\nimport { useNavigate, Link} from 'react-router-dom';\r\nimport { BoxContainer } from \"../LoginSignUp/common\";\r\nimport { spotifyLogout, connect } from '../../features/spotify/spotifySlice'\r\nimport { logout, reset } from '../../features/auth/authSlice'\r\nimport  {toast} from 'react-toastify'\r\nimport axios from \"axios\";\r\n\r\n\r\nexport function Testpage() {\r\n\r\n    const { user } = useSelector((store) => store.auth)\r\n    const { isConnected, isLoading, token, isError, message} = useSelector((store) => store.spotify)\r\n    //! TODO - check for rate limiting error because code is perfect\r\n\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n\r\n        // Check for error\r\n        if(isError) {\r\n            toast.error(message)\r\n        }\r\n\r\n        //!\r\n        // if (!user) {\r\n        //     navigate('/')\r\n        // }\r\n        // dispatch(connect())\r\n\r\n    }, [isError, message])\r\n\r\n    const onClick = (e) => {\r\n        e.preventDefault() \r\n\r\n        // window.open('http://localhost:5555/api/spotify/connect', '_self');\r\n        // window.location.href = 'http://localhost:5555/api/spotify/connect'\r\n\r\n        dispatch(connect())\r\n        .then(() => {\r\n            if(isError) {\r\n                toast.error(message)\r\n            }\r\n            navigate(\"/home\", { replacae: true})\r\n        })\r\n        return true\r\n    }\r\n\r\n    const onLogout = () => {\r\n        dispatch(logout())\r\n        .then(() => {\r\n            navigate(\"/\", { replace: true })\r\n          })\r\n        .then(() => {\r\n            dispatch(reset())\r\n        })\r\n    }\r\n\r\n    const onSpotifyLogout = () => {\r\n        dispatch(spotifyLogout())\r\n        .then(() => {\r\n            window.location.reload()\r\n        })\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (<BoxContainer><h1>LOADING ...</h1></BoxContainer>)\r\n    }\r\n\r\n    // Onclick triggers first\r\n    // HREF is followed after if onClick returns true\r\n    return (<BoxContainer>\r\n        {!isConnected ? (<>\r\n            <h1>Welcome {user && user.name}</h1>\r\n            <h1> Logged in to Anthem </h1>\r\n            {/* <button onClick={onClick} className='btn btn-block'>Connect to spotify</button> */}\r\n            <a href=\"http://localhost:5555/api/spotify/connect\" target=\"_self\" > 1. PRE Connect to spotify</a>\r\n            <a href=\"#\" target=\"_self\" onClick={onClick}> 2. Connect to spotify </a>\r\n            <button onClick={onLogout} className='btn btn-block'>Logout of Anthem</button>\r\n        </>) : (<>\r\n            <h1> Logged in to Anthem and spotify !!!</h1>\r\n            <button onClick={onSpotifyLogout} className='btn btn-block'>Disconnect Spotify</button>\r\n            <button onClick={onLogout} className='btn btn-block'>Logout of Anthem</button>\r\n            <p> Token: {JSON.stringify(token)}</p>\r\n         </>)}   \r\n    </BoxContainer>)\r\n} \r\n","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\styles\\AppContainer.style.js",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\LoginSignUp\\accountContext.js",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\LoginSignUp\\loginForm.jsx",["277","278"],[],"import React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { AccountContext } from \"./accountContext\";\r\nimport { BoldLink, BoxContainer, FormContainer, Input, MutedLink, SubmitButton} from './common';\r\nimport { Marginer} from '../../components/marginer/index.jsx';\r\nimport {login, reset} from '../../features/auth/authSlice';\r\nimport  {toast} from 'react-toastify';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {useState, useEffect} from 'react';\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\n\r\n//login form\r\nexport function LoginForm(props) {\r\n    \r\n    const [formData, setFormData] = useState({\r\n        username: '',\r\n        password: '',\r\n    })\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const {user, isError, isSuccess, message} = useSelector((state) => state.auth)\r\n    const {username, password} = formData\r\n    \r\n    // Runs initially when LoginForm function is called\r\n    useEffect(() => {\r\n        // Check for error\r\n        // if(isError) {\r\n        //     toast.error(message)\r\n        // }\r\n\r\n        // If registered or logged in\r\n        if(isSuccess || user) {\r\n            // navigate('/testpage', {replace: true})\r\n            navigate('/home', {replace: true})\r\n            dispatch(reset())\r\n        }\r\n    }, [user, isError, isSuccess, message, navigate, dispatch])\r\n\r\n\r\n    const onChange = (e) => {\r\n        setFormData((prevState) => ({\r\n            ...prevState, // \"Spead across previous state\"\r\n            [e.target.name]: e.target.value\r\n        }))\r\n    }\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        const userData = {\r\n            username,\r\n            password\r\n        }\r\n\r\n        dispatch(login(userData))\r\n        .then( (res) => {\r\n            if(!(res.meta.requestStatus == \"rejected\")) {\r\n                navigate('/home', {replace: true})\r\n                // navigate('/testpage', {replace: true})\r\n            }\r\n        })\r\n    }\r\n\r\n    const forgotPass = () => {\r\n        navigate('/password_request', {replace: true})\r\n    }\r\n\r\n\r\n    //when user clicks \"Signup here\", the form will switch\r\n    const {switchToSignup } = useContext(AccountContext);\r\n\r\n    // TODO - RESET PASSWORD\r\n\r\n    return ( <BoxContainer>\r\n        <FormContainer onSubmit={onSubmit}>\r\n            <Marginer direction=\"vertical\" margin={75}/>\r\n            <Input type=\"text\" id='username' name='username'value={username} placeholder=\"Username\" onChange={onChange} required/>\r\n            <Marginer direction=\"vertical\" margin={25}/>\r\n            <Input type=\"password\" id='password' name='password' value={password} placeholder=\"Password\" onChange={onChange} required/>\r\n            <Marginer direction=\"vertical\" margin={10}/>\r\n            <MutedLink onClick={forgotPass}>Forgot your password?</MutedLink> \r\n            <Marginer direction=\"vertical\" margin={25}/>\r\n            <SubmitButton type=\"submit\"> Login</SubmitButton>\r\n            <Marginer direction=\"vertical\" margin={15}/>\r\n            <span style={{ display: !isError ? \"none\" : \"inline-flex\", color: \"red\", alignSelf: \"flex-end\", margin: \"auto\" }}>{message}</span>\r\n            <Marginer direction=\"vertical\" margin={15}/>\r\n            <MutedLink>New to the club? <BoldLink href=\"#\"  onClick={switchToSignup}>Sign up here.</BoldLink>\r\n            <Marginer direction=\"vertical\" margin={25}/>\r\n            </MutedLink>\r\n        </FormContainer>\r\n    </BoxContainer>)\r\n} ","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\LoginSignUp\\signupForm.jsx",["279","280","281","282","283","284"],[],"import React, { useContext } from \"react\";\r\nimport { BoldLink, BoxContainer, FormContainer, Input, MutedLink, SidebSide, SubmitButton } from './common';\r\nimport { Marginer } from '../../components/marginer/index.jsx';\r\nimport { AccountContext } from \"./accountContext\";\r\nimport { register, reset } from '../../features/auth/authSlice';\r\nimport { toast } from 'react-toastify';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// let userController = require('../../../backend/controllers/userController');\r\n// let duplicateEmail = userController.dupilcateEmail;\r\n// let duplicateUser = userController.duplicateUser;\r\n\r\n\r\n//signup form\r\nexport function SignupForm(props) {\r\n    let passvalid = true;\r\n    let emailvalid = true;\r\n    //when user clicks \"login here\", form will swtich\r\n    const { switchToLogin } = useContext(AccountContext);\r\n\r\n    //! Added by nick\r\n    const [formData, setFormData] = useState({\r\n        fname: '',\r\n        lname: '',\r\n        email: '',\r\n        confirmemail: '',\r\n        username: '',\r\n        password: '',\r\n        confirmpass: '',\r\n    })\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    const [confirmPass, setConfirmPass] = useState(true);\r\n    const [confirmEmail, setconfirmEmail] = useState(true);\r\n    const [dontExist, setDontExist] = useState(true)\r\n\r\n    const { user, isError, isSuccess, message } = useSelector((state) => state.auth, shallowEqual)\r\n    const { fname,\r\n        lname,\r\n        email,\r\n        confirmemail,\r\n        username,\r\n        password,\r\n        confirmpass } = formData\r\n\r\n    const name = fname + \" \" + lname;\r\n\r\n    // Runs initially when LoginForm function is called\r\n    useEffect(() => {\r\n\r\n        // Check for error\r\n        // if (isError) {\r\n        //     toast.error(message);\r\n        // }\r\n\r\n        // If registered or logged in\r\n        if (isSuccess || user) {\r\n            // dispatch(reset());\r\n        }\r\n\r\n\r\n    }, [user, isError, isSuccess, message, dispatch])\r\n\r\n\r\n    const onChange = (e) => {\r\n        setFormData((prevState) => ({\r\n            ...prevState, // \"Spead across previous state\"\r\n            [e.target.name]: e.target.value\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        //TODO DUPLICATE USER ERROR\r\n        e.preventDefault()\r\n\r\n        const userData = {\r\n            name,\r\n            email,\r\n            username,\r\n            password\r\n        };\r\n\r\n        if (formData.password !== formData.confirmpass) {\r\n            setConfirmPass(false);\r\n            passvalid = false;\r\n        }\r\n        //in the event that user matches the passwords on second try\r\n        else {\r\n            setConfirmPass(true);\r\n            passvalid = true;\r\n        }\r\n        \r\n        if (formData.email !== formData.confirmemail) {\r\n            setconfirmEmail(false);\r\n            emailvalid = false;\r\n        }\r\n        else {\r\n            setconfirmEmail(true);\r\n            emailvalid = true;\r\n        }\r\n\r\n        if(isError) {\r\n            setDontExist(false)\r\n        }\r\n        else {\r\n            setDontExist(true)\r\n        }\r\n        \r\n        if (passvalid && emailvalid) { // && !isError) {\r\n            dispatch(register(userData))\r\n            .then( (res) => {\r\n                console.log(res)\r\n                if(!(res.meta.requestStatus == \"rejected\")) {\r\n                    // console.log(\"All g... redirect to email sent\") //!\r\n                    navigate('/verification_sent', {replace: true})\r\n                }\r\n            })\r\n            // window.location.reload(false); // reload page to have user sign in\r\n        }\r\n\r\n\r\n\r\n    };\r\n\r\n    //box container is the entire form\r\n    //marginer creates margins between elements\r\n    return <BoxContainer>\r\n        <FormContainer onSubmit={handleSubmit}>\r\n            <Marginer direction=\"vertical\" margin={75} />\r\n            <SidebSide>\r\n                <Input name=\"fname\" type=\"text\" placeholder=\"First Name\" onChange={onChange} required />\r\n                <Input name=\"lname\" type=\"text\" placeholder=\"Last Name\" onChange={onChange} required />\r\n            </SidebSide>\r\n            <Marginer direction=\"vertical\" margin={15} />\r\n            <SidebSide>\r\n                <Input name=\"email\" type=\"email\" placeholder=\"Email\" onChange={onChange} required pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"/>\r\n                <Input name=\"confirmemail\" type=\"email\" placeholder=\"Confirm Email\" onChange={onChange} required pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"/>\r\n            </SidebSide>\r\n            <Marginer direction=\"vertical\" margin={15} />\r\n            <SidebSide>\r\n                <Input name=\"username\" type=\"text\" placeholder=\"Username\" onChange={onChange} required />\r\n                <Input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Password\" onChange={onChange}\r\n                    required />\r\n                <Input name=\"confirmpass\" type=\"password\" placeholder=\"Confirm Password\" onChange={onChange}\r\n                    required />\r\n            </SidebSide>\r\n            <Marginer direction=\"vertical\" margin={15} />\r\n            <span style={{ display: confirmPass ? \"none\" : \"inline-flex\", color: \"red\", alignSelf: \"flex-end\", margin: \"auto\" }}>Passwords do not match!</span>\r\n            <span style={{ display: confirmEmail ? \"none\" : \"inline-flex\", color: \"red\", alignSelf: \"flex-end\", margin: \"auto\" }}>Emails do not match!</span>\r\n            <span style={{ display: !isError ? \"none\" : \"inline-flex\", color: \"red\", alignSelf: \"flex-end\", margin: \"auto\" }}>{message}</span>\r\n            <Marginer direction=\"vertical\" margin={15} />\r\n            <SubmitButton type=\"submit\"> Register</SubmitButton>\r\n            <Marginer direction=\"vertical\" margin={15} />\r\n            <MutedLink>Not your first rodeo?\r\n                <BoldLink href=\"#\" onClick={switchToLogin}> Login here.</BoldLink>\r\n            </MutedLink>\r\n            <Marginer direction=\"vertical\" margin={15} />\r\n\r\n        </FormContainer>        \r\n    </BoxContainer>\r\n} ","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\LoginSignUp\\common.jsx",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\marginer\\index.jsx",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\profile\\Profile.jsx",["285","286","287","288","289","290","291","292"],[],"import React, { useEffect } from \"react\";\r\nimport ProfileLeft from '../../components/profileLeft/ProfileLeft';\r\nimport ProfileCard from '../../components/profileCard/ProfileCard';\r\nimport PostSide from '../../components/postSide/PostSide';\r\nimport RightSide from '../../components/rightSide/RightSide';\r\nimport './Profile.css'\r\nimport { Link } from \"react-router-dom\";\r\nimport { UilSetting } from '@iconscout/react-unicons'\r\nimport { UilHome } from '@iconscout/react-unicons'\r\nimport { UilBell } from '@iconscout/react-unicons'\r\nimport { UilMessage } from '@iconscout/react-unicons'\r\nimport LogoSearch from '../../components/logoSearch/LogoSearch'\r\nimport Logo from '../../img/logo.png'\r\nimport {connect} from '../../features/spotify/spotifySlice'\r\nimport {useDispatch, useNavigate, useSelector} from 'react-redux'\r\n\r\nconst Profile = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    useEffect( () => {\r\n        dispatch(connect)\r\n    })\r\n\r\n    return (\r\n        <div className=\"Profile\">\r\n            <div className=\"Top\">\r\n                <div className=\"navIcons\">\r\n                        <Link to='../Home'>\r\n                        <img src={Logo} alt=\"Logo\" />\r\n                        </Link>\r\n                    </div> \r\n            </div>\r\n            <div className=\"Bottom\">\r\n                <ProfileLeft/>\r\n                <div className=\"Profile-center\">\r\n                    <ProfileCard location=\"profilePage\" />\r\n                    <PostSide/>\r\n                </div>\r\n            </div>\r\n\r\n            {/* <RightSide/> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\home\\Home.jsx",["293","294","295","296","297","298","299","300","301","302","303"],[],"import { React, useEffect, useState } from 'react'\r\nimport './Home.css'\r\nimport ProfileSide from '../../components/profileSide/ProfileSide'\r\nimport PostSide from '../../components/postSide/PostSide'\r\nimport RightSide from '../../components/rightSide/RightSide'\r\nimport { Link } from \"react-router-dom\";\r\nimport { UilSetting } from '@iconscout/react-unicons'\r\nimport { UilHome } from '@iconscout/react-unicons'\r\nimport { UilBell } from '@iconscout/react-unicons'\r\nimport { UilMessage } from '@iconscout/react-unicons'\r\nimport LogoSearch from '../../components/logoSearch/LogoSearch'\r\nimport Logo from '../../img/logo.png'\r\nimport { useDispatch, useSelector} from 'react-redux'\r\nimport styled from \"styled-components\";\r\nimport { Modal } from '../../components/spotifyConnectModal/SpotifyModal' \r\nimport  {toast} from 'react-toastify'\r\nimport { connect } from '../../features/spotify/spotifySlice'\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nconst Home = () => {\r\n    const { isConnected, isError, message } = useSelector((store) => store.spotify)\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if(isError) {\r\n            toast.error(message);\r\n        }\r\n        const urlParams = new URLSearchParams(window.location.search)\r\n        const token = urlParams.get(\"access_token\")\r\n        if(!isConnected && token != null) {\r\n            dispatch(connect())\r\n            .then(() => {\r\n                window.location.hash = \"\";\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    const getTokenFromUrl = () => {\r\n        return window.location.hash\r\n          .substring(1)\r\n          .split(\"&\")\r\n          .reduce((initial, item) => {\r\n            let parts = item.split(\"=\");\r\n            initial[parts[0]] = decodeURIComponent(parts[1]);\r\n            return initial;\r\n          }, {});\r\n      };\r\n    \r\n\r\n    return ( <div>\r\n        {isConnected ? (\r\n            <div className=\"Home\">\r\n                <div></div> \r\n                <div className='Top'>\r\n                    <div className=\"navIcons\">\r\n                        <Link to='/home'>\r\n                            {/* <span onClick={() => {navigate(`/home`); window.location.reload();}}> */}\r\n                                <img src={Logo} alt=\"Logo\" />\r\n                            {/* </span> */}\r\n                        </Link>\r\n                    </div> \r\n                </div>\r\n                <div></div>\r\n                <div className='Bottom'>\r\n                    <ProfileSide/>\r\n                    <PostSide/>\r\n                </div>\r\n            </div>     \r\n        // If NOT connected to spotify:\r\n        ) : ( \r\n            <div className=\"modal-stretch\">\r\n                <Modal/>\r\n            </div>\r\n        )}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Home","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\features\\auth\\authSlice.js",["304"],[],"import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\r\nimport authService from './authService'\r\nimport { current } from '@reduxjs/toolkit'\r\n\r\n\r\n// Get user from localStorage\r\nconst user = JSON.parse(localStorage.getItem('user'))\r\n\r\nlet initialState = {\r\n    user: user ? user : null, // check localStorage\r\n    isError: false,\r\n    isSuccess: false,\r\n    isLoading: false,\r\n    message: '',\r\n    resetPassword: ''\r\n}\r\n\r\n\r\n// async thunk function - deals with async data\r\n// Register user\r\nexport const register = createAsyncThunk('auth/register', async(user, thunkAPI) => {\r\n    try {\r\n        return await authService.register(user)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\n// Login user\r\nexport const login = createAsyncThunk('auth/login', async(user, thunkAPI) => {\r\n    try {\r\n        return await authService.login(user)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\n\r\n// Logout user\r\nexport const logout = createAsyncThunk('auth/logout', async() => {\r\n    await authService.logout()\r\n})\r\n\r\n// async thunk function - deals with async data\r\n// Reset user password\r\nexport const userResetPassword = createAsyncThunk('auth/reset', async(passwordObj, thunkAPI) => {\r\n    try {\r\n        return await authService.reset(passwordObj.token, passwordObj.password1)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\n//! Update user info\r\nexport const updateUser = createAsyncThunk('auth/update', async(name, username, anthemId, anthemTitle, anthemArtist1, anthemImage, anthemUrl, thunkAPI) => {\r\n    console.log(\"updating user\")\r\n    try {\r\n        const token = user.token\r\n        return await authService.update(name, username, anthemId, anthemTitle, anthemArtist1, anthemImage, anthemUrl, token);\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\n\r\nexport const getMe = createAsyncThunk('auth/getMe', async(thunkAPI) =>\r\n{\r\n    try {\r\n       \r\n        const token = user.token\r\n        return await authService.getMe(token);\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n\r\n})\r\n\r\nexport const followUser = createAsyncThunk('auth/follow', async(targetUserId, thunkAPI) =>\r\n{\r\n    try {\r\n        const token = user.token\r\n        return await authService.follow(targetUserId,user._id, token);\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n\r\n})\r\n\r\n//unfollow\r\nexport const unfollowUser = createAsyncThunk('auth/unfollow', async(targetUserId, thunkAPI) =>\r\n{\r\n    try {\r\n\r\n        const token = user.token\r\n        return await authService.unfollow(targetUserId,user._id, token);\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n\r\n})\r\n\r\nexport const uploadPFP = createAsyncThunk('auth/uploadPFP', async(picture, thunkAPI) =>\r\n{\r\n    try {\r\n        const token = user.token\r\n        return await authService.uploadPFP(picture, token);\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n\r\n})\r\n\r\nexport const resetPass = createAsyncThunk('auth/passRequest', async(email, thunkAPI) =>\r\n{\r\n    try {\r\n        return await authService.passRequest(email);\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n\r\n})\r\n\r\nexport const putTopArtist = createAsyncThunk('auth/putTopArtist', async(topArtist, thunkAPI) =>\r\n{\r\n    try {\r\n        const token = user.token\r\n        return await authService.putTopArtistService(topArtist, token);\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n\r\n})\r\n\r\nexport const getTopArtist = createAsyncThunk('auth/getTopArtist', async(userId, thunkAPI) =>\r\n{\r\n    try {\r\n        const token = user.token\r\n        return await authService.getTopArtistService(userId, token);\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n\r\n}) \r\n\r\n\r\nexport const authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        // Dispatch this function after we register (reset values)\r\n        reset: (state) => {\r\n            state.isLoading = false\r\n            state.isSuccess = false\r\n            state.isError = false\r\n            state.message = ''\r\n            state.resetPassword = ''\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n        // Register state cases\r\n        .addCase(register.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(register.fulfilled, (state, action) => {\r\n            state.isLoading = false\r\n            state.isSuccess = true\r\n            state.user = action.payload\r\n        })\r\n        .addCase(register.rejected, (state, action) => {\r\n            state.isLoading = false\r\n            state.isError = true\r\n            state.message = action.payload // THIS GETS SENT CORRECTLY\r\n            state.user = null\r\n        })\r\n        // Login state cases\r\n        .addCase(login.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(login.fulfilled, (state, action) => {\r\n            state.isLoading = false\r\n            state.isSuccess = true\r\n            console.log(action.payload)\r\n            state.user = action.payload\r\n        })\r\n        .addCase(login.rejected, (state, action) => {\r\n            state.isLoading = false\r\n            state.isError = true\r\n            state.message = action.payload\r\n            state.user = null\r\n        })\r\n        .addCase(logout.fulfilled, (state) => {\r\n            state.user = null\r\n        })\r\n        // Reset user passowrd state cases\r\n        .addCase(userResetPassword.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(userResetPassword.fulfilled, (state, action) => {\r\n            state.isLoading = false\r\n            state.resetPassword = action.payload //!\r\n        })\r\n        .addCase(userResetPassword.rejected, (state, action) => {\r\n            state.isLoading = false\r\n            state.isError = true\r\n            state.message = action.payload\r\n        })\r\n        // Update user state cases\r\n        .addCase(updateUser.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(updateUser.fulfilled, (state, action) => {\r\n \r\n            state.isLoading = false\r\n            state.user = action.payload;\r\n            console.log(action.payload)\r\n            return state // return action.payload maybe?\r\n        })\r\n        .addCase(updateUser.rejected, (state, action) => {\r\n            state.isLoading = false\r\n            state.isError = true\r\n            state.message = action.payload\r\n        })\r\n\r\n        // get user state cases\r\n        .addCase(getMe.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(getMe.fulfilled, (state, action) => {\r\n            state.isLoading = false\r\n        })\r\n        .addCase(getMe.rejected, (state, action) => {\r\n            state.isLoading = false\r\n            state.isError = true\r\n            state.message = action.payload\r\n        })\r\n\r\n         // Login state cases\r\n         .addCase(uploadPFP.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(uploadPFP.fulfilled, (state, action) => {\r\n            state.isLoading = false\r\n            state.isSuccess = true\r\n            console.log({action})\r\n        })\r\n        .addCase(uploadPFP.rejected, (state, action) => {\r\n            state.isLoading = false\r\n            state.isError = true\r\n            state.message = action.payload\r\n        })\r\n\r\n        .addCase(followUser.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(followUser.fulfilled, (state, action) => {\r\n            state.isLoading = false\r\n            state.isSuccess = true\r\n            state.user.following = action.payload\r\n            console.log(action.payload)\r\n            // return state;\r\n        })\r\n        .addCase(followUser.rejected, (state, action) => {\r\n            state.isLoading = false\r\n            state.isError = true\r\n            // state.message = action.payload // THIS GETS SENT CORRECTLY\r\n        })\r\n\r\n        // Unfollow\r\n        .addCase(unfollowUser.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(unfollowUser.fulfilled, (state, action) => {\r\n            state.isLoading = false\r\n            state.isSuccess = true\r\n            // state.user = action.payload\r\n            console.log(action.payload)\r\n            state.user.following = action.payload\r\n            return state;\r\n        })\r\n        .addCase(unfollowUser.rejected, (state, action) => {\r\n            state.isLoading = false\r\n            state.isError = true\r\n            state.message = action.payload // THIS GETS SENT CORRECTLY\r\n        })\r\n\r\n        // reset password request\r\n        .addCase(resetPass.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(resetPass.fulfilled, (state, action) => {\r\n            state.isLoading = false\r\n            state.isSuccess = true\r\n        })\r\n        .addCase(resetPass.rejected, (state, action) => {\r\n            state.isLoading = false\r\n            state.isError = true\r\n            state.message = action.payload // THIS GETS SENT CORRECTLY\r\n        }) \r\n\r\n        // Put Top Artist\r\n        .addCase(putTopArtist.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(putTopArtist.fulfilled, (state, action) => {\r\n            state.isLoading = false\r\n            state.isSuccess = true\r\n        })\r\n        .addCase(putTopArtist.rejected, (state, action) => {\r\n            state.isLoading = false\r\n            state.isError = true\r\n            state.message = action.payload // THIS GETS SENT CORRECTLY\r\n        }) \r\n        \r\n        // Get Top Artist\r\n        .addCase(getTopArtist.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(getTopArtist.fulfilled, (state, action) => {\r\n            state.isLoading = false\r\n            state.isSuccess = true\r\n        })\r\n        .addCase(getTopArtist.rejected, (state, action) => {\r\n            state.isLoading = false\r\n            state.isError = true\r\n            state.message = action.payload // THIS GETS SENT CORRECTLY\r\n        }) \r\n    }\r\n})\r\n\r\n\r\nexport const {reset} = authSlice.actions\r\nexport default authSlice.reducer\r\n","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\features\\spotify\\spotifySlice.js",["305","306"],[],"import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\r\nimport spotifyService from './spotifyService'\r\nimport axios from 'axios'\r\nimport { recommendSongs } from './spotify'\r\n\r\n\r\nconst initialState = {\r\n    token: \"\",\r\n    isConnected: false,\r\n    message: '',\r\n    isLoading: false,\r\n    // topArtist: '',\r\n}\r\n\r\n\r\n// Connect user to spotify\r\nexport const connect = createAsyncThunk('spotify/connect', async(thunkAPI) => {\r\n    try {\r\n        return await spotifyService.connect()\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\n// Get spotify refresh token\r\nexport const refreshSpotifyToken = createAsyncThunk('spotify/refresh_token', async(thunkAPI) => {\r\n    try {\r\n        return await spotifyService.refreshToken()\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\n// Logout spotify\r\nexport const spotifyLogout = createAsyncThunk('spotify/logout', async() => {\r\n    return await spotifyService.logout()\r\n})\r\n\r\n// Get user's top artist\r\nexport const getTopArtist = createAsyncThunk('spotify/getTopArtist', async() => {\r\n    return await spotifyService.getTopArtist();\r\n})\r\n\r\n// Get user's recommened songs\r\nexport const getRecommended = createAsyncThunk('spotify/recommendSongs', async() => {\r\n    return await spotifyService.recommendSongs();\r\n})\r\n//get a user's top genre\r\nexport const getTopGenre = createAsyncThunk('spotify/getTopGenre', async() => {\r\n    return await spotifyService.getTopGenre();\r\n})\r\n\r\n// // Get array of tracks from search\r\nexport const searchTracks = createAsyncThunk('spotify/searchTracks', async(param) => {\r\n    try {        \r\n        console.log(param)\r\n        return await spotifyService.searchTracks(param);\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n        throw Error({message: message});\r\n    }\r\n})\r\n// export const searchTracks = async (param) => {\r\n//     try {        \r\n//         console.log(\"PARAM: \" + param)\r\n//         return await spotifyService.searchTracks(param);\r\n//     } catch (error) {\r\n//         const message = (error.response && error.response.data && error.response.data.message) || (error.message) || (error.toString())\r\n//         throw Error({message: message});\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\nexport const spotifySlice = createSlice({\r\n    name: 'spotify',\r\n    initialState,\r\n    reducers: {\r\n        disconnect: (state) => {\r\n            state.token = \"\"\r\n            state.isLoading = false\r\n            state.isConnected = false\r\n            state.isError = false\r\n            state.message = ''\r\n            // state.topArtist = ''\r\n        },\r\n        reconnect: (state) => {\r\n            state.token = localStorage.getItem('spotify_access_token')\r\n            state.isLoading = false\r\n            state.isConnected = true\r\n            state.isError = false\r\n            state.message = ''\r\n            // state.topArtist = ''\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n        // Connect\r\n        .addCase(connect.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(connect.fulfilled, (state, action) => {\r\n            state.isLoading = false;\r\n            if(action.payload != null) {\r\n                state.isConnected = true;\r\n                state.token = action.payload;\r\n            }\r\n            else {\r\n                state.isConnected = false;\r\n                state.isError = true\r\n                state.message = \"Error recieving spotify access token\"\r\n            }\r\n        })\r\n        .addCase(connect.rejected, (state, action) => {\r\n            state.isLoading = false;\r\n            state.isError = true; //?\r\n            state.message = action.payload;\r\n        })\r\n        // Refresh\r\n        .addCase(refreshSpotifyToken.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(refreshSpotifyToken.fulfilled, (state, action) => {\r\n            state.isLoading = false;\r\n            state.isConnected = true;\r\n            state.token = action.payload; //! I think\r\n        })\r\n        .addCase(refreshSpotifyToken.rejected, (state, action) => {\r\n            state.isLoading = false;\r\n            state.isError = true; //?\r\n            state.message = action.payload;\r\n        })\r\n        // Logout\r\n        .addCase(spotifyLogout.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(spotifyLogout.fulfilled, (state, action) => {\r\n            state.isLoading = false;\r\n            state.isConnected = false;\r\n            state.token = '';\r\n        })\r\n        .addCase(spotifyLogout.rejected, (state, action) => {\r\n            state.isLoading = false;\r\n            state.isError = true; //?\r\n            state.message = action.payload;\r\n        })\r\n        // Get top artist\r\n        .addCase(getTopArtist.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(getTopArtist.fulfilled, (state, action) => {\r\n            state.isLoading = false;\r\n        })\r\n        .addCase(getTopArtist.rejected, (state) => {\r\n            state.isLoading = false;\r\n            state.isError = true; //?\r\n            // console.log(\"Action Payload:  \" + action.payload)\r\n            // state.message = action.payload.statusText;\r\n        })\r\n        // Get top genre\r\n        .addCase(getTopGenre.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(getTopGenre.fulfilled, (state, action) => {\r\n            state.isLoading = false;\r\n            console.log(\"Action Payload:  \" + action.payload.data.items[0])\r\n            // state.topArtist = action.payload;\r\n        })\r\n        .addCase(getTopGenre.rejected, (state) => {\r\n            state.isLoading = false;\r\n            state.isError = true; //?\r\n            // console.log(\"Action Payload:  \" + action.payload)\r\n            // state.message = action.payload.statusText;\r\n        })\r\n        //Get recommended songs\r\n        .addCase(getRecommended.pending, (state) => {\r\n            state.isLoading = true\r\n        })\r\n        .addCase(getRecommended.fulfilled, (state, action) => {\r\n            state.isLoading = false;\r\n            // state.topArtist = action.payload;\r\n        })\r\n        .addCase(getRecommended.rejected, (state,action) => {\r\n            state.isLoading = false;\r\n            state.isError = true; //?\r\n            state.message = action.payload;\r\n        })\r\n\r\n        // // Search tracks\r\n        // .addCase(searchTracks.pending, (state) => {\r\n        //     state.isLoading = true\r\n        // })\r\n        // .addCase(searchTracks.fulfilled, (state, action) => {\r\n        //     state.isLoading = false;\r\n        //     console.log(\"Action Payload:  \" + action.payload.data.items[0])\r\n        //     // state.topArtist = action.payload;\r\n        // })\r\n        // .addCase(searchTracks.rejected, (state) => {\r\n        //     state.isLoading = false;\r\n        //     state.isError = true; //?\r\n        //     // console.log(\"Action Payload:  \" + action.payload)\r\n        //     // state.message = action.payload.statusText;\r\n        // })\r\n    }\r\n})\r\n\r\nexport const { disconnect, reconnect } = spotifySlice.actions\r\nexport default spotifySlice.reducer","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\features\\auth\\authService.js",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\features\\spotify\\spotifyService.js",["307","308","309","310","311","312"],[],"// For making HTTP request and sending data in localStorage\r\n\r\nimport axios from 'axios'\r\n\r\nconst API_URL = '/api/spotify/'\r\nlet IDresult = \"\"\r\nlet genreResult = \"\"\r\nlet target = \"\"\r\nlet allGenres = [\r\n    \"acoustic\",\r\n    \"afrobeat\",\r\n    \"alt-rock\",\r\n    \"alternative\",\r\n    \"ambient\",\r\n    \"anime\",\r\n    \"bluegrass\",\r\n    \"blues\",\r\n    \"bossanova\",\r\n    \"breakbeat\",\r\n    \"chicago-house\",\r\n    \"chill\",\r\n    \"classical\",\r\n    \"club\",\r\n    \"country\",\r\n    \"dance\",\r\n    \"dancehall\",\r\n    \"deep-house\",\r\n    \"detroit-techno\",\r\n    \"disco\",\r\n    \"drum-and-bass\",\r\n    \"dub\",\r\n    \"dubstep\",\r\n    \"edm\",\r\n    \"electro\",\r\n    \"electronic\",\r\n    \"emo\",\r\n    \"folk\",\r\n    \"funk\",\r\n    \"garage\",\r\n    \"gospel\",\r\n    \"goth\",\r\n    \"grindcore\",\r\n    \"groove\",\r\n    \"grunge\",\r\n    \"guitar\",\r\n    \"happy\",\r\n    \"hard-rock\",\r\n    \"hardcore\",\r\n    \"hardstyle\",\r\n    \"heavy-metal\",\r\n    \"hip-hop\",\r\n    \"holidays\",\r\n    \"honky-tonk\",\r\n    \"house\",\r\n    \"idm\",\r\n    \"indie\",\r\n    \"indie-pop\",\r\n    \"industrial\",\r\n    \"j-pop\",\r\n    \"jazz\",\r\n    \"k-pop\",\r\n    \"latin\",\r\n    \"latino\",\r\n    \"metal\",\r\n    \"metal-misc\",\r\n    \"metalcore\",\r\n    \"minimal-techno\",\r\n    \"mpb\",\r\n    \"new-age\",\r\n    \"new-release\",\r\n    \"party\",\r\n    \"piano\",\r\n    \"pop\",\r\n    \"pop-film\",\r\n    \"post-dubstep\",\r\n    \"power-pop\",\r\n    \"progressive-house\",\r\n    \"psych-rock\",\r\n    \"punk\",\r\n    \"punk-rock\",\r\n    \"r-n-b\",\r\n    \"rainy-day\",\r\n    \"reggae\",\r\n    \"reggaeton\",\r\n    \"rock\",\r\n    \"rock-n-roll\",\r\n    \"rockabilly\",\r\n    \"romance\",\r\n    \"sad\",\r\n    \"salsa\",\r\n    \"samba\",\r\n    \"show-tunes\",\r\n    \"singer-songwriter\",\r\n    \"ska\",\r\n    \"sleep\",\r\n    \"songwriter\",\r\n    \"soul\",\r\n    \"soundtracks\",\r\n    \"study\",\r\n    \"summer\",\r\n    \"synth-pop\",\r\n    \"tango\",\r\n    \"techno\",\r\n    \"trip-hop\",\r\n    \"work-out\",\r\n    \"world-music\"\r\n]\r\n\r\n// Map for localStorage keys\r\nconst LOCALSTORAGE_KEYS = {\r\n    accessToken: 'spotify_access_token',\r\n    refreshToken: 'spotify_refresh_token',\r\n    expireTime: 'spotify_token_expire_time',\r\n    timestamp: 'spotify_token_timestamp',\r\n}\r\n\r\n// Map to retrieve localStorage values\r\nconst LOCALSTORAGE_VALUES = {\r\n    accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\r\n    refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\r\n    expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\r\n    timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\r\n}\r\n\r\n// Generate random string\r\nconst getRandomString = length => {\r\n    let text = ''\r\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n    for (let i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length))\r\n    }\r\n    return text;\r\n}\r\nconst stateKey = 'spotify_auth_state'\r\n\r\n/**\r\n * Handles logic for retrieving the Spotify access token from localStorage\r\n * or URL query params\r\n * @returns {string} A spotify access token\r\n */\r\nconst connect = async () => {\r\n\r\n    // console.log(\"ASDASDASDASD\")\r\n    // console.log(window.location.search)\r\n    const queryString = window.location.search\r\n    const urlParams = new URLSearchParams(queryString)\r\n\r\n    const queryParams = {\r\n        [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\r\n        [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\r\n        [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\r\n    }\r\n\r\n    const hasError = urlParams.get('error')\r\n    console.log(\"hadError: \" + hasError)\r\n\r\n    // If theres an error OR the token has expired => refresh token\r\n    if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n        console.log(\"refreshToken called\")\r\n        refreshToken()\r\n    }\r\n\r\n    // If theres a valid access token, use that\r\n    if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\r\n        return LOCALSTORAGE_VALUES.accessToken\r\n    }\r\n\r\n    // If there is a token in the URL query params, user is logging in for the first time\r\n    if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\r\n\r\n        // Store the query params in localStorage\r\n        for (const property in queryParams) {\r\n            window.localStorage.setItem(property, queryParams[property])\r\n        }\r\n        // Set timestamp\r\n        window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now())\r\n\r\n        // Return access token from query params\r\n        return queryParams[LOCALSTORAGE_KEYS.accessToken]\r\n    }\r\n\r\n    return false\r\n}\r\n\r\n\r\n/**\r\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\r\n * and now is greater than the expiration time of 3600 seconds (1 hour).\r\n * @returns {boolean} Whether or not the access token in localStorage has expired\r\n */\r\nconst hasTokenExpired = () => {\r\n    console.log('inside hasTokenExpired');\r\n    const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES\r\n\r\n    if (!accessToken || !timestamp) {\r\n        return false\r\n    }\r\n    const millisecondsElapsed = Date.now() - Number(timestamp)\r\n    return (millisecondsElapsed / 1000) > Number(expireTime)\r\n}\r\n\r\n/**\r\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\r\n * in our Node app, then update values in localStorage with data from response.\r\n * @returns {void}\r\n */\r\nconst refreshToken = async () => {\r\n    try {\r\n\r\n        // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\r\n        if (!LOCALSTORAGE_VALUES.refreshToken ||\r\n            LOCALSTORAGE_VALUES.refreshToken === 'undefined' ||\r\n            (Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000) < 1000\r\n        ) {\r\n\r\n            console.error('No refresh token available')\r\n            logout()\r\n        }\r\n\r\n        // Use `/refresh_token` endpoint from our Node app\r\n        const { data } = await axios.get(`/api/spotify/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`)\r\n\r\n        // Update localStorage values\r\n        window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token)\r\n        window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now())\r\n\r\n        // Reload the page for localStorage updates to be reflected\r\n        window.location.reload()\r\n\r\n        console.log(\"TOKEN WAS REFRESHED\")\r\n\r\n    } catch (e) {\r\n        console.error(e)\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem('spotify_access_token')\r\n    localStorage.removeItem('spotify_refresh_token')\r\n    localStorage.removeItem('spotify_token_expire_time')\r\n    localStorage.removeItem('spotify_token_timestamp')\r\n}\r\n\r\n// export const accessToken = connect()\r\n\r\n// /**\r\n//  * Axios global request headers\r\n//  */\r\n\r\n//  axios.defaults.baseURL = 'https://api.spotify.com/v1';\r\n//  axios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\r\n//  axios.defaults.headers['Content-Type'] = 'application/json';\r\n//  axios.defaults.headers['Allow-Access-Control-Origin'] = '*';\r\n\r\nexport const accessToken = connect()\r\n// {\\n  \\\"error\\\": {\\n    \\\"status\\\": 400,\\n    \\\"message\\\": \\\"Only valid bearer authentication supported\\\"\\n  }\\n}\"\r\n\r\n// @desc    Get user's top artist\r\n// @route   GET /api/spotify/top_artist\r\n// @access  Private\r\nexport const getTopArtist = async () => {\r\n\r\n    if (hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n        refreshToken()\r\n    }\r\n\r\n    try {\r\n        const response = await axios({\r\n            method: 'get',\r\n            url: `https://api.spotify.com/v1/me/top/artists?limit=3&time_range=long_term`,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem(LOCALSTORAGE_KEYS.accessToken)}`\r\n            }\r\n        })\r\n\r\n        target = response.data.items[0].id\r\n        IDresult = target.concat(\",\", response.data.items[2].id)\r\n\r\n        target= response.data.items[0].genres[0].toString();\r\n        if(allGenres.includes(target)) genreResult = target\r\n        // genreResult = target //.concat(\",\", response.data.items[1].genres[1].toString())\r\n\r\n        if (response) return response;\r\n    } catch (error) {\r\n        console.error(error)\r\n        return false\r\n    }\r\n}\r\n\r\n\r\n// @desc    Get user's top artist\r\n// @route   GET /api/spotify/top_genre\r\n// @access  Private\r\nexport const getTopGenre = async () => {\r\n\r\n    if (hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n        refreshToken()\r\n    }\r\n\r\n    try {\r\n        console.log(\"getTopGenre was called\")\r\n        console.log(localStorage.getItem(LOCALSTORAGE_KEYS.accessToken));\r\n        const response = await axios({\r\n            method: 'get',\r\n            url: `https://api.spotify.com/v1/recommendations/available-genre-seeds`,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem(LOCALSTORAGE_KEYS.accessToken)}`\r\n            }\r\n        })\r\n        console.log(response);\r\n        console.log(response.items[0]);\r\n        if (response) return response;\r\n    } catch (error) {\r\n        console.error(error)\r\n        return false\r\n    }\r\n}\r\n\r\n// @desc    Get recommended songs\r\n// @route   GET /api/spotify/recommendSongs\r\n// @access  Private\r\nexport const recommendSongs = async (token, user) => {\r\n\r\n    if (hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n        refreshToken()\r\n    }\r\n\r\n    console.log(genreResult)\r\n\r\n    //if genre result is empty, get 5 random ones from the list above\r\n    if (genreResult == \"\") {\r\n\r\n        let choices = Array.from(Array(90), (x, i) => i)\r\n        var num = Math.floor(Math.random() * choices.length);\r\n\r\n        var pick = choices.splice(num, 1) // remove number from array\r\n        let one = pick;\r\n        console.log(one)\r\n\r\n        num = Math.floor(Math.random() * choices.length);\r\n        let two = choices.splice(num, 1)\r\n        console.log(two)\r\n\r\n        num = Math.floor(Math.random() * choices.length);\r\n        let three = choices.splice(num, 1)\r\n        console.log(three)\r\n\r\n        num = Math.floor(Math.random() * choices.length);\r\n        let four = choices.splice(num, 1)\r\n        console.log(four)\r\n\r\n\r\n        num = Math.floor(Math.random() * choices.length);\r\n        let five = choices.splice(num, 1)\r\n        console.log(five)\r\n\r\n        \r\n\r\n        genreResult += allGenres[one]+\",\"+allGenres[two]+\",\"+allGenres[three]+\",\"+allGenres[four]+\",\"+allGenres[five]\r\n\r\n        console.log(genreResult)\r\n    }\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `https://api.spotify.com/v1/recommendations?seed_genres=${genreResult}`,\r\n        headers: {\r\n            'Accept': \"application/json\",\r\n            'Content-Type': \"application/json\",\r\n            'Authorization': `Bearer ${LOCALSTORAGE_VALUES.accessToken}`\r\n        }\r\n    });\r\n    return response;\r\n};\r\n\r\n// @desc    Get user's top artist\r\n// @route   GET /api/spotify/top_genre\r\n// @access  Private\r\n// API documentation: https://developer.spotify.com/documentation/web-api/reference/#/operations/search\r\nexport const searchTracks = async (param) => {\r\n\r\n    if (hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n        refreshToken()\r\n    }\r\n\r\n    try {\r\n\r\n        const token = localStorage.getItem(LOCALSTORAGE_KEYS.accessToken);\r\n        const response = await axios({\r\n            method: 'get',\r\n            url: `https://api.spotify.com/v1/search?q=${param}&type=track&include_external=audio&limit=7`,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem(LOCALSTORAGE_KEYS.accessToken)}`\r\n            }\r\n        })\r\n        // console.log(response);\r\n        // console.log(response.items);\r\n        if (response) return response;\r\n    } catch (error) {\r\n        console.error(error)\r\n        return false\r\n    }\r\n}\r\n\r\n\r\nconst spotifyService = {\r\n    connect,\r\n    refreshToken,\r\n    hasTokenExpired,\r\n    logout,\r\n    getTopArtist,\r\n    getTopGenre,\r\n    recommendSongs,\r\n    searchTracks,\r\n}\r\n\r\nexport default spotifyService\r\n","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\profileLeft\\ProfileLeft.jsx",["313"],[],"import {React, useEffect, useState } from \"react\";\r\nimport InfoCard from \"../infoCard/InfoCard\";\r\nimport LogoSearch from \"../logoSearch/LogoSearch\";\r\nimport SongRecsCard from \"../songRecsCard/SongRecsCard\";\r\nimport './ProfileLeft.css'\r\nimport { useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst ProfileLeft = () => {\r\n    const user = useSelector((state) => state.auth.user)\r\n    const [activeUser, setActiveUser] = useState({})\r\n    const params = useParams();\r\n    const profileUsername = params.username;\r\n    let profileUser;\r\n\r\n    const fetchProfileUser = async () => {\r\n\r\n        //if users profile\r\n        if (profileUsername === user.username) {\r\n            setActiveUser(user);\r\n        }\r\n\r\n        //logged in user is viewing someone else's page\r\n        else {\r\n            //get the persons profile and set them as the active user\r\n            const res = await fetch(`/api/users/${profileUsername}`, {\r\n                method: 'GET',\r\n                headers: { 'Accept': 'application/json' },\r\n            })\r\n            profileUser = await res.json();\r\n            setActiveUser(profileUser);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchProfileUser()\r\n    },[user]);\r\n\r\n\r\n    return (\r\n        <div className=\"ProfileLeft\">\r\n            <LogoSearch/> \r\n            <InfoCard/>\r\n            {(user.username !== activeUser.username)\r\n                ? \r\n                \"\"\r\n                : <SongRecsCard/>}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileLeft","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\rightSide\\RightSide.jsx",["314","315","316"],[],"import React, { useState } from \"react\";\r\nimport './RightSide.css';\r\nimport { UilSetting } from '@iconscout/react-unicons'\r\nimport { UilHome } from '@iconscout/react-unicons'\r\nimport { UilBell } from '@iconscout/react-unicons'\r\nimport { UilMessage } from '@iconscout/react-unicons'\r\nimport SwitchCard from \"../switchCard/SwitchCard\";\r\nimport ShareModal from \"../shareModal/ShareModal\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst RightSide = () => {\r\n    const [modalOpened, setModalOpened] = useState(false)\r\n\r\n    return (\r\n        <div className=\"RightSide\">\r\n            <div className=\"navIcons\">\r\n                <Link to='../Home'>\r\n                    <UilHome className=\"home\"></UilHome>\r\n                </Link>\r\n                <UilSetting className=\"setting\" />\r\n                <UilBell className=\"bell\"></UilBell>\r\n                <UilMessage className=\"message\"></UilMessage>\r\n            </div>\r\n\r\n           { /*<SwitchCard />*/}\r\n\r\n            <button className=\"button r-button\" onClick={()=>setModalOpened(true)}>\r\n                    Share\r\n            </button>\r\n            {/* <ShareModal modalOpened={modalOpened}\r\n                    setModalOpened={setModalOpened}/> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RightSide","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\profileCard\\ProfileCard.jsx",["317","318","319","320","321","322"],[],"import { useNavigate } from \"react-router-dom\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport React from 'react'\r\nimport './ProfileCard.css'\r\nimport defaultCover from '../../img/default-cover-4.jpg'\r\nimport defaultPFP from '../../img/default-profile.png'\r\nimport styled from \"styled-components\";\r\nimport { followUser, unfollowUser} from \"../../features/auth/authSlice\";\r\n\r\nconst Container = styled.div`\r\n    position: relative;\r\n    align-self: center;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 30%;\r\n    height: 40px;\r\n    padding:auto;\r\n    display:flex;\r\n`\r\n\r\n\r\nconst FollowButton = styled.button`\r\n    width: 40%;\r\n    height: 100%;\r\n    font-size: 15px;\r\n    position: relative;\r\n    color: white;\r\n    border: none;\r\n    background: #CDBEE0;\r\n    border-radius: 15px;\r\n    cursor: pointer;\r\n    background: var(--purple);\r\n    text-shadow: 0 0 2px #999;\r\n    align-self: center;\r\n    transition: all, 240ms ease-in-out;\r\n\r\n    &:hover {\r\n    background: rgba(93, 48, 149, 1);\r\n    filter: brightness(1.2);\r\n}\r\n`\r\n\r\n\r\n\r\nconst ProfileCard = ({ location }) => {\r\n\r\n    const user = useSelector((state) => state.auth.user)\r\n    const params = useParams();\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const [activeUser, setActiveUser] = useState({})\r\n    const [following, setFollowing] = useState()\r\n    const [followers, setFollowers] = useState()\r\n    const [isFollowing, setIsFollowing] = useState();\r\n    const [profileImage, setProfileImage] = useState();\r\n    const [numPosts, setNumPosts] = useState();\r\n    const [isPFP, setIsPFP] = useState();\r\n    const [isCover, setIsCover] = useState();\r\n    const [cover, setCover] = useState();\r\n    const profileUsername = params.username;\r\n    let profileUser;\r\n\r\n\r\n    const fetchProfileUser = async () => {\r\n\r\n        if (location === \"homePage\") {\r\n\r\n            setIsCover(false);\r\n\r\n            setFollowing(user.following.length);\r\n            setFollowers(user.followers.length);\r\n\r\n\r\n            if (user.profilePicture) {\r\n\r\n                if (user.profilePicture.data) {\r\n                    const base64String = btoa(new Uint8Array(user.profilePicture.data.data).reduce(function (data, byte) {\r\n                        return data + String.fromCharCode(byte);\r\n                    }, ''));\r\n\r\n                    setProfileImage(base64String);\r\n                    setIsPFP(true);\r\n                }\r\n\r\n                else {\r\n                    setIsPFP(false);\r\n                }\r\n\r\n            }\r\n            else {\r\n                setIsPFP(false)\r\n            }\r\n        }\r\n\r\n\r\n        //on a profile page\r\n        else {\r\n\r\n            //if users profile\r\n            if (profileUsername === user.username) {\r\n\r\n                setActiveUser(user);\r\n                setFollowing(user.following.length);\r\n                setFollowers(user.followers.length);\r\n                setNumPosts(user.posts.length)\r\n\r\n                if (user.profilePicture) {\r\n\r\n                    if (user.profilePicture.data) {\r\n                        const base64String = btoa(new Uint8Array(user.profilePicture.data.data).reduce(function (data, byte) {\r\n                            return data + String.fromCharCode(byte);\r\n                        }, ''));\r\n\r\n                        setProfileImage(base64String);\r\n                        setIsPFP(true);\r\n                    }\r\n\r\n                    else {\r\n                        setIsPFP(false);\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    setIsPFP(false)\r\n                }\r\n\r\n            }\r\n\r\n            //logged in user is viewing someone else's page\r\n            else {\r\n                //get the persons profile and set them as the active user\r\n                const res = await fetch(`/api/users/${profileUsername}`, {\r\n                    method: 'GET',\r\n                    headers: { 'Accept': 'application/json' },\r\n                })\r\n                profileUser = await res.json();\r\n                setActiveUser(profileUser);\r\n                setFollowing(profileUser.following.length);\r\n                setFollowers(profileUser.followers.length);\r\n                if (profileUser.posts) {\r\n                    setNumPosts(profileUser.posts.length)\r\n                }\r\n\r\n                if (profileUser.profilePicture) {\r\n\r\n                    if (profileUser.profilePicture.data) {\r\n                        const base64String = btoa(new Uint8Array(profileUser.profilePicture.data.data).reduce(function (data, byte) {\r\n                            return data + String.fromCharCode(byte);\r\n                        }, ''));\r\n\r\n                        setProfileImage(base64String);\r\n                        setIsPFP(true);\r\n                    }\r\n\r\n                    else {\r\n                        setIsPFP(false);\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    setIsPFP(false)\r\n                }\r\n\r\n\r\n                let length = profileUser.followers.length\r\n\r\n                //check list to see if user is following the profile they are viewing\r\n                for (let i = 0; i < length; i++) {\r\n\r\n                    if (profileUser.followers[i] == user._id) {\r\n                        setIsFollowing(true);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        fetchProfileUser()\r\n    }, [profileImage], [cover], [activeUser], [isFollowing], [isPFP], [isCover], [user]);\r\n\r\n\r\n\r\n    const DoFollow = async () => {\r\n        await dispatch(followUser(activeUser._id)).then((response) => {\r\n            console.log(response);\r\n        }) \r\n\r\n        window.location.reload();\r\n    }\r\n\r\n    const DoUnFollow = async () => {\r\n\r\n        await dispatch(unfollowUser(activeUser._id)).then((response) => {\r\n            console.log(response);\r\n        }) \r\n\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"ProfileCard\">\r\n            <div className=\"ProfileImages\">\r\n                {location == \"profilePage \" ? isCover ? <img src={`data:image/png;base64,${cover}`} alt=\"userCover\" /> : <img src={defaultCover} alt=\"defaultCover\" /> : isCover ? <img src={`data:image/png;base64,${cover}`} alt=\"Profile picture\" /> : <img src={defaultCover} alt=\"defaultCover\" />}\r\n                {location == \"profilePage\" ? isPFP ? <img src={`data:image/;base64,${profileImage}`} alt=\"userPFP\" /> : <img src={defaultPFP} alt=\"defaultPFP\" /> : isPFP ? <img src={`data:image/png;base64,${profileImage}`} alt=\"userPFP\" /> : <img src={defaultPFP} alt=\"defaultPFP\" />}\r\n\r\n            </div>\r\n\r\n            <div className=\"ProfileName\">\r\n                {location === \"homePage\" ? <><span>{user.name}</span> <span>@{user.username}</span></> : <><span>{activeUser.name}</span> <span>@{activeUser.username}</span></>}\r\n\r\n            </div>\r\n            {location === \"profilePage\" && isFollowing\r\n                && (user.username !== activeUser.username)\r\n                ?\r\n                <Container>\r\n                    <FollowButton onClick={DoUnFollow}>Unfollow</FollowButton>\r\n                </Container> : \"\"}\r\n            {(user.username !== activeUser.username) && location === \"profilePage\" && !isFollowing\r\n                ? <Container>\r\n                    <FollowButton onClick={DoFollow}>Follow</FollowButton>\r\n                </Container> : \"\"}\r\n\r\n\r\n            <div className=\"followStatus\">\r\n                <hr />\r\n                <div>\r\n                    <div className=\"follow\">\r\n                        <span>{followers}</span>\r\n                        <span>Followers</span>\r\n                    </div>\r\n                    <div className=\"vl\"></div>\r\n                    <div className=\"follow\">\r\n                        <span>{following}</span>\r\n                        <span>Following</span>\r\n                    </div>\r\n\r\n                    {location === 'profilePage' && (\r\n                        <>\r\n                            <div className=\"vl\"></div>\r\n                            <div className=\"follow\">\r\n                                {numPosts ? <span>{numPosts}</span> : <span>0</span>}\r\n                                <span>Posts</span>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n                <hr />\r\n            </div>\r\n            {location === 'profilePage' ? \"\" : <span\r\n                onClick={() => {\r\n                    navigate(\r\n                        `/profile/${user.username}`);\r\n                }}>My Profile</span>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileCard","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\postSide\\PostSide.jsx",["323"],[],"import React from \"react\";\r\nimport PostContainer from \"../PostContainer/PostContainer\";\r\nimport PostShare from \"../postShare/PostShare\";\r\nimport './PostSide.css';\r\nimport LogoSearch from '../../components/logoSearch/LogoSearch'\r\n\r\n\r\nconst PostSide = () => {\r\n    return (\r\n        <div className=\"PostSide\">\r\n            <PostShare/>\r\n            <PostContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default PostSide","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\profileSide\\ProfileSide.jsx",["324","325","326","327","328"],[],"import React from 'react'\r\nimport LogoSearch from '../logoSearch/LogoSearch'\r\nimport ProfileCard from '../profileCard/ProfileCard'\r\nimport SongRecsCard from '../songRecsCard/SongRecsCard'\r\nimport \"./ProfileSide.css\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { UilSetting } from '@iconscout/react-unicons'\r\nimport { UilHome } from '@iconscout/react-unicons'\r\nimport { UilBell } from '@iconscout/react-unicons'\r\nimport { UilMessage } from '@iconscout/react-unicons'\r\n\r\nconst ProfileSide = () => {\r\n    return (\r\n        <div className=\"ProfileSide\">\r\n            {/* <div className=\"navIcons\">\r\n                <Link to='../Home'>\r\n                    <UilHome className=\"home\"></UilHome>\r\n                </Link>\r\n                <UilSetting className=\"setting\" />\r\n                <UilBell className=\"bell\"></UilBell>\r\n                <UilMessage className=\"message\"></UilMessage>\r\n            </div> */}\r\n            <LogoSearch/>\r\n            <ProfileCard location=\"homePage\"/>\r\n            <SongRecsCard/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileSide","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\infoCard\\InfoCard.jsx",["329","330","331","332"],[],"import React, { useState } from \"react\"\r\nimport './InfoCard.css'\r\nimport { UilPen } from '@iconscout/react-unicons'\r\nimport ProfileModal from '../profileModal/ProfileModal'\r\nimport { logout, reset, getMe } from '../../features/auth/authSlice'\r\nimport { spotifyLogout } from '../../features/spotify/spotifySlice'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useEffect } from \"react\"\r\nimport SongCard from \"../SongCard/SongCard.jsx\"\r\nimport { getTopArtist } from \"../../features/spotify/spotifySlice\"\r\nimport loadingCir from '../../img/loading-gif.gif'\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    position: relative;\r\n    align-self: center;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 30%;\r\n    height: 40px;\r\n    padding:auto;\r\n    display:flex;\r\n`\r\n\r\n\r\n\r\nconst InfoCard = ({location}) => {\r\n\r\n    const params = useParams();\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const { isConnected } = useSelector((store) => store.spotify)\r\n    const user = useSelector((state) => state.auth.user)\r\n\r\n    const [modalOpened, setModalOpened] = useState(false)\r\n    const [topArtist, setTopArtist] = useState({});\r\n    const [topGenres, setTopGenres] = useState(null);\r\n    const [activeUser, setActiveUser] = useState({})\r\n    const [anthem, setAnthem] = useState();\r\n    const [spotifyLoading, setSpotifyLoading] = useState(true)\r\n\r\n    const profileUsername = params.username;\r\n    let profileUser;\r\n\r\n    const fetchProfileUser = async () => {\r\n        if (profileUsername === user.username) {\r\n            setActiveUser(user);\r\n            setAnthem(user.anthem)\r\n            fetchTopArtist()\r\n        }\r\n        else {\r\n            const res = await fetch(`/api/users/${profileUsername}`, {\r\n                method: 'GET',\r\n                headers: { 'Accept': 'application/json' },\r\n            })\r\n            profileUser = await res.json();\r\n            setActiveUser(profileUser);\r\n            if(profileUser.anthem)\r\n            {\r\n                setAnthem(profileUser.anthem)\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    const fetchTopArtist = async () => {\r\n        if (isConnected) {\r\n            await dispatch(getTopArtist())\r\n                .then(response => {\r\n                    let genres = [response.payload.data.items[0].genres[1]+\" \"]\r\n                    setTopGenres(genres)\r\n                    setTopArtist(response.payload.data.items[0]);\r\n                    setSpotifyLoading(false);\r\n                    topArtist = {}\r\n                    topArtist['name'] = response.payload.data.items[0].name;\r\n                    topArtist['genre'] = genres[0];\r\n                    topArtist['image'] = response.payload.data.items[0].images[0];\r\n                })\r\n                .then(() => {dispatch(setTopArtist(topArtist))})\r\n        }\r\n    } \r\n\r\n    useEffect(() => {\r\n        fetchProfileUser()\r\n\r\n    }, [isConnected, activeUser, anthem, user],[]); //! Important \r\n\r\n\r\n    const onLogout = () => {\r\n        dispatch(logout())\r\n            .then(() => {\r\n                if (isConnected) {\r\n                    dispatch(spotifyLogout())\r\n                }\r\n                navigate(\"/\", { replace: true })\r\n            })\r\n            .then(() => {\r\n                dispatch(reset())\r\n            })\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"InfoCard\">\r\n            <div className=\"InfoHead\">\r\n                <h4>Profile Info</h4>\r\n                {user.username === activeUser.username ? (<div><UilPen width='2rem' height='1.2rem' onClick={() => setModalOpened(true)} />\r\n                    <ProfileModal modalOpened={modalOpened}\r\n                        setModalOpened={setModalOpened}\r\n                        data={user} />\r\n                </div>) : (\"\")\r\n                }\r\n            </div>\r\n            <div className=\"info\">\r\n                <span>\r\n                    <b>Anthem</b>\r\n                </span>\r\n                <span>\r\n                    {anthem ?\r\n                        <SongCard name={anthem.title} artist1={anthem.artist1} image={anthem.image} url={anthem.url}></SongCard>\r\n                        :\r\n                        \" Anthem Not Selected\"}\r\n                </span>\r\n            </div>\r\n            <div className=\"info\">\r\n                <span>\r\n                    <b>Top Artist</b>\r\n                    <br></br>\r\n                    <br></br>\r\n                </span>\r\n                <span>\r\n                    {!spotifyLoading ? user.username === activeUser.username && topArtist ? (\r\n                        <div className=\"songrec\">\r\n                            <div className=\"topArtist\">\r\n                                <img src={topArtist.images[0].url} alt={topArtist.name} className='songrecImg' />\r\n                                <div className=\"songname\">\r\n                                    <span>{topArtist.name}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    ) : (\r\n                        <div>\r\n                            <p> Top Artist Not Found </p>\r\n                        </div>\r\n                    ) : <img className=\"loadingCircle\" src={loadingCir} alt=\"loading\" />}\r\n                </span>\r\n            </div >\r\n            <div className=\"info\">\r\n                <span>\r\n                    <b>Top Artist's Genre</b>\r\n                    <br></br>\r\n                    <br></br>\r\n                </span>\r\n                <span>\r\n                    {!spotifyLoading ?\r\n                        user.username === activeUser.username && topGenres ? (\r\n                            <div>\r\n                                {topGenres.map((genres, index) => {\r\n                                    \r\n                                    return (\r\n                                        <div key={index}>\r\n                                            <span> - {genres}</span>\r\n                                            <br></br>\r\n                                        </div>\r\n                                    )\r\n\r\n                                })}\r\n                                \r\n                            </div>\r\n                        ) : (\r\n                            <div>\r\n                                <p> Top Genre Not Found </p>\r\n                            </div>\r\n                        ) : <img className=\"loadingCircle\" src={loadingCir} alt=\"loading\" />}\r\n                </span>\r\n            </div>\r\n            {(user.username === activeUser.username)\r\n                ?\r\n                    <button className='button logout-button' onClick={onLogout}>Logout</button>\r\n                 : \"\"}\r\n           \r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default InfoCard","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\songRecsCard\\SongRecsCard.jsx",["333","334","335","336","337","338","339"],[],"import React from 'react'\r\nimport './SongRecsCard.css'\r\nimport { useDispatch } from 'react-redux'\r\nimport { getRecommended } from '../../features/spotify/spotifySlice'\r\nimport { useSelector } from 'react-redux'\r\nimport { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport loadingCir from '../../img/loading-gif.gif'\r\n\r\n\r\n\r\nconst SongRecsCard = () => {\r\n    const { isConnected } = useSelector((store) => store.spotify)\r\n    const user = useSelector((store) => store.auth.user)\r\n\r\n    const dispatch = useDispatch()\r\n    const [list, setList] = useState();\r\n    const [spotifyLoading, setSpotifyLoading] = useState(true)\r\n    let loaded = false\r\n\r\n\r\n    let tracks = [];\r\n\r\n    /*\r\n    async function fetchData() {\r\n        if (isConnected) {\r\n            if(loaded) {\r\n                dispatch(getRecommended())\r\n                .then(response => {\r\n\r\n                    //randomly choice 3 numbers \r\n                    let choices = Array.from(Array(20),(x,i)=>i)\r\n                    var num = Math.floor(Math.random() * choices.length);\r\n                    \r\n                    var pick = choices.splice(num,1) // remove number from array\r\n                    let one = pick;\r\n\r\n                    num = Math.floor(Math.random() * choices.length);\r\n                    let two = choices.splice(num,1)\r\n\r\n                    num = Math.floor(Math.random() * choices.length);\r\n                    let three = choices.splice(num,1)\r\n\r\n\r\n                    tracks = [\r\n                        { name: response.payload.data.tracks[one].name, artist: response.payload.data.tracks[one].artists[0].name, img: response.payload.data.tracks[one].album.images[0].url },\r\n                        { name: response.payload.data.tracks[two].name, artist: response.payload.data.tracks[two].artists[0].name, img: response.payload.data.tracks[two].album.images[0].url },\r\n                        { name: response.payload.data.tracks[three].name, artist: response.payload.data.tracks[three].artists[0].name, img: response.payload.data.tracks[three].album.images[0].url },\r\n                    ]\r\n\r\n                    setList(tracks);\r\n                    setSpotifyLoading(false)\r\n                })\r\n            }\r\n            loaded = true;\r\n        }\r\n    } */\r\n\r\n    useEffect(() => {\r\n        //fetchData();\r\n    }, [user]); //! Important\r\n\r\n    if (list && !spotifyLoading) {\r\n        return (\r\n            <div className=\"SongRecsCard\">\r\n                <h3>You might like...</h3>\r\n\r\n                {list.map((songrec, id) => {\r\n                    return (\r\n                        <div className=\"songrec\" key={id}>\r\n                            <div>\r\n                                <img src={songrec.img} alt=\"\" className='songrecImg' />\r\n                                <div className=\"songname\">\r\n                                    <span>{songrec.name}</span>\r\n                                    <span>{songrec.artist}</span>\r\n                                </div>\r\n                            </div>\r\n                            {/*<button className='button sr-button'></button>*/}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (<img className=\"loadingCircle\" src={loadingCir} alt=\"loading\" />)\r\n    }\r\n}\r\n\r\nexport default SongRecsCard","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\switchCard\\SwitchCard.jsx",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\logoSearch\\LogoSearch.jsx",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\shareModal\\ShareModal.jsx",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\postShare\\PostShare.jsx",["340","341","342","343"],[],"import React, { useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport defaultPFP from '../../img/default-profile.png'\r\nimport './PostShare.css'\r\nimport { UilScenery } from \"@iconscout/react-unicons\"\r\nimport { UilMusic } from '@iconscout/react-unicons'\r\nimport { UilListUl } from '@iconscout/react-unicons'\r\nimport { UilTimes } from '@iconscout/react-unicons'\r\nimport { createNewPost, createNewPostWithoutImage } from \"../../features/post/postSlice\";\r\nimport { searchTracks } from \"../../features/spotify/spotifySlice\"\r\nimport styled from \"styled-components\";\r\nimport SongCard from \"../SongCard/SongCard\";\r\nimport SpotifyPopUp from \"../spotifyModal/SpotifyPopUp\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\nconst PostShare = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [image, setImage] = useState(null);\r\n\r\n\r\n    const [modalOpened, setModalOpened] = useState(false)\r\n    const [profileImage, setProfileImage] = useState();\r\n    const [song, setSong] = useState(false)\r\n    const [selection, setSelection] = useState()\r\n    const [isPosted, setIsPosted] = useState(true)\r\n    const [isPFP, setIsPFP] = useState();\r\n    const desc = useRef();\r\n    const imageRef = useRef();\r\n    const { user } = useSelector((state) => state.auth);\r\n\r\n    const checkPFP = () => {\r\n\r\n        if (user.profilePicture) {\r\n\r\n            if(user.profilePicture.data)\r\n            {\r\n                const base64String = btoa(new Uint8Array(user.profilePicture.data.data).reduce(function (data, byte) {\r\n                    return data + String.fromCharCode(byte);\r\n                }, ''));\r\n                setProfileImage(base64String);\r\n                setIsPFP(true);\r\n            }\r\n           \r\n          else{\r\n            setIsPFP(false);\r\n          }\r\n        }\r\n        else {\r\n            setIsPFP(false)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        checkPFP()\r\n    }, [profileImage], [isPFP]);\r\n\r\n    const onImageChange = (event) => {\r\n        if (event.target.files && event.target.files[0]) {\r\n            let img = event.target.files[0];\r\n            setImage(img);\r\n        }\r\n    };\r\n\r\n    const handleUpload = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (image)\r\n        {\r\n            const data = new FormData();\r\n            data.append('author', user._id);\r\n            data.append('name', user.name)\r\n            data.append('username', user.username)\r\n            data.append('caption', desc.current.value);\r\n\r\n\r\n            if (song) {\r\n\r\n                data.append('song', selection.name);\r\n                data.append('artist', selection.artist);\r\n                data.append('image', selection.image);\r\n                data.append('url', selection.url);\r\n            }     \r\n\r\n            data.append('picture', image);\r\n\r\n            dispatch(createNewPost(data)).then((response) => {\r\n                console.log(response.payload)\r\n            });\r\n        }\r\n        else\r\n        {\r\n            const data = {};\r\n            data['author'] = user._id;\r\n            data['name'] = user.name;\r\n            data['username'] = user.username;\r\n            data['caption'] = desc.current.value;\r\n\r\n\r\n            if (song) {\r\n\r\n                data['song'] = selection.name;\r\n                data['artist'] = selection.artist;\r\n                data['image'] = selection.image;\r\n                data['url'] = selection.url;\r\n            }     \r\n\r\n            dispatch(createNewPostWithoutImage(data)).then((response) => {\r\n                console.log(response.payload)         \r\n            });\r\n        }\r\n\r\n       window.location.reload();\r\n    };\r\n\r\n\r\n    const getInfo = payload => {\r\n\r\n        setSelection(payload)\r\n        console.log(payload.url)\r\n        setSong(true);\r\n    }\r\n\r\n    /*\r\n    const handlePlaylist = async (e) => {\r\n        dispatch(getUsersPlaylists()).then(() => {\r\n            console.log(\"Success\")\r\n        })\r\n    } *///\r\n\r\n    return (\r\n        <div className=\"PostShare\">\r\n            {isPFP ? <img src={`data:image/png;base64,${profileImage}`} alt=\"userPFP\" /> : <img src={defaultPFP} alt=\"defaultPFP\" />}\r\n\r\n            <div>\r\n                <div className=\"status\">\r\n                    <input type=\"text\" placeholder=\"What's happening?\" ref={desc} required />\r\n\r\n                    <button className=\"status-button\" onClick={handleUpload}>\r\n                        Share\r\n                    </button>\r\n                </div>\r\n                <div className=\"postOptions\">\r\n                    <div className=\"option\"\r\n                        style={{ color: \"#CDBEE0\" }}\r\n                        onClick={() => imageRef.current.click()}>\r\n                        <UilScenery />\r\n                        Photo\r\n                    </div>\r\n                    <div className=\"option\"\r\n                        style={{ color: \"#62929E\" }} onClick={() =>\r\n                            setModalOpened(true)\r\n                        }>\r\n                        <SpotifyPopUp modalOpened={modalOpened}\r\n                            setModalOpened={setModalOpened}\r\n                            getInfo={getInfo} />\r\n                        <UilMusic />\r\n                        Song\r\n                    </div>\r\n                    <div className=\"option\"\r\n                        style={{ color: \"#B2675E\" }}\r\n                    >\r\n                        <UilListUl />\r\n                        Playlist\r\n                    </div>\r\n                    <div style={{ display: \"none\" }}>\r\n                        <input type=\"file\" name=\"myImage\" ref={imageRef} onChange={onImageChange} />\r\n                    </div>\r\n                </div>\r\n                {image && (\r\n                    <div className=\"previewImage\">\r\n                        <UilTimes onClick={() => {\r\n                            setImage(null)\r\n                            setIsPosted(null)\r\n                        }} />\r\n                        <img src={URL.createObjectURL(image)} alt=\"preview\" />\r\n                    </div>\r\n                )}\r\n\r\n                {song && (<div className=\"previewImage\">\r\n                    <UilTimes onClick={() => {\r\n                        setSong(null)\r\n                        setIsPosted(null)\r\n                    }} />\r\n                    <SongCard\r\n                        name={selection.name}\r\n                        artist1={selection.artist}\r\n                        image={selection.image}\r\n                        url={selection.url}\r\n                    ></SongCard>\r\n                </div>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostShare","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\Data\\SongRecsData.js",[],[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\Data\\PostsData.js",["344","345"],[],"import postPic1 from '../img/postpic1.jpg'\r\nimport postPic2 from '../img/postpic2.jpg'\r\n\r\n/*these are placeholder values*/\r\nexport const PostsData = [\r\n    // {\r\n    //     img: postPic1,\r\n    //     author: 'Laura',\r\n    //     caption: \"Had a great time at #TheStrokesOrlando !!\",\r\n    //     likes: 37,\r\n    //     comments:\"\",\r\n    //     liked: false\r\n    // },\r\n    // {\r\n    //     img: postPic2,\r\n    //     author: 'Danny',\r\n    //     caption: \"gotta put on the coding socks\",\r\n    //     likes: 69,\r\n    //     comments:\"\",\r\n    //     liked: true\r\n    // }\r\n]","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\profileModal\\ProfileModal.jsx",["346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362"],[],"import { Modal, useMantineTheme } from '@mantine/core'\r\nimport { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport './ProfileModal.css'\r\nimport React from 'react'\r\nimport Logo from '../../img/logo.png'\r\nimport { UilSearch } from '@iconscout/react-unicons'\r\nimport styled from \"styled-components\";\r\nimport { searchTracks } from \"../../features/spotify/spotifySlice\"\r\nimport { updateUser } from \"../../features/auth/authSlice\"\r\nimport SongCard from \"../SongCard/SongCard.jsx\"\r\nimport { getMe, uploadPFP } from '../../features/auth/authSlice';\r\n\r\n\r\nconst ResultsContainer = styled.div`\r\n    /* margin-top: ; */\r\n    background: white;\r\n    /* height: 20%; */\r\n    width: 100%;\r\n    z-index:1;\r\n    align-self: center;\r\n    border-radius:10px;\r\n    display: none;\r\n    /* top: 40px;\r\n    left:150px; */\r\n    filter: drop-shadow(0 0 0.3rem black);\r\n`\r\n\r\nconst List = styled.ul`\r\n  list-style: none;\r\n\r\n`\r\n\r\nconst Results = styled.li`\r\n    text-decoration: none;\r\n`\r\nconst Songs = styled.a`\r\ntext-decoration: none;\r\ncursor: pointer;\r\n\r\n&:hover {\r\n        color:rgba(104,59,159,1);\r\n    }\r\n\r\n`\r\n\r\nfunction ProfileModal({ modalOpened, setModalOpened, data }) {\r\n    const theme = useMantineTheme();\r\n\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const userCall = useSelector((state) => state.auth.user)\r\n    const [user, setUser] = useState({})\r\n    const [profileImage, setProfileImage] = useState(null)\r\n    const [coverImage, setCoverImage] = useState(null)\r\n    const [songList, setSongList] = useState([])\r\n    const [searchTerm, setSearchTerm] = useState(\"\")\r\n\r\n    const [tempName, setTempName] = useState(null)\r\n    const [tempUsername, setTempUsername] = useState(null)\r\n\r\n    const [tempAnthemId, setTempAnthemId] = useState(null)\r\n    const [tempAnthemName, setTempAnthemName] = useState(\"\")\r\n    const [tempAnthemImage, setTempAnthemImage] = useState(null)\r\n    const [tempAnthemArtist1, setTempAnthemArtist1] = useState(null)\r\n    const [tempAnthemUrl, setTempAnthemUrl] = useState(null)\r\n\r\n    const [holdName, setHoldName] = useState(null)\r\n    const [holdUsername, setHoldUsername] = useState(null)\r\n\r\n    let creds;\r\n    let searching = false;\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchProfileUser = async () => {\r\n            setUser(userCall);\r\n            setHoldName(data.name);\r\n            setHoldUsername(data.username);\r\n\r\n            searching = false;\r\n        }\r\n\r\n        fetchProfileUser()\r\n\r\n    }, [])\r\n\r\n\r\n    const picUpload = () => {\r\n        const prof = new FormData();\r\n        prof.append(\"picture\", profileImage);\r\n        prof.append(\"id\", user._id)\r\n        dispatch(uploadPFP(prof))\r\n        .then( (response) => {console.log(\"UPLOAD PROFILE IMAGE: \" + response.data)})\r\n    }\r\n\r\n    const onImageChange = (event) => {\r\n        if (event.target.files && event.target.files[0]) {\r\n            let img = event.target.files[0];\r\n\r\n            event.target.name === \"picture\" ? setProfileImage(img) : setCoverImage(img)\r\n        }\r\n    };\r\n\r\n    const handleChange = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(e.target.value)\r\n\r\n        if (e.target.value.length != 0) {\r\n            dispatch(searchTracks(e.target.value))\r\n                .then((response) => {\r\n                    setSongList(response.payload.data.tracks.items)\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    const handleClick = (e, song) => {\r\n        console.log(\"clicked \" + song.name)\r\n        setTempAnthemName(song.name)\r\n        setTempAnthemArtist1(song.artists[0].name)\r\n        setTempAnthemImage(song.album.images[0].url)\r\n        setTempAnthemId(song.id)\r\n        setTempAnthemUrl(song.preview_url)\r\n        setSearchTerm('');\r\n\r\n    }\r\n\r\n    if (searchTerm.length > 0) {\r\n        searching = true;\r\n    } else {\r\n        searching = false;\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        //user didnt change anything\r\n        if (tempName == null && tempUsername == null && tempAnthemName == \"\" && profileImage == null) {\r\n            creds = {\r\n                name: data.name,\r\n                username: data.username,\r\n                anthemId: data.anthem.id,\r\n                anthemTitle: data.anthem.title,\r\n                anthemArtist1: data.anthem.artist1,\r\n                anthemImage: data.anthem.image,\r\n                anthemUrl: data.anthem.url\r\n            }\r\n        }\r\n\r\n        //user changes everything\r\n        else if (tempName != null && tempUsername != null && tempAnthemName != \"\") {\r\n\r\n            creds = {\r\n                name: tempName,\r\n                username: tempUsername,\r\n                anthemId: tempAnthemId,\r\n                anthemTitle: tempAnthemName,\r\n                anthemArtist1: tempAnthemArtist1,\r\n                anthemImage: tempAnthemImage,\r\n                anthemUrl: tempAnthemUrl\r\n            }\r\n\r\n        }\r\n\r\n        //user changes their name and anthem\r\n        else if (tempUsername == null && tempName != null && tempAnthemName != \"\") {\r\n            creds = {\r\n                name: tempName,\r\n                username: data.username,\r\n                anthemId: tempAnthemId,\r\n                anthemTitle: tempAnthemName,\r\n                anthemArtist1: tempAnthemArtist1,\r\n                anthemImage: tempAnthemImage,\r\n                anthemUrl: tempAnthemUrl\r\n            }\r\n        }\r\n\r\n        //user changes their username and anthem\r\n        else if (tempName == null && tempAnthemName != \"\" && tempUsername != null) {\r\n            creds = {\r\n                name: data.name,\r\n                username: tempUsername,\r\n                anthemId: tempAnthemId,\r\n                anthemTitle: tempAnthemName,\r\n                anthemArtist1: tempAnthemArtist1,\r\n                anthemImage: tempAnthemImage,\r\n                anthemUrl: tempAnthemUrl\r\n            }\r\n        }\r\n\r\n        //user changes their name and username\r\n        else if (tempAnthemName == \"\" && tempUsername != null && tempName != null) {\r\n            creds = {\r\n                name: tempName,\r\n                username: tempUsername,\r\n                anthemId: data.anthem.id,\r\n                anthemTitle: data.anthem.title,\r\n                anthemArtist1: data.anthem.artist1,\r\n                anthemImage: data.anthem.image,\r\n                anthemUrl: data.anthem.url\r\n            }\r\n        }\r\n\r\n        //user changes only their anthem\r\n        else if (tempName == null && tempUsername == null && tempAnthemName != \"\") {\r\n            creds = {\r\n                name: data.name,\r\n                username: data.username,\r\n                anthemId: tempAnthemId,\r\n                anthemTitle: tempAnthemName,\r\n                anthemArtist1: tempAnthemArtist1,\r\n                anthemImage: tempAnthemImage,\r\n                anthemUrl: tempAnthemUrl\r\n            }\r\n        }\r\n\r\n        //user changes only their name\r\n        else if (tempUsername == null && tempAnthemName == \"\" && tempName != null) {\r\n            creds = {\r\n                name: tempName,\r\n                username: data.username,\r\n                anthemId: data.anthem.id,\r\n                anthemTitle: data.anthem.title,\r\n                anthemArtist1: data.anthem.artist1,\r\n                anthemImage: data.anthem.image,\r\n                anthemUrl: data.anthem.url\r\n            }\r\n        }\r\n\r\n\r\n        //user changes only their username\r\n        else if (tempName == null && tempAnthemName == \"\" && tempUsername != null) {\r\n            creds = {\r\n                name: data.name,\r\n                username: tempUsername,\r\n                anthemId: data.anthem.id,\r\n                anthemTitle: data.anthem.title,\r\n                anthemArtist1: data.anthem.artist1,\r\n                anthemImage: data.anthem.image,\r\n                anthemUrl: data.anthem.url\r\n            }\r\n        }\r\n\r\n        dispatch(updateUser(creds))\r\n            .then( (updateUserRes) => {\r\n                if (profileImage) {\r\n                    picUpload();\r\n                }\r\n\r\n                setUser(updateUserRes.payload)\r\n                navigate(\r\n                `/profile/${updateUserRes.username}`)\r\n                setModalOpened(false);\r\n\r\n                // window.location.reload();\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            overlayColor={theme.colorScheme === 'dark' ? theme.colors.dark[9] : theme.colors.gray[2]}\r\n            overlayOpacity={0.55}\r\n            overlayBlur={3}\r\n            size='55%'\r\n            opened={modalOpened}\r\n            onClose={() => { setModalOpened(false); searching = false; }}>\r\n\r\n            {/* FILL PLACEHOLDERS WITH CURRENT NAME AND USERNAME*/}\r\n            {holdName && holdUsername ?\r\n                (<form className='infoForm' onSubmit={handleSubmit}>\r\n                    <h3>Update your info</h3>\r\n                    <div>\r\n                        <input type=\"text\" className=\"infoInput\" name=\"Name\" placeholder={user.name} onChange={(e) => setTempName(e.target.value)} />\r\n                        <input type=\"text\" className=\"infoInput\" name=\"Username\" placeholder={user.username} onChange={(e) => setTempUsername(e.target.value)} />\r\n                    </div>\r\n                    <br />\r\n                    {/* IF ANTHEM EXISTS/SELECTED ... SHOW ON FORM */}\r\n                    {user.anthem ? <div className=\"currentAnthem\">\r\n                        <SongCard name={user.anthem.title} artist1={user.anthem.artist1}\r\n                            image={user.anthem.image}></SongCard>\r\n                    </div> : <></>}\r\n                    <br />\r\n                    {/* SHOW RESULTS LIST WHEN SEARCHING */}\r\n                    {searching ? (<div className=\"searchContainer\">\r\n                        <input type=\"text\" className=\"infoInput\" value={searchTerm} name=\"Anthem\" placeholder=\"Search for a song...\" onChange={handleChange} />\r\n\r\n                        <ResultsContainer style={{ display: searching ? \"inline\" : \"none\" }}>\r\n                            {songList.map((song, index) => {\r\n                                return (\r\n                                    <div key={index}>\r\n                                        <List>\r\n                                            <Results onClick={(e) => handleClick(e, song)}>\r\n                                                <SongCard\r\n                                                    name={song.name}\r\n                                                    artist1={song.artists[0].name}\r\n                                                    image={song.album.images[0].url}\r\n                                                    url={song.url}\r\n                                                ></SongCard>\r\n                                            </Results>\r\n                                        </List>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </ResultsContainer>\r\n                    </div>) : (<div className=\"ResultsContainer\">\r\n                        {searchTerm != '' ? (<input type=\"text\" className=\"infoInput\" name=\"Anthem\" placeholder={data.anthem.title} onChange={handleChange} />) :\r\n                            (<input type=\"text\" className=\"infoInput\" name=\"Anthem\" value={tempAnthemName} placeholder={tempAnthemName} onChange={handleChange} />)}\r\n\r\n                    </div>)}\r\n                    <div>\r\n                        Profile image\r\n                        <input type=\"file\" name='picture' onChange={onImageChange} />\r\n                        Cover image\r\n                        <input type=\"file\" name='coverImg' onChange={onImageChange} />\r\n                    </div>\r\n                    <button type='submit' className='button infoButton'>Update</button>\r\n                </form>)\r\n                : // IF SOMETHING GOES WRONG\r\n                (<form className='infoForm'>\r\n                    <h3>Your info</h3>\r\n                    <div>\r\n                        <input type=\"text\" className=\"infoInput\" name=\"Name\" placeholder=\"Name\" />\r\n                        <input type=\"text\" className=\"infoInput\" name=\"Username\" placeholder=\"Username\" />\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"text\" className=\"infoInput\" name=\"Anthem\" placeholder=\"Your Anthem\" />\r\n                    </div>\r\n                    <div>\r\n                        Profile image\r\n                        <input type=\"file\" name='picture' />\r\n                        Cover image\r\n                        <input type=\"file\" name='coverImg' />\r\n                    </div>\r\n                    <button type='submit' className='button infoButton'>Update</button>\r\n                </form>)}\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default ProfileModal","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\Post\\Post.jsx",["363","364","365","366","367","368","369","370","371"],[],"import React, { useState } from \"react\";\r\nimport './Post.css'\r\nimport Comment from '../../img/comment.png'\r\nimport Share from '../../img/share.png'\r\nimport Heart from '../../img/like.png'\r\nimport NotLike from '../../img/notlike.png'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport defaultPFP from '../../img/default-profile.png'\r\nimport DeleteModal from '../deleteModal/DeleteModal'\r\nimport { useEffect } from \"react\";\r\nimport SongCard from \"../SongCard/SongCard\";\r\nimport { UilTimes } from '@iconscout/react-unicons'\r\nimport { useParams } from 'react-router-dom';\r\nimport { likePost, unlikePost } from \"../../features/post/postSlice\"\r\n\r\nconst Post = ({ data }) => {\r\n\r\n    const [modalOpened, setModalOpened] = useState(false)\r\n    const [isImage, setIsImage] = useState(false)\r\n    const [isSong, setIsSong] = useState(false);\r\n    const { user } = useSelector((state) => state.auth);\r\n    const [picture, setPicture] = useState()\r\n    const [profileImage, setProfileImage] = useState();\r\n    const [isPFP, setIsPFP] = useState();\r\n\r\n    const [activeUser, setActiveUser] = useState({})\r\n    const params = useParams();\r\n    const profileUsername = params.username;\r\n    let profileUser;\r\n    const dispatch = useDispatch();\r\n\r\n    const fetchProfileUser = async () => {\r\n        setActiveUser(user);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchProfileUser()\r\n    },[user]);\r\n\r\n    useEffect(() => {\r\n        //console.log(data.id)\r\n        if (data.img.data) {\r\n\r\n            setIsImage(true)\r\n            const base64String  = btoa(new Uint8Array(data.img.data.data).reduce(function (data, byte) {\r\n                return data + String.fromCharCode(byte);\r\n            }, ''));\r\n            \r\n            setPicture(base64String)\r\n        }\r\n\r\n        else\r\n        {\r\n       \r\n            setIsImage(false)\r\n        }\r\n\r\n\r\n        if (data.profileImage) {\r\n\r\n            if(data.profileImage.data)\r\n            {\r\n                var base64String = btoa(new Uint8Array(data.profileImage.data.data).reduce(\r\n                    function (imgData, byte) {\r\n                        return imgData + String.fromCharCode(byte);\r\n                    },\r\n                    ''\r\n                ));\r\n    \r\n                setProfileImage(base64String);\r\n    \r\n                setIsPFP(true);\r\n            }\r\n\r\n            else{\r\n                setIsPFP(false)\r\n            }\r\n            \r\n        }\r\n        else {\r\n            setIsPFP(false)\r\n        }\r\n\r\n\r\n        if (data.song) {\r\n            setIsSong(true)\r\n        }\r\n    }, [])\r\n\r\n    const ChangeLike = async () => {\r\n    \r\n        if (!data.liked)\r\n        {\r\n            const postId = data.id\r\n            const userId = user._id\r\n            await dispatch(likePost(postId))\r\n                .then( (response) =>{\r\n                    console.log(response.payload)\r\n                    window.location.reload()\r\n                })\r\n        }\r\n        else\r\n        {\r\n            await dispatch(unlikePost(data.id, user._id))\r\n                .then( (response) =>{\r\n                    console.log(response)\r\n                    window.location.reload()\r\n                })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Post\">\r\n            <div className=\"postInfo\">\r\n                {isPFP ? <img src={`data:image/png;base64,${profileImage}`} alt=\"userCover\" /> : <img src={defaultPFP} alt=\"defaultPFP\" />}\r\n                <div className=\"content\">\r\n                    <div>\r\n                        <span><b>{data.name}</b></span>\r\n                        <span> @{data.username}</span>\r\n                    </div>\r\n\r\n                    <span> {data.caption}</span>\r\n                </div>\r\n\r\n                {(user.username === data.username)\r\n                ? \r\n                <div className=\"options\" onClick={() => setModalOpened(true)}>\r\n                    <UilTimes/>\r\n                    <DeleteModal modalOpened={modalOpened}\r\n                        setModalOpened={setModalOpened}\r\n                        post={data}\r\n                        />\r\n                </div>\r\n                : \"\"}\r\n\r\n            </div>\r\n\r\n            {isSong ? <SongCard\r\n                name={data.song}\r\n                artist1={data.artist}\r\n                image={data.image}\r\n                url={data.url}\r\n            ></SongCard> : \"\"\r\n            }\r\n            {isImage ? <img src={`data:image/png;base64,${picture}`} alt=\"user image\" /> : \"\"}\r\n            <div className=\"postReact\">\r\n                <img src={data.liked ? Heart : NotLike} alt=\"\" onClick={ChangeLike}/>\r\n                {/* <img src={Comment} alt=\"\" />\r\n                <img src={Share} alt=\"\" /> */}\r\n            </div>\r\n\r\n            <span style={{ color: \"var(--gray)\", fontSize: '13px' }}>{data.likes} likes</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\LoginSignUp\\emailSent.jsx",["372","373","374","375","376","377","378","379","380"],[],"import {useSelector, useDispatch} from 'react-redux';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport React from \"react\";\r\nimport Logo from '../../img/logo.png';\r\nimport { Auth, ALogo, TopContainer, backdropVariants, HeaderContainer, HeaderText, SmallText, InnerContainer, BackDrop} from './index';\r\nimport { BoxContainer, SubmitButton } from './common';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\n//styling for submit button\r\nexport const BackToLogin = styled.button`\r\n    width: 15%;\r\n    padding: 11px;\r\n    font-size: 15px;\r\n    font-weight: 600;\r\n    border: none;\r\n    border-radius: 15px;\r\n    cursor: pointer;\r\n    transition: all, 240ms ease-in-out;\r\n    background: #A170DE;\r\n    align-self: center;\r\n    &:not(:focus):hover {\r\n        filter: brightness(1.2); \r\n    text-shadow: 0 0 2px #999;\r\n    }\r\n`;\r\n\r\nexport const NewBackDrop = styled.div`\r\n    width: 120%;\r\n    height: 550px;\r\n    position: absolute;\r\n    display: flex;\r\n    flex-direction: column;\r\n    top: -330px;\r\n    left: -150px;\r\n    border-radius: 0%;\r\n    background: rgba(104,59,159,1);\r\n    background: linear-gradient(270deg, rgba(205,190,224,1) 6%, \r\n    rgba(161,112,222,1) 29%, rgba(104,59,159,1) 69%, \r\n    rgba(93,48,149,1) 75%, rgba(57,31,89,1) 96%);\r\n\r\n`;\r\n\r\nexport function EmailSent(props) {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const onClick = (e) => {\r\n        e.preventDefault()\r\n        navigate('/', {replace: true})\r\n    }\r\n\r\n    return ( <Auth>\r\n                <BoxContainer>\r\n                        <ALogo src={`${Logo}`} alt=\"Logo for Anthem which consits of 2 connected quarter notes with sound waves at the top\" />\r\n                        <NewBackDrop inital={false} variants={backdropVariants}/>\r\n                        {/* <HeaderContainer> */}\r\n                            <h1>A link was sent to your email address.</h1>\r\n                            <BackToLogin onClick={onClick}>Back to login</BackToLogin>\r\n                        {/* </HeaderContainer> */}\r\n                </BoxContainer>\r\n            </Auth>\r\n    )\r\n}\r\n\r\n","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\passwordReset\\passwordReset.jsx",["381","382","383","384","385","386","387","388","389"],[],"import React from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useEffect, useState } from 'react'\r\nimport { useNavigate, Link, Navigate } from 'react-router-dom';\r\n// import { spotifyLogout, connect } from '../../features/spotify/spotifySlice'\r\n// import { logout, resetPassword } from '../../features/auth/authSlice'\r\n// import  {toast} from 'react-toastify'\r\n// import axios from \"axios\";\r\n// import { Form, Button, InputGroup, FloatingLabel } from 'react-bootstrap';\r\nimport { BoxContainer, FormContainer, Input, SubmitButton } from '../LoginSignUp/common';\r\nimport { Marginer } from '../../components/marginer/index.jsx';\r\nimport { Auth, ALogo, backdropVariants } from '../LoginSignUp/index';\r\nimport styled from \"styled-components\";\r\nimport Logo from '../../img/logo.png';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { userResetPassword } from \"../../features/auth/authSlice\";\r\n//styling for submit button\r\nexport const ResetButton = styled.button`\r\n    width: 20%;\r\n    padding: 11px;\r\n    font-size: 15px;\r\n    font-weight: 600;\r\n    border: none;\r\n    border-radius: 15px;\r\n    cursor: pointer;\r\n    transition: all, 240ms ease-in-out;\r\n    background: #A170DE;\r\n    align-self: center;\r\n    &:not(:focus):hover {\r\n        filter: brightness(1.2); \r\n    text-shadow: 0 0 2px #999;\r\n    }\r\n`;\r\n\r\nexport const NewBackDrop = styled.div`\r\n    width: 120%;\r\n    height: 450px;\r\n    position: absolute;\r\n    display: flex;\r\n    flex-direction: column;\r\n    top: -330px;\r\n    left: -150px;\r\n    border-radius: 0%;\r\n    background: rgba(104,59,159,1);\r\n    background: linear-gradient(270deg, rgba(205,190,224,1) 6%, \r\n    rgba(161,112,222,1) 29%, rgba(104,59,159,1) 69%, \r\n    rgba(93,48,149,1) 75%, rgba(57,31,89,1) 96%);\r\n\r\n`;\r\n\r\nexport const PasswordInput = styled.input`\r\n    outline: none;\r\n    width: 20%;\r\n    height: 40px;\r\n    border:none;\r\n    border-radius: 10px;\r\n    padding: 0px 2px;\r\n    border-bottom: 1px solid transparent;\r\n    align-self: center;\r\n    transition: all 100ms ease-in-out;\r\n    font-size: 12px;\r\n\r\n    //field will be underlined pink (color can be changed, i just chose pink at random) when selected\r\n    &:focus{\r\n        outline:none;\r\n    }\r\n\r\n    &::placeholder{\r\n        color: #000000;\r\n    }\r\n\r\n    &:invalid{\r\n        border: 2px solid red;\r\n    }\r\n\r\n    &:empty{\r\n        border: none;\r\n    }\r\n`;\r\n\r\nexport function PasswordReset() {\r\n    const [name, setName] = useState('');\r\n    // const [typePassword, setTypePassword] = useState('password');\r\n    // const [typeConfirmPassword, setTypeConfirmPassword] = useState('password');\r\n    // const [confirmPassword, setConfirmPassword] = useState('');\r\n    const params = useParams();\r\n\r\n    const token = params.token;\r\n\r\n\r\n    const [message, setMessage] = useState(null);\r\n    const [passwords, setPasswords] = useState({ password: '', confirmPassword: '' });\r\n    const { isLoading, resetPassword, isError } = useSelector((state) => state.auth);\r\n    const { password1, password2 } = passwords\r\n    const [formData, setFormData] = useState({\r\n        newPassword: '',\r\n    })\r\n\r\n    const { newPassword } = formData\r\n\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n\r\n    // get the name stored in the local storage and ask that user to reset password\r\n    // useEffect(() => {\r\n    // \tconst user = localStorage.getItem('user');\r\n    // \tif (user) {\r\n    // \t\tsetName(user.name);\r\n    // \t}\r\n    // }, []);\r\n\r\n    useEffect(() => {\r\n        if (resetPassword) {\r\n            navigate('/', { replace: true })\r\n        }\r\n    }, [navigate, resetPassword]);\r\n\r\n    // const showHidePassword = (e) => {\r\n    // \te.preventDefault();\r\n    // \te.stopPropagation();\r\n    // \tsetTypePassword(typePassword === 'password' ? 'text' : 'password');\r\n    // };\r\n    // const showHideConfirmPassword = (e) => {\r\n    // \te.preventDefault();\r\n    // \te.stopPropagation();\r\n    // \tsetTypeConfirmPassword(\r\n    // \t\ttypeConfirmPassword === 'password' ? 'text' : 'password'\r\n    // \t);\r\n    // };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const userData = {\r\n            newPassword\r\n        }\r\n\r\n\r\n        if (password1 !== password2) {\r\n            setMessage('Passwords do not match. Please retry.');\r\n        } else {\r\n            setMessage(null)\r\n            console.log(password1)\r\n\r\n            dispatch(userResetPassword({token,password1}))\r\n                .then((res) => {\r\n                    console.log(res)\r\n                })\r\n        }\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        setPasswords((prevState) => ({\r\n            ...prevState, // \"Spead across previous state\"\r\n            [e.target.name]: e.target.value\r\n            \r\n        }))\r\n\r\n        setFormData((prevState) => ({\r\n            ...prevState, // \"Spead across previous state\"\r\n            [e.target.name]: e.target.value\r\n        }))\r\n    }\r\n\r\n    return (\r\n\r\n        <Auth>\r\n            <BoxContainer>\r\n                <ALogo src={`${Logo}`} alt=\"Logo for Anthem which consits of 2 connected quarter notes with sound waves at the top\" />\r\n                <NewBackDrop inital={false} variants={backdropVariants} />\r\n                <Marginer direction=\"vertical\" margin={25} />\r\n                <h1>Reset Password</h1>\r\n                <FormContainer onSubmit={handleSubmit}>\r\n                    <Marginer direction=\"vertical\" margin={25} />\r\n                    <PasswordInput type=\"password\" id='password1' name='password1' value={password1} placeholder=\"New Password\" onChange={onChange} required />\r\n                    <Marginer direction=\"vertical\" margin={25} />\r\n                    <PasswordInput type=\"password\" id='password2' name='password2' value={password2} placeholder=\"Confirm New Password\" onChange={onChange} required />\r\n                    <Marginer direction=\"vertical\" margin={25} />\r\n                    <ResetButton type=\"submit\">Submit</ResetButton>\r\n                    <Marginer direction=\"vertical\" margin={15} />\r\n                    <span style={{ display: !message ? \"none\" : \"inline-flex\", color: \"red\", alignSelf: \"flex-end\", margin: \"auto\" }}>{message}</span>\r\n                    <Marginer direction=\"vertical\" margin={25} />\r\n                </FormContainer>\r\n            </BoxContainer>\r\n        </Auth>\r\n\r\n    );\r\n};\r\n\r\n","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\features\\post\\postSlice.js",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\features\\spotify\\spotify.js",["390","391","392"],[],"import axios from 'axios'\r\nimport {BrowserRouter as Router, Routes, Route} from 'react-router-dom'\r\n\r\n// API URL\r\nconst API_URL = 'api/spotify'\r\n\r\n// Map for localStorage keys\r\nconst LOCALSTORAGE_KEYS = {\r\n    accessToken: 'spotify_access_token',\r\n    refreshToken: 'spotify_refresh_token',\r\n    expireTime: 'spotify_token_expire_time',\r\n    timestamp: 'spotify_token_timestamp',\r\n}\r\n\r\n// Map to retrieve localStorage values\r\nconst LOCALSTORAGE_VALUES = {\r\n    accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\r\n    refreshToken:  window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\r\n    expireTime:  window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\r\n    timestamp:  window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\r\n}\r\n\r\n// /**\r\n//  * HAandles logic for retrieving the Spotify access token from localStorage\r\n//  * or URL query params\r\n//  * @returns {string} A spotify access token\r\n//  */\r\n// const getAccessToken = () => {\r\n//     const queryString = window.location.search\r\n//     const urlParams = new URLSearchParams(queryString)\r\n//     const queryParams = {\r\n//         [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\r\n//         [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\r\n//         [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\r\n//     }\r\n//     const hasError = urlParams.get('error')\r\n    \r\n//     // If theres an error OR the token has expired => refresh token\r\n//     if(hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n//       refreshToken()\r\n//     }\r\n    \r\n//     // If theres a valid access token, use that\r\n//     if(LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\r\n//         return LOCALSTORAGE_VALUES.accessToken\r\n//     }\r\n    \r\n    \r\n//     // If there is a token in the URL query params, user is logging in for the first time\r\n//     if(queryParams[LOCALSTORAGE_KEYS.accessToken]) {\r\n//         // Store the query params in localStorage\r\n//         for (const property in queryParams) {\r\n//             window.localStorage.setItem(property, queryParams[property])\r\n//         }\r\n//         // Set timestamp\r\n//         window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now())\r\n\r\n//         // Return access token from query params\r\n//         return queryParams[LOCALSTORAGE_KEYS.accessToken]\r\n//     }\r\n\r\n//     return false\r\n// }\r\n\r\n// /**\r\n//  * Checks if the amount of time that has elapsed between the timestamp in localStorage\r\n//  * and now is greater than the expiration time of 3600 seconds (1 hour).\r\n//  * @returns {boolean} Whether or not the access token in localStorage has expired\r\n//  */\r\n// const hasTokenExpired = () => {\r\n//     const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES\r\n//     if (!accessToken || !timestamp) {\r\n//       return false\r\n//     }\r\n//     const millisecondsElapsed = Date.now() - Number(timestamp)\r\n//     return (millisecondsElapsed / 1000) > Number(expireTime)\r\n// }\r\n\r\n// /**\r\n//  * Use the refresh token in localStorage to hit the /refresh_token endpoint\r\n//  * in our Node app, then update values in localStorage with data from response.\r\n//  * @returns {void}\r\n//  */\r\n// const refreshToken = async () => {\r\n//     try {\r\n//       // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\r\n//       if (!LOCALSTORAGE_VALUES.refreshToken ||\r\n//         LOCALSTORAGE_VALUES.refreshToken === 'undefined' ||\r\n//         (Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000) < 1000\r\n//       ) {\r\n//         console.error('No refresh token available')       \r\n//         logout()\r\n//       }\r\n//       console.log(\"here\") //! ******\r\n\r\n\r\n//       // Use `/refresh_token` endpoint from our Node app\r\n//       const { data } = await axios.get(`${API_URL}/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`)\r\n\r\n//       // Update localStorage values\r\n//       window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token)\r\n//       window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now())\r\n  \r\n//       // Reload the page for localStorage updates to be reflected\r\n//       window.location.reload()\r\n  \r\n//     } catch (e) {\r\n//       console.error(e)\r\n//     }\r\n// }\r\n\r\n\r\n// /**\r\n//  * Get Current User's Profile\r\n//  * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile\r\n//  * @returns {Promise}\r\n//  */\r\n// export const getCurrentUserProfile = () => axios.get('/me');\r\n\r\n// /**\r\n//  * Get a List of Current User's Playlists\r\n//  * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-list-of-current-users-playlists\r\n//  * @returns {Promise}\r\n//  */\r\n// export const getCurrentUserPlaylists = (limit = 20) => {\r\n//     return axios.get(`/me/playlists?limit=${limit}`);\r\n//   };\r\n\r\n/**\r\n * Get a User's Top Artists and Tracks\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-top-artists-and-tracks\r\n * @param {string} time_range - 'short_term' (last 4 weeks) 'medium_term' (last 6 months) or 'long_term' (calculated from several years of data and including all new data as it becomes available). Defaults to 'short_term'\r\n * @returns {Promise}\r\n */\r\nexport const getTopArtists = async (time_range = 'short_term') => {\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `https://api.spotify.com/v1/me/top/artists?time_range=${time_range}`,\r\n        headers: {\r\n            'Content-type':'application/json',\r\n            'Authorization':`Bearer ${LOCALSTORAGE_VALUES.accessToken}`\r\n        }\r\n    });\r\n    console.log(response);\r\n    return response;\r\n  };\r\n\r\n  //get a user's top genre\r\n export const getTopGenre = async (time_range = 'short_term') => {\r\n     const response = await axios({\r\n         method: 'get',\r\n         url: `https://api.spotify.com/v1/me/top/genre?time_range=${time_range}`,\r\n         headers: {\r\n             'Content-type':'application/json',\r\n             'Authorization':`Bearer ${LOCALSTORAGE_VALUES.accessToken}`\r\n         }\r\n     });\r\n     console.log(response);\r\n     return response;\r\n   };\r\n\r\n\r\n   //get recommended songs/artists?\r\n   export const recommendSongs = async (token, user) => {\r\n        const response = await axios({\r\n            method: 'get',\r\n            url: `${API_URL}/user/${user._id}/recommendations`,//might be wrong\r\n            //url: `https://api.spotify.com/v1/recommendations`,//might be wrong\r\n            headers: {\r\n                'Accept': \"application/json\",\r\n                'Content-Type': \"application/json\",\r\n                'Authorization': `Bearer ${LOCALSTORAGE_VALUES.accessToken}`\r\n            }\r\n        });\r\n\t\tconsole.log(response);\r\n\t\treturn response;\r\n    };\r\n\r\n  \r\n// // @desc    Get user's top artist\r\n// // @route   GET /api/spotify/top_artist\r\n// // @access  Private\r\n// export const getTopArtist = async () => {\r\n\r\n//     try{\r\n//         const response = await axios({\r\n//             method: 'get',\r\n//             url: `https://api.spotify.com/v1/me/top/artists?limit=1`,\r\n//             headers: {\r\n//                 'Content-type':'application/json',\r\n//                 'Authorization':`Bearer ${LOCALSTORAGE_VALUES.accessToken}`\r\n//             }\r\n//         })\r\n//         // console.log(response);\r\n//         // console.log(response.items[0]);\r\n//         if(response) return response;\r\n//     } catch (error) {\r\n//         console.error(error)\r\n//     }\r\n// }\r\n\r\n// /**\r\n//  * Get a User's Top Tracks\r\n//  * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-top-artists-and-tracks\r\n//  * @param {string} time_range - 'short_term' (last 4 weeks) 'medium_term' (last 6 months) or 'long_term' (calculated from several years of data and including all new data as it becomes available). Defaults to 'short_term'\r\n//  * @returns {Promise}\r\n//  */\r\n// export const getTopTracks = (time_range = 'short_term') => {\r\n//     return axios.get(`/me/top/tracks?time_range=${time_range}`);\r\n//   };\r\n\r\n// export const logout = () => {\r\n//     // Clear all localStorage items\r\n//     for(const property in LOCALSTORAGE_KEYS) {\r\n//         window.localStorage.removeItem(LOCALSTORAGE_KEYS[property])\r\n//     }\r\n//     // Navigate to homepage\r\n//     window.location = window.location.origin\r\n// }\r\n\r\n// export const accessToken = getAccessToken()\r\n\r\n\r\n// /**\r\n//      * Axios global request headers\r\n//      */\r\n//     axios.defaults.baseURL = 'https://api.spotify.com/v1';\r\n//     axios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\r\n//     axios.defaults.headers['Content-Type'] = 'application/json';","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\features\\post\\postService.js",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\spotifyConnectModal\\SpotifyModal.jsx",["393","394","395","396"],[],"import React, { useRef, useEffect, useCallback } from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { MdClose } from 'react-icons/md';\r\nimport { logout, reset } from '../../features/auth/authSlice'\r\nimport { connect } from '../../features/spotify/spotifySlice'\r\nimport { useState } from 'react';\r\n\r\n//holds everything\r\nconst Container = styled.div`\r\n    display:flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n    gap: 2rem;\r\n    position: relative;\r\n`;\r\n\r\nconst Background = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.8);\r\n  position: absolute;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n//image for modal\r\nconst ModalImg = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 10px 0 0 10px;\r\n  background: #000;\r\n  position: relative;\r\n\r\n  /* Extra small devices*/\r\n  @media only screen and (max-width: 590px) {\r\n    display: none;\r\n  }\r\n\r\n`;\r\n\r\nconst ModalWrapper = styled.div`\r\n  margin: auto;\r\n  box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\r\n  background: #fff;\r\n  color: #000;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  position: relative;\r\n  border-radius: 10px;\r\n  object-fit: fill;\r\n\r\n  /* EXTRA extra small devices */\r\n  @media only screen and (max-width: 379px) {\r\n    width: 300px;\r\n  }\r\n  /* Extra small devices (600px and down) */\r\n  @media only screen and (min-width: 380px) and (max-width: 600px) {\r\n  width: 350px;\r\n  }\r\n\r\n  /* Small devices (portrait tablets and large phones, 600px and up) */\r\n  @media only screen and (min-width: 600px) {\r\n    width: 580px;\r\n  }\r\n\r\n  /* Medium devices (landscape tablets, 768px and up) */\r\n  @media only screen and (min-width: 768px) {\r\n    width: 650px;\r\n  }\r\n\r\n  /* Large devices (laptops/desktops, 992px and up) */\r\n  @media only screen and (min-width: 992px) {\r\n    width: 700px;\r\n  }\r\n\r\n  /* Extra large devices (large laptops and desktops, 1200px and up) */\r\n  @media only screen and (min-width: 1200px) {\r\n    width: 1000px;\r\n  \r\n  }\r\n`;\r\n\r\n\r\nconst Greeting = styled.p`\r\n\r\n  margin-bottom: 1rem;\r\n  text-align: center;\r\n\r\n  /* EXTRA extra small devices */\r\n  @media only screen and (max-width: 379px) {\r\n  font-size:15px;\r\n  width: 300px;\r\n  }\r\n  \r\n  /* Extra small devices (phones, 600px and down) */\r\n  @media only screen and (min-width: 380px) and (max-width: 600px) {\r\n  font-size:15px;\r\n  width: 350px;\r\n  }\r\n\r\n`;\r\n\r\nconst SpotifyMessage = styled.h1`\r\n\r\n  margin-bottom: 1rem;\r\n  text-align: center;\r\n  position: relative;\r\n\r\n  /* EXTRA extra small devices */\r\n  @media only screen and (max-width: 379px) {\r\n    font-size:20px;\r\n  }\r\n  \r\n  /* Extra small devices (phones, 600px and down) */\r\n  @media only screen and (min-width: 380px) and (max-width: 600px) {\r\n  font-size:20px;\r\n  }\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #141414;\r\n  object-fit: fill;\r\n  padding: 5%;\r\n\r\n  button {\r\n    width: 70%;\r\n    padding: 10px 24px;\r\n    background: #1DB954;\r\n    color: #fff;\r\n    border: none;\r\n    border-radius: 10px;\r\n    margin-bottom: 2%;\r\n  }\r\n  a {\r\n      width: 70%;\r\n      padding: 10px 24px;\r\n      text-decoration: none;\r\n      border: none;\r\n      border-radius: 10px;\r\n      margin-bottom: 2%;\r\n    }\r\n .connect-button {\r\n    width: 75%;\r\n    padding: 11px;\r\n    font-size: 15px;\r\n    color: #fff;\r\n    font-weight: 500;\r\n    border: none;\r\n    background: #1DB954;\r\n    border-radius: 15px;\r\n    cursor: pointer;\r\n    transition: all, 240ms ease-in-out;\r\n    align-self: center;\r\n    text-shadow: 0 0 2px #999;\r\n\r\n    /* Extra small devices (phones, 600px and down) */\r\n    @media only screen and (min-width: 320px) and (max-width: 379px) {\r\n    width:200px;\r\n    }\r\n  }\r\n  .connect-button:hover {\r\n    background: #1db954;\r\n    filter: brightness(1.2);\r\n  }\r\n  .logout-button {\r\n    width: 75%;\r\n    padding: 11px;\r\n    font-size: 15px;\r\n    color: white;\r\n    font-weight: 500;\r\n    border: none;\r\n    background: #CDBEE0;\r\n    border-radius: 15px;\r\n    cursor: pointer;\r\n    transition: all, 240ms ease-in-out;\r\n    background: var(--purple);\r\n    align-self: center;\r\n    text-shadow: 0 0 2px #999;\r\n\r\n    /* EXTRA extra small devices */\r\n    @media only screen and (min-width: 320px) and (max-width: 379px) {\r\n    width:200px;\r\n    }\r\n\r\n  }\r\n.logout-button:hover {\r\n    background: rgba(93, 48, 149, 1);\r\n    filter: brightness(1.2);\r\n  }\r\n`;\r\n\r\nconst CloseModalButton = styled(MdClose)`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 20px;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 0;\r\n  z-index: 10;\r\n`;\r\n\r\n\r\nexport const Modal = () => {\r\n  const [showModal, setShowModal] = useState(true);\r\n  const { user } = useSelector((store) => store.auth)\r\n  const modalRef = useRef();\r\n\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 250\r\n    },\r\n    opacity: showModal ? 1 : 0,\r\n    transform: showModal ? `translateY(0%)` : `translateY(-100%)`\r\n  });\r\n\r\n  const onLogout = () => {\r\n    setShowModal(false);\r\n\r\n    dispatch(logout())\r\n      .then(() => {\r\n        navigate(\"/\", { replace: true })\r\n      })\r\n      .then(() => {\r\n        dispatch(reset())\r\n      })\r\n  }\r\n\r\n  const onClick = (e) => {\r\n    e.preventDefault()\r\n\r\n    // window.open('http://localhost:5555/api/spotify/connect', '_self');\r\n    // window.location.href = 'http://localhost:5555/api/spotify/connect'\r\n\r\n    dispatch(connect())\r\n    // .then(() => {\r\n    //     navigate(\"/home\", { replace: true})\r\n    // })\r\n    return true\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {showModal ? (\r\n        <Container>\r\n          <Background ref={modalRef}>\r\n            <animated.div style={animation}>\r\n              <ModalWrapper showModal={showModal}>\r\n                <ModalImg src={require('./spotify_modal4.png')} alt='camera' />\r\n                <ModalContent>\r\n                  <Greeting>Hey, {user.name}</Greeting>\r\n                  <SpotifyMessage>You are not connected to Spotify!</SpotifyMessage>\r\n                  <Greeting>Please connect to use the full features of Anthem</Greeting>\r\n                  <a className=\"button connect-button\" href=\"http://anthem-cop4331.herokuapp.com/api/spotify/connect\" target=\"_self\" >Connect to Spotify</a>\r\n                  {/* <button className=\"button connect-button\" onClick={onClick} >2. Connect to Spotify</button> */}\r\n                  <button className=\"button logout-button\" onClick={onLogout}>Logout</button>\r\n                </ModalContent>\r\n              </ModalWrapper>\r\n            </animated.div>\r\n          </Background>\r\n        </Container>\r\n      ) : \"\"}\r\n    </>\r\n  );\r\n};","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\PostContainer\\PostContainer.jsx",["397","398"],[],"import React from \"react\";\r\nimport './PostContainer.css'\r\nimport Post from \"../Post/Post\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { getPosts } from \"../../features/post/postSlice\"\r\nimport { useEffect, useState } from \"react\"\r\nimport LoadingScreen from \"../loadingScreen/loading\";\r\n\r\nconst EmptyFeed = styled.h1`\r\n    \r\n    align-self: center;\r\n    font-size: 20px;\r\n    color: #391F59;\r\n`\r\nconst AddOn = styled.h3`\r\n    align-self: center;\r\n    font-size: 15px;\r\n    color: #391F59;\r\n    bottom: 45px;\r\n    position: relative;\r\n`\r\nconst Posts = () => {\r\n    const user = useSelector((state) => state.auth.user)\r\n    const dispatch = useDispatch()\r\n    var [displayPosts, setDisplayPosts] = useState()\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    async function fetchData() {\r\n        if (user.following == null)\r\n        {\r\n            setDisplayPosts(null);\r\n        }\r\n        else{\r\n            if (user.following.length >= 0) {\r\n                await dispatch(getPosts(user))\r\n                    .then(response => {\r\n                        setDisplayPosts(response.payload)\r\n                        setIsLoading(false)\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        fetchData();\r\n\r\n    }, [displayPosts]); //! Important\r\n\r\n    if (!isLoading) {\r\n        if (displayPosts.length == 0 || displayPosts == null) {\r\n            return (\r\n                <><EmptyFeed> No posts to display...</EmptyFeed><AddOn>Try posting something!</AddOn></>\r\n            )\r\n        }\r\n\r\n        else {\r\n            return (\r\n                <div className=\"Posts\">\r\n                    {displayPosts.map((post, id) => {\r\n                        return <div key={id}>\r\n                            {post.img ? <Post data={post} img={post.img} /> : <Post data={post} />}\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    else\r\n    {    //if there are no posts to display\r\n        return (\r\n            <LoadingScreen></LoadingScreen>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Posts","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\utils.js",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\styles\\StyledGrid.js",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\SongCard\\SongCard.jsx",["399","400"],[],"import React from 'react'\r\nimport './SongCard.css'\r\nimport styled from \"styled-components\";\r\nimport { Howl } from \"howler\"\r\nimport { useState } from 'react';\r\n\r\nvar audio = null;\r\n// id?\r\nconst SongCard = ({ name, artist1, image, url }) => {\r\n\r\n    const soundPlay = () => {\r\n\r\n        //check if its already playing, if it is then stop\r\n        if (audio != null) {\r\n           \r\n            audio.stop();\r\n            audio.unload();\r\n            audio = null;\r\n        }\r\n\r\n        //if not play the song\r\n        else{\r\n            audio = new Howl({\r\n                src: [url],\r\n                html5: true\r\n            })\r\n            audio.play();\r\n            audio.fade(2.0,0);\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"SongCard\">\r\n            <div className=\"song\">\r\n                <div onClick={soundPlay}>\r\n                    <img src={image} alt=\"\" className='songImg' />\r\n                    <div className=\"songnameInfo\">\r\n                        <span>{name}</span>\r\n                        <span>{artist1}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongCard","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\imageModal\\ImageModal.jsx",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\spotifyModal\\SpotifyPopUp.jsx",["401","402","403","404","405"],[],"import { Modal, useMantineTheme } from '@mantine/core'\r\nimport { useState } from 'react';\r\nimport { useDispatch } from 'react-redux'\r\nimport React from 'react'\r\nimport styled from \"styled-components\";\r\nimport { searchTracks } from \"../../features/spotify/spotifySlice\"\r\nimport SongCard from \"../SongCard/SongCard.jsx\"\r\n\r\n\r\nconst ResultsContainer = styled.div`\r\n    /* margin-top: ; */\r\n    background: white;\r\n    /* height: 20%; */\r\n    width: 100%;\r\n    z-index:1;\r\n    align-self: center;\r\n    border-radius:10px;\r\n    position:relative;\r\n    display: none;\r\nbottom: 10px;\r\n    filter: drop-shadow(0 0 0.3rem black);\r\n`\r\n\r\nconst List = styled.ul`\r\n  list-style: none;\r\n\r\n`\r\nconst SelectButton = styled.button`\r\n    width: 6rem;\r\n    height: 2rem;\r\n    align-self: flex-end;\r\n    padding: 11px;\r\n    font-size: 15px;\r\n    font-weight: 500;\r\n    border: none;\r\n    color: white;\r\n    background: #CDBEE0;\r\n    border-radius: 15px;\r\n    cursor: pointer;\r\n    transition: all, 240ms ease-in-out;\r\n    background: var(--purple);\r\n    text-shadow: 0 0 2px #999;\r\n    font-family: 'Ubuntu', sans-serif;\r\n    position: relative;\r\n    bottom:60px;\r\n\r\n`\r\nconst Results = styled.li`\r\n    text-decoration: none;\r\n`\r\nconst Songs = styled.a`\r\ntext-decoration: none;\r\ncursor: pointer;\r\n\r\n&:hover {\r\n        color:rgba(104,59,159,1);\r\n    }\r\n\r\n`\r\nlet songs;\r\nlet selected;\r\nfunction SpotifyPopUp({ modalOpened, setModalOpened, getInfo }) {\r\n    const theme = useMantineTheme();\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const [songList, setSongList] = useState([])\r\n    const [searchTerm, setSearchTerm] = useState(\"\")\r\n\r\n    const [clicked, setClicked] = useState(null)\r\n\r\n\r\n    const [tempAnthemId, setTempAnthemId] = useState(\"\")\r\n    const [tempAnthemName, setTempAnthemName] = useState(\"\")\r\n    const [tempAnthemImage, setTempAnthemImage] = useState(\"\")\r\n    const [tempAnthemArtist1, setTempAnthemArtist1] = useState(\"\")\r\n    const [tempAnthemUrl, setTempAnthemUrl] = useState(\"\")\r\n\r\n\r\n\r\n    let searching = false;\r\n\r\n\r\n\r\n    const handleChange = async (e) => {\r\n        e.preventDefault();\r\n        setSearchTerm(e.target.value)\r\n\r\n        if (e.target.value.length != 0) {\r\n            dispatch(searchTracks(e.target.value))\r\n                .then((response) => {\r\n                    setSongList(response.payload.data.tracks.items)\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    const handleClick = (e, song) => {\r\n        console.log(\"clicked \" + song.name)\r\n        setClicked(true);\r\n        setTempAnthemName(song.name)\r\n        setTempAnthemArtist1(song.artists[0].name)\r\n        setTempAnthemImage(song.album.images[0].url)\r\n        setTempAnthemId(song.id)\r\n        setTempAnthemUrl(song.preview_url)\r\n        setSearchTerm('');\r\n        document.getElementById(\"searchBar\").value = song.name\r\n\r\n        songs = {\r\n            name: song.name,\r\n            artist: song.artists[0].name,\r\n            image: song.album.images[0].url,\r\n            url: song.preview_url\r\n        }\r\n\r\n        console.log(songs)\r\n\r\n    }\r\n\r\n    if (searchTerm.length > 0) {\r\n        searching = true;\r\n    } else {\r\n        searching = false;\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        // console.log({songs})\r\n        // getInfo(songs)\r\n        // setModalOpened(false)\r\n    }\r\n\r\n    const handleCallBack = () => {\r\n\r\n        console.log(tempAnthemUrl)\r\n        //if user selected a new song\r\n        if (songs) {\r\n            getInfo(songs)\r\n        }\r\n\r\n       \r\n        else {\r\n            songs = {\r\n                name: tempAnthemName,\r\n                artist: tempAnthemArtist1,\r\n                image: tempAnthemImage,\r\n                url: tempAnthemUrl\r\n            }\r\n\r\n            getInfo(songs)\r\n        }\r\n\r\n        setModalOpened(false)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Modal\r\n            overlayColor={theme.colorScheme === 'dark' ? theme.colors.dark[9] : theme.colors.gray[2]}\r\n            overlayOpacity={0.55}\r\n            overlayBlur={3}\r\n            size='55%'\r\n            opened={modalOpened}\r\n            onClose={() => { setModalOpened(false); searching = false; }}>\r\n\r\n            <form className='infoForm' onSubmit={handleSubmit}>\r\n                <h3>Search for a song</h3>\r\n                {/*display song user clicked on*/}\r\n                {clicked ? <div className=\"currentAnthem\">\r\n                    <SongCard name={tempAnthemName} artist1={tempAnthemArtist1}\r\n                        image={tempAnthemImage} ></SongCard>\r\n                </div> : <></>}\r\n\r\n                {/* SHOW RESULTS LIST WHEN SEARCHING */}\r\n                {searching ? (<div className=\"searchContainer\">\r\n                    <input id=\"searchBar\" type=\"text\" className=\"infoInput\" name=\"Anthem\" placeholder=\"Search for a song...\" onChange={handleChange} />\r\n                    <ResultsContainer style={{ display: searching ? \"inline\" : \"none\" }}>\r\n                        {songList.map((song, index) => {\r\n                            return (\r\n                                <div key={index}>\r\n                                    <List>\r\n                                        <Results onClick={(e) => handleClick(e, song)}>\r\n                                            <SongCard\r\n                                                name={song.name}\r\n                                                artist1={song.artists[0].name}\r\n                                                image={song.album.images[0].url}\r\n                                                url={song.url}\r\n                                            />\r\n                                        </Results>\r\n                                    </List>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </ResultsContainer>\r\n                </div>) : (<div className=\"ResultsContainer\">\r\n                    {searchTerm != '' ? (<input type=\"text\" className=\"infoInput\" name=\"Anthem\" placeholder=\"Search for a Song\" onChange={handleChange} />) :\r\n                        (<input type=\"text\" className=\"infoInput\" name=\"Anthem\" placeholder={tempAnthemName} onChange={handleChange} />)}\r\n\r\n                </div>)}\r\n\r\n                <SelectButton className='button' onClick={handleCallBack}>Select</SelectButton>\r\n            </form>\r\n\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default SpotifyPopUp","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\pages\\LoginSignUp\\passReset.jsx",["406","407","408","409","410","411","412","413","414"],[],"import { useSelector, useDispatch } from 'react-redux';\r\nimport { Form, useNavigate } from 'react-router-dom';\r\nimport React from \"react\";\r\nimport Logo from '../../img/logo.png';\r\nimport { Auth, ALogo, TopContainer, backdropVariants, HeaderContainer, HeaderText, SmallText, InnerContainer, BackDrop } from './index';\r\nimport { BoxContainer } from './common';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport styled from \"styled-components\";\r\nimport { useState } from 'react';\r\nimport { Marginer } from '../../components/marginer';\r\nimport { resetPass } from '../../features/auth/authSlice';\r\n\r\nexport const SidebSide = styled.div`\r\n    display:inline-flex;\r\n    flex-direction: row;\r\n    gap: .5em;\r\n    width:500px;\r\n\r\n`;\r\n\r\nexport const FormContainer = styled.form`\r\n    width:100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-content: center;\r\n    justify-content: center;\r\n   left: 700px;\r\n    position: relative;\r\n    \r\n`;\r\n\r\n//styling for submit button\r\nexport const BackToLogin = styled.button`\r\n    width: 15%;\r\n    padding: 11px;\r\n    font-size: 15px;\r\n    font-weight: 600;\r\n    border: none;\r\n    border-radius: 15px;\r\n    cursor: pointer;\r\n    transition: all, 240ms ease-in-out;\r\n    background: #A170DE;\r\n    align-self: center;\r\n    &:not(:focus):hover {\r\n        filter: brightness(1.2); \r\n    text-shadow: 0 0 2px #999;\r\n    }\r\n`;\r\n\r\nexport const NewBackDrop = styled.div`\r\n    width: 120%;\r\n    height: 550px;\r\n    position: absolute;\r\n    display: flex;\r\n    flex-direction: column;\r\n    top: -330px;\r\n    left: -150px;\r\n    border-radius: 0%;\r\n    background: rgba(104,59,159,1);\r\n    background: linear-gradient(270deg, rgba(205,190,224,1) 6%, \r\n    rgba(161,112,222,1) 29%, rgba(104,59,159,1) 69%, \r\n    rgba(93,48,149,1) 75%, rgba(57,31,89,1) 96%);\r\n\r\n`;\r\n\r\nconst Input = styled.input`\r\n    outline: none;\r\n    width: 100%;\r\n    height: 40px;\r\n    border:none;\r\n    border-radius: 10px;\r\n    padding: 0px 2px;\r\n    border-bottom: 1px solid transparent;\r\n    align-self: center;\r\n    transition: all 100ms ease-in-out;\r\n    font-size: 12px;\r\n\r\n    //field will be underlined pink (color can be changed, i just chose pink at random) when selected\r\n    &:focus{\r\n        outline:none;\r\n    }\r\n\r\n    &::placeholder{\r\n        color: #000000;\r\n    }\r\n\r\n    &:invalid{\r\n        border: 2px solid red;\r\n    }\r\n\r\n    &:empty{\r\n        border: none;\r\n    }\r\n`;\r\n\r\n\r\nconst SubmitButton = styled.button`\r\n    width: 30%;\r\n    padding: 11px;\r\n    font-size: 15px;\r\n    font-weight: 600;\r\n    border: none;\r\n    border-radius: 15px;\r\n    cursor: pointer;\r\n    transition: all, 240ms ease-in-out;\r\n    background: #A170DE;\r\n    align-self: center;\r\n    &:not(:focus):hover {\r\n        filter: brightness(1.2); \r\n    text-shadow: 0 0 2px #999;\r\n    }\r\n`;\r\n\r\nexport function ResetReq(props) {\r\n\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch();\r\n    const [message, setMessage] = useState(null);\r\n\r\n\r\n    const [formData, setFormData] = useState({\r\n        email: '',\r\n    })\r\n\r\n    const {\r\n        email\r\n    } = formData\r\n\r\n    const onClick = (e) => {\r\n        e.preventDefault()\r\n        navigate('/', { replace: true })\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        setFormData((prevState) => ({\r\n            ...prevState, // \"Spead across previous state\"\r\n            [e.target.name]: e.target.value\r\n        }));\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const userData = {\r\n            email,\r\n        };\r\n\r\n        dispatch(resetPass(userData.email)).then((response) => {\r\n            console.log(response.payload.message)\r\n\r\n\r\n            if (response.payload.message == `Sent a password reset email to ${userData.email}`) {\r\n                navigate('/verification_sent', { replace: true })\r\n            }\r\n\r\n            else {\r\n                setMessage(response.payload.message)\r\n            }\r\n\r\n        })\r\n        setTimeout(() => setMessage(false), 3000)\r\n\r\n    };\r\n\r\n    return (<Auth>\r\n        <BoxContainer>\r\n\r\n            <ALogo src={`${Logo}`} alt=\"Logo for Anthem which consits of 2 connected quarter notes with sound waves at the top\" />\r\n            <NewBackDrop inital={false} variants={backdropVariants} />\r\n            <h1>Please enter your email address.</h1>\r\n            <FormContainer onSubmit={handleSubmit}>\r\n                <SidebSide>\r\n                    <Marginer direction=\"vertical\" margin={25} />\r\n                    <Input name=\"email\" type=\"email\" placeholder=\"Email\" onChange={onChange} required pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\" />\r\n                    <Marginer direction=\"vertical\" margin={25} />\r\n                    <SubmitButton type=\"submit\">Submit</SubmitButton>\r\n                </SidebSide>\r\n                <span style={{ display: !message ? \"none\" : \"inline-flex\", color: \"red\", alignSelf: \"flex-end\", margin: \"auto\" }}>{message}</span>\r\n            </FormContainer>\r\n            <Marginer direction=\"vertical\" margin={25} />\r\n            <BackToLogin onClick={onClick}>Back to login</BackToLogin>\r\n\r\n        </BoxContainer>\r\n    </Auth>\r\n    )\r\n}\r\n\r\n","C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\loadingScreen\\loading.jsx",[],[],"C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\src\\components\\deleteModal\\DeleteModal.jsx",["415","416","417"],[],"import { Modal, useMantineTheme } from '@mantine/core'\r\nimport { useParams } from 'react-router-dom';\r\nimport './DeleteModal.css'\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { deletePost } from '../../features/post/postSlice'\r\n\r\nfunction DeleteModal({modalOpened, setModalOpened, post}) {\r\n    const theme = useMantineTheme();\r\n    const [activeUser, setActiveUser] = useState({})\r\n    const params = useParams();\r\n    const dispatch = useDispatch();\r\n    const { user } = useSelector((state) => state.auth);\r\n\r\n    const fetchProfileUser = async () => {\r\n        setActiveUser(user);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchProfileUser()\r\n    },[user]);\r\n\r\n    const deleteThisPost = async () => {\r\n        const postId = post.id\r\n\r\n        await dispatch(deletePost(postId))\r\n        .then((response) => {\r\n            console.log(response.error)\r\n        })\r\n        .then(() => {\r\n            setModalOpened(false)\r\n            // navigate(`/home`, {replace: true})\r\n            window.location.reload(); //! not clean\r\n        })\r\n\r\n    }\r\n\r\n    return(\r\n        <Modal\r\n        overlayColor={theme.colorScheme === 'dark' ? theme.colors.dark[9] : theme.colors.gray[2]}\r\n        overlayOpacity={0.55}\r\n        overlayBlur={3}\r\n        size='35%'\r\n        opened={modalOpened}\r\n        onClose={() => { setModalOpened(false);}}\r\n        >\r\n        <div className=\"DeleteModal\">\r\n            <div className='content'>\r\n                <h3>Delete this post?</h3>\r\n                <div className=\"buttons\">\r\n                    <button onClick={deleteThisPost}>Confirm</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default DeleteModal",{"ruleId":"418","severity":1,"message":"419","line":6,"column":10,"nodeType":"420","messageId":"421","endLine":6,"endColumn":18},{"ruleId":"422","severity":1,"message":"423","line":26,"column":6,"nodeType":"424","endLine":26,"endColumn":25,"suggestions":"425"},{"ruleId":"418","severity":1,"message":"426","line":4,"column":23,"nodeType":"420","messageId":"421","endLine":4,"endColumn":27},{"ruleId":"418","severity":1,"message":"427","line":9,"column":8,"nodeType":"420","messageId":"421","endLine":9,"endColumn":13},{"ruleId":"428","severity":1,"message":"429","line":81,"column":13,"nodeType":"430","endLine":81,"endColumn":58},{"ruleId":"418","severity":1,"message":"431","line":7,"column":10,"nodeType":"420","messageId":"421","endLine":7,"endColumn":15},{"ruleId":"432","severity":1,"message":"433","line":59,"column":41,"nodeType":"434","messageId":"435","endLine":59,"endColumn":43},{"ruleId":"418","severity":1,"message":"436","line":5,"column":20,"nodeType":"420","messageId":"421","endLine":5,"endColumn":25},{"ruleId":"418","severity":1,"message":"431","line":6,"column":10,"nodeType":"420","messageId":"421","endLine":6,"endColumn":15},{"ruleId":"418","severity":1,"message":"437","line":39,"column":12,"nodeType":"420","messageId":"421","endLine":39,"endColumn":21},{"ruleId":"418","severity":1,"message":"438","line":45,"column":9,"nodeType":"420","messageId":"421","endLine":45,"endColumn":21},{"ruleId":"418","severity":1,"message":"439","line":48,"column":9,"nodeType":"420","messageId":"421","endLine":48,"endColumn":20},{"ruleId":"432","severity":1,"message":"433","line":118,"column":45,"nodeType":"434","messageId":"435","endLine":118,"endColumn":47},{"ruleId":"418","severity":1,"message":"440","line":5,"column":8,"nodeType":"420","messageId":"421","endLine":5,"endColumn":17},{"ruleId":"418","severity":1,"message":"441","line":8,"column":10,"nodeType":"420","messageId":"421","endLine":8,"endColumn":20},{"ruleId":"418","severity":1,"message":"442","line":9,"column":10,"nodeType":"420","messageId":"421","endLine":9,"endColumn":17},{"ruleId":"418","severity":1,"message":"443","line":10,"column":10,"nodeType":"420","messageId":"421","endLine":10,"endColumn":17},{"ruleId":"418","severity":1,"message":"444","line":11,"column":10,"nodeType":"420","messageId":"421","endLine":11,"endColumn":20},{"ruleId":"418","severity":1,"message":"445","line":12,"column":8,"nodeType":"420","messageId":"421","endLine":12,"endColumn":18},{"ruleId":"418","severity":1,"message":"446","line":15,"column":22,"nodeType":"420","messageId":"421","endLine":15,"endColumn":33},{"ruleId":"418","severity":1,"message":"447","line":15,"column":35,"nodeType":"420","messageId":"421","endLine":15,"endColumn":46},{"ruleId":"418","severity":1,"message":"448","line":1,"column":28,"nodeType":"420","messageId":"421","endLine":1,"endColumn":36},{"ruleId":"418","severity":1,"message":"440","line":5,"column":8,"nodeType":"420","messageId":"421","endLine":5,"endColumn":17},{"ruleId":"418","severity":1,"message":"441","line":7,"column":10,"nodeType":"420","messageId":"421","endLine":7,"endColumn":20},{"ruleId":"418","severity":1,"message":"442","line":8,"column":10,"nodeType":"420","messageId":"421","endLine":8,"endColumn":17},{"ruleId":"418","severity":1,"message":"443","line":9,"column":10,"nodeType":"420","messageId":"421","endLine":9,"endColumn":17},{"ruleId":"418","severity":1,"message":"444","line":10,"column":10,"nodeType":"420","messageId":"421","endLine":10,"endColumn":20},{"ruleId":"418","severity":1,"message":"445","line":11,"column":8,"nodeType":"420","messageId":"421","endLine":11,"endColumn":18},{"ruleId":"418","severity":1,"message":"449","line":14,"column":8,"nodeType":"420","messageId":"421","endLine":14,"endColumn":14},{"ruleId":"418","severity":1,"message":"450","line":24,"column":11,"nodeType":"420","messageId":"421","endLine":24,"endColumn":19},{"ruleId":"422","severity":1,"message":"451","line":38,"column":8,"nodeType":"424","endLine":38,"endColumn":10,"suggestions":"452"},{"ruleId":"418","severity":1,"message":"453","line":40,"column":11,"nodeType":"420","messageId":"421","endLine":40,"endColumn":26},{"ruleId":"418","severity":1,"message":"454","line":3,"column":10,"nodeType":"420","messageId":"421","endLine":3,"endColumn":17},{"ruleId":"418","severity":1,"message":"427","line":3,"column":8,"nodeType":"420","messageId":"421","endLine":3,"endColumn":13},{"ruleId":"418","severity":1,"message":"455","line":4,"column":10,"nodeType":"420","messageId":"421","endLine":4,"endColumn":24},{"ruleId":"418","severity":1,"message":"456","line":5,"column":7,"nodeType":"420","messageId":"421","endLine":5,"endColumn":14},{"ruleId":"418","severity":1,"message":"457","line":6,"column":5,"nodeType":"420","messageId":"421","endLine":6,"endColumn":13},{"ruleId":"418","severity":1,"message":"458","line":126,"column":7,"nodeType":"420","messageId":"421","endLine":126,"endColumn":22},{"ruleId":"418","severity":1,"message":"459","line":134,"column":7,"nodeType":"420","messageId":"421","endLine":134,"endColumn":15},{"ruleId":"432","severity":1,"message":"433","line":333,"column":21,"nodeType":"434","messageId":"435","endLine":333,"endColumn":23},{"ruleId":"418","severity":1,"message":"460","line":389,"column":15,"nodeType":"420","messageId":"421","endLine":389,"endColumn":20},{"ruleId":"422","severity":1,"message":"461","line":37,"column":7,"nodeType":"424","endLine":37,"endColumn":13,"suggestions":"462"},{"ruleId":"418","severity":1,"message":"463","line":7,"column":8,"nodeType":"420","messageId":"421","endLine":7,"endColumn":18},{"ruleId":"418","severity":1,"message":"464","line":8,"column":8,"nodeType":"420","messageId":"421","endLine":8,"endColumn":18},{"ruleId":"418","severity":1,"message":"465","line":13,"column":12,"nodeType":"420","messageId":"421","endLine":13,"endColumn":23},{"ruleId":"418","severity":1,"message":"466","line":61,"column":19,"nodeType":"420","messageId":"421","endLine":61,"endColumn":27},{"ruleId":"432","severity":1,"message":"433","line":172,"column":50,"nodeType":"434","messageId":"435","endLine":172,"endColumn":52},{"ruleId":"422","severity":1,"message":"461","line":181,"column":8,"nodeType":"424","endLine":181,"endColumn":22,"suggestions":"467"},{"ruleId":"432","severity":1,"message":"433","line":206,"column":27,"nodeType":"434","messageId":"435","endLine":206,"endColumn":29},{"ruleId":"468","severity":1,"message":"469","line":206,"column":180,"nodeType":"430","endLine":206,"endColumn":248},{"ruleId":"432","severity":1,"message":"433","line":207,"column":27,"nodeType":"434","messageId":"435","endLine":207,"endColumn":29},{"ruleId":"418","severity":1,"message":"445","line":5,"column":8,"nodeType":"420","messageId":"421","endLine":5,"endColumn":18},{"ruleId":"418","severity":1,"message":"426","line":6,"column":10,"nodeType":"420","messageId":"421","endLine":6,"endColumn":14},{"ruleId":"418","severity":1,"message":"441","line":7,"column":10,"nodeType":"420","messageId":"421","endLine":7,"endColumn":20},{"ruleId":"418","severity":1,"message":"442","line":8,"column":10,"nodeType":"420","messageId":"421","endLine":8,"endColumn":17},{"ruleId":"418","severity":1,"message":"443","line":9,"column":10,"nodeType":"420","messageId":"421","endLine":9,"endColumn":17},{"ruleId":"418","severity":1,"message":"444","line":10,"column":10,"nodeType":"420","messageId":"421","endLine":10,"endColumn":20},{"ruleId":"418","severity":1,"message":"470","line":5,"column":25,"nodeType":"420","messageId":"421","endLine":5,"endColumn":30},{"ruleId":"418","severity":1,"message":"471","line":15,"column":7,"nodeType":"420","messageId":"421","endLine":15,"endColumn":16},{"ruleId":"472","severity":1,"message":"473","line":76,"column":21,"nodeType":"420","messageId":"474","endLine":76,"endColumn":30},{"ruleId":"422","severity":1,"message":"461","line":88,"column":8,"nodeType":"424","endLine":88,"endColumn":47,"suggestions":"475"},{"ruleId":"418","severity":1,"message":"476","line":4,"column":10,"nodeType":"420","messageId":"421","endLine":4,"endColumn":24},{"ruleId":"418","severity":1,"message":"477","line":13,"column":13,"nodeType":"420","messageId":"421","endLine":13,"endColumn":24},{"ruleId":"418","severity":1,"message":"478","line":16,"column":11,"nodeType":"420","messageId":"421","endLine":16,"endColumn":19},{"ruleId":"418","severity":1,"message":"479","line":17,"column":18,"nodeType":"420","messageId":"421","endLine":17,"endColumn":25},{"ruleId":"418","severity":1,"message":"480","line":18,"column":28,"nodeType":"420","messageId":"421","endLine":18,"endColumn":45},{"ruleId":"418","severity":1,"message":"481","line":19,"column":9,"nodeType":"420","messageId":"421","endLine":19,"endColumn":15},{"ruleId":"418","severity":1,"message":"482","line":22,"column":9,"nodeType":"420","messageId":"421","endLine":22,"endColumn":15},{"ruleId":"418","severity":1,"message":"483","line":10,"column":10,"nodeType":"420","messageId":"421","endLine":10,"endColumn":22},{"ruleId":"418","severity":1,"message":"449","line":11,"column":8,"nodeType":"420","messageId":"421","endLine":11,"endColumn":14},{"ruleId":"418","severity":1,"message":"484","line":27,"column":12,"nodeType":"420","messageId":"421","endLine":27,"endColumn":20},{"ruleId":"422","severity":1,"message":"485","line":59,"column":8,"nodeType":"424","endLine":59,"endColumn":22,"suggestions":"486"},{"ruleId":"418","severity":1,"message":"487","line":1,"column":8,"nodeType":"420","messageId":"421","endLine":1,"endColumn":16},{"ruleId":"418","severity":1,"message":"488","line":2,"column":8,"nodeType":"420","messageId":"421","endLine":2,"endColumn":16},{"ruleId":"418","severity":1,"message":"489","line":4,"column":23,"nodeType":"420","messageId":"421","endLine":4,"endColumn":32},{"ruleId":"418","severity":1,"message":"490","line":7,"column":8,"nodeType":"420","messageId":"421","endLine":7,"endColumn":12},{"ruleId":"418","severity":1,"message":"491","line":8,"column":10,"nodeType":"420","messageId":"421","endLine":8,"endColumn":19},{"ruleId":"418","severity":1,"message":"470","line":13,"column":10,"nodeType":"420","messageId":"421","endLine":13,"endColumn":15},{"ruleId":"418","severity":1,"message":"492","line":38,"column":7,"nodeType":"420","messageId":"421","endLine":38,"endColumn":12},{"ruleId":"418","severity":1,"message":"493","line":57,"column":12,"nodeType":"420","messageId":"421","endLine":57,"endColumn":22},{"ruleId":"422","severity":1,"message":"494","line":83,"column":25,"nodeType":"495","endLine":83,"endColumn":30},{"ruleId":"432","severity":1,"message":"496","line":111,"column":35,"nodeType":"434","messageId":"435","endLine":111,"endColumn":37},{"ruleId":"432","severity":1,"message":"433","line":141,"column":72,"nodeType":"434","messageId":"435","endLine":141,"endColumn":74},{"ruleId":"432","severity":1,"message":"496","line":154,"column":77,"nodeType":"434","messageId":"435","endLine":154,"endColumn":79},{"ruleId":"432","severity":1,"message":"496","line":169,"column":77,"nodeType":"434","messageId":"435","endLine":169,"endColumn":79},{"ruleId":"432","severity":1,"message":"496","line":182,"column":53,"nodeType":"434","messageId":"435","endLine":182,"endColumn":55},{"ruleId":"432","severity":1,"message":"433","line":195,"column":33,"nodeType":"434","messageId":"435","endLine":195,"endColumn":35},{"ruleId":"432","severity":1,"message":"496","line":208,"column":77,"nodeType":"434","messageId":"435","endLine":208,"endColumn":79},{"ruleId":"432","severity":1,"message":"433","line":221,"column":57,"nodeType":"434","messageId":"435","endLine":221,"endColumn":59},{"ruleId":"432","severity":1,"message":"433","line":235,"column":53,"nodeType":"434","messageId":"435","endLine":235,"endColumn":55},{"ruleId":"432","severity":1,"message":"496","line":310,"column":37,"nodeType":"434","messageId":"435","endLine":310,"endColumn":39},{"ruleId":"418","severity":1,"message":"497","line":3,"column":8,"nodeType":"420","messageId":"421","endLine":3,"endColumn":15},{"ruleId":"418","severity":1,"message":"498","line":4,"column":8,"nodeType":"420","messageId":"421","endLine":4,"endColumn":13},{"ruleId":"418","severity":1,"message":"499","line":26,"column":12,"nodeType":"420","messageId":"421","endLine":26,"endColumn":22},{"ruleId":"418","severity":1,"message":"500","line":28,"column":11,"nodeType":"420","messageId":"421","endLine":28,"endColumn":26},{"ruleId":"418","severity":1,"message":"501","line":29,"column":9,"nodeType":"420","messageId":"421","endLine":29,"endColumn":20},{"ruleId":"422","severity":1,"message":"461","line":38,"column":7,"nodeType":"424","endLine":38,"endColumn":13,"suggestions":"502"},{"ruleId":"422","severity":1,"message":"503","line":88,"column":8,"nodeType":"424","endLine":88,"endColumn":10,"suggestions":"504"},{"ruleId":"418","severity":1,"message":"505","line":95,"column":19,"nodeType":"420","messageId":"421","endLine":95,"endColumn":25},{"ruleId":"468","severity":1,"message":"469","line":145,"column":24,"nodeType":"430","endLine":145,"endColumn":89},{"ruleId":"418","severity":1,"message":"447","line":1,"column":9,"nodeType":"420","messageId":"421","endLine":1,"endColumn":20},{"ruleId":"418","severity":1,"message":"506","line":1,"column":22,"nodeType":"420","messageId":"421","endLine":1,"endColumn":33},{"ruleId":"418","severity":1,"message":"507","line":5,"column":23,"nodeType":"420","messageId":"421","endLine":5,"endColumn":35},{"ruleId":"418","severity":1,"message":"508","line":5,"column":55,"nodeType":"420","messageId":"421","endLine":5,"endColumn":70},{"ruleId":"418","severity":1,"message":"509","line":5,"column":72,"nodeType":"420","messageId":"421","endLine":5,"endColumn":82},{"ruleId":"418","severity":1,"message":"510","line":5,"column":84,"nodeType":"420","messageId":"421","endLine":5,"endColumn":93},{"ruleId":"418","severity":1,"message":"511","line":5,"column":95,"nodeType":"420","messageId":"421","endLine":5,"endColumn":109},{"ruleId":"418","severity":1,"message":"512","line":5,"column":111,"nodeType":"420","messageId":"421","endLine":5,"endColumn":119},{"ruleId":"418","severity":1,"message":"513","line":6,"column":24,"nodeType":"420","messageId":"421","endLine":6,"endColumn":36},{"ruleId":"418","severity":1,"message":"426","line":4,"column":23,"nodeType":"420","messageId":"421","endLine":4,"endColumn":27},{"ruleId":"418","severity":1,"message":"514","line":4,"column":29,"nodeType":"420","messageId":"421","endLine":4,"endColumn":37},{"ruleId":"418","severity":1,"message":"515","line":10,"column":39,"nodeType":"420","messageId":"421","endLine":10,"endColumn":44},{"ruleId":"418","severity":1,"message":"513","line":10,"column":46,"nodeType":"420","messageId":"421","endLine":10,"endColumn":58},{"ruleId":"418","severity":1,"message":"516","line":82,"column":12,"nodeType":"420","messageId":"421","endLine":82,"endColumn":16},{"ruleId":"418","severity":1,"message":"517","line":82,"column":18,"nodeType":"420","messageId":"421","endLine":82,"endColumn":25},{"ruleId":"418","severity":1,"message":"518","line":93,"column":13,"nodeType":"420","messageId":"421","endLine":93,"endColumn":22},{"ruleId":"418","severity":1,"message":"519","line":93,"column":39,"nodeType":"420","messageId":"421","endLine":93,"endColumn":46},{"ruleId":"418","severity":1,"message":"520","line":134,"column":15,"nodeType":"420","messageId":"421","endLine":134,"endColumn":23},{"ruleId":"418","severity":1,"message":"521","line":2,"column":26,"nodeType":"420","messageId":"421","endLine":2,"endColumn":32},{"ruleId":"418","severity":1,"message":"522","line":2,"column":34,"nodeType":"420","messageId":"421","endLine":2,"endColumn":40},{"ruleId":"418","severity":1,"message":"523","line":2,"column":42,"nodeType":"420","messageId":"421","endLine":2,"endColumn":47},{"ruleId":"418","severity":1,"message":"524","line":1,"column":25,"nodeType":"420","messageId":"421","endLine":1,"endColumn":34},{"ruleId":"418","severity":1,"message":"525","line":1,"column":36,"nodeType":"420","messageId":"421","endLine":1,"endColumn":47},{"ruleId":"418","severity":1,"message":"526","line":201,"column":7,"nodeType":"420","messageId":"421","endLine":201,"endColumn":23},{"ruleId":"418","severity":1,"message":"527","line":240,"column":9,"nodeType":"420","messageId":"421","endLine":240,"endColumn":16},{"ruleId":"422","severity":1,"message":"528","line":49,"column":8,"nodeType":"424","endLine":49,"endColumn":22,"suggestions":"529"},{"ruleId":"432","severity":1,"message":"433","line":52,"column":33,"nodeType":"434","messageId":"435","endLine":52,"endColumn":35},{"ruleId":"418","severity":1,"message":"449","line":3,"column":8,"nodeType":"420","messageId":"421","endLine":3,"endColumn":14},{"ruleId":"418","severity":1,"message":"448","line":5,"column":10,"nodeType":"420","messageId":"421","endLine":5,"endColumn":18},{"ruleId":"418","severity":1,"message":"492","line":51,"column":7,"nodeType":"420","messageId":"421","endLine":51,"endColumn":12},{"ruleId":"418","severity":1,"message":"530","line":61,"column":5,"nodeType":"420","messageId":"421","endLine":61,"endColumn":13},{"ruleId":"418","severity":1,"message":"531","line":75,"column":12,"nodeType":"420","messageId":"421","endLine":75,"endColumn":24},{"ruleId":"432","severity":1,"message":"496","line":91,"column":35,"nodeType":"434","messageId":"435","endLine":91,"endColumn":37},{"ruleId":"432","severity":1,"message":"496","line":199,"column":33,"nodeType":"434","messageId":"435","endLine":199,"endColumn":35},{"ruleId":"418","severity":1,"message":"447","line":1,"column":10,"nodeType":"420","messageId":"421","endLine":1,"endColumn":21},{"ruleId":"418","severity":1,"message":"532","line":2,"column":10,"nodeType":"420","messageId":"421","endLine":2,"endColumn":14},{"ruleId":"418","severity":1,"message":"507","line":5,"column":23,"nodeType":"420","messageId":"421","endLine":5,"endColumn":35},{"ruleId":"418","severity":1,"message":"508","line":5,"column":55,"nodeType":"420","messageId":"421","endLine":5,"endColumn":70},{"ruleId":"418","severity":1,"message":"509","line":5,"column":72,"nodeType":"420","messageId":"421","endLine":5,"endColumn":82},{"ruleId":"418","severity":1,"message":"510","line":5,"column":84,"nodeType":"420","messageId":"421","endLine":5,"endColumn":93},{"ruleId":"418","severity":1,"message":"511","line":5,"column":95,"nodeType":"420","messageId":"421","endLine":5,"endColumn":109},{"ruleId":"418","severity":1,"message":"512","line":5,"column":111,"nodeType":"420","messageId":"421","endLine":5,"endColumn":119},{"ruleId":"432","severity":1,"message":"433","line":150,"column":42,"nodeType":"434","messageId":"435","endLine":150,"endColumn":44},{"ruleId":"418","severity":1,"message":"499","line":11,"column":12,"nodeType":"420","messageId":"421","endLine":11,"endColumn":22},{"ruleId":"418","severity":1,"message":"533","line":12,"column":11,"nodeType":"420","messageId":"421","endLine":12,"endColumn":17},{"ruleId":"422","severity":1,"message":"461","line":22,"column":7,"nodeType":"424","endLine":22,"endColumn":13,"suggestions":"534"},"no-unused-vars","'Testpage' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["535"],"'Link' is defined but never used.","'axios' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'toast' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'reset' is defined but never used.","'dontExist' is assigned a value but never used.","'confirmemail' is assigned a value but never used.","'confirmpass' is assigned a value but never used.","'RightSide' is defined but never used.","'UilSetting' is defined but never used.","'UilHome' is defined but never used.","'UilBell' is defined but never used.","'UilMessage' is defined but never used.","'LogoSearch' is defined but never used.","'useNavigate' is defined but never used.","'useSelector' is defined but never used.","'useState' is defined but never used.","'styled' is defined but never used.","'navigate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'isConnected', 'isError', and 'message'. Either include them or remove the dependency array.",["536"],"'getTokenFromUrl' is assigned a value but never used.","'current' is defined but never used.","'recommendSongs' is defined but never used.","'API_URL' is assigned a value but never used.","'IDresult' is assigned a value but never used.","'getRandomString' is assigned a value but never used.","'stateKey' is assigned a value but never used.","'token' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchProfileUser'. Either include it or remove the dependency array.",["537"],"'SwitchCard' is defined but never used.","'ShareModal' is defined but never used.","'modalOpened' is assigned a value but never used.","'setCover' is assigned a value but never used.",["538"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'getMe' is defined but never used.","'Container' is assigned a value but never used.","no-const-assign","'topArtist' is constant.","const",["539"],"'getRecommended' is defined but never used.","'isConnected' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'setList' is assigned a value but never used.","'setSpotifyLoading' is assigned a value but never used.","'loaded' is assigned a value but never used.","'tracks' is assigned a value but never used.","'searchTracks' is defined but never used.","'isPosted' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkPFP'. Either include it or remove the dependency array.",["540"],"'postPic1' is defined but never used.","'postPic2' is defined but never used.","'useParams' is defined but never used.","'Logo' is defined but never used.","'UilSearch' is defined but never used.","'Songs' is assigned a value but never used.","'coverImage' is assigned a value but never used.","Assignments to the 'searching' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","Expected '!==' and instead saw '!='.","'Comment' is defined but never used.","'Share' is defined but never used.","'activeUser' is assigned a value but never used.","'profileUsername' is assigned a value but never used.","'profileUser' is defined but never used.",["541"],"React Hook useEffect has missing dependencies: 'data.img.data', 'data.profileImage', and 'data.song'. Either include them or remove the dependency array.",["542"],"'userId' is assigned a value but never used.","'useDispatch' is defined but never used.","'TopContainer' is defined but never used.","'HeaderContainer' is defined but never used.","'HeaderText' is defined but never used.","'SmallText' is defined but never used.","'InnerContainer' is defined but never used.","'BackDrop' is defined but never used.","'SubmitButton' is defined but never used.","'Navigate' is defined but never used.","'Input' is defined but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'isError' is assigned a value but never used.","'userData' is assigned a value but never used.","'Router' is defined but never used.","'Routes' is defined but never used.","'Route' is defined but never used.","'useEffect' is defined but never used.","'useCallback' is defined but never used.","'CloseModalButton' is assigned a value but never used.","'onClick' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["543"],"'selected' is defined but never used.","'tempAnthemId' is assigned a value but never used.","'Form' is defined but never used.","'params' is assigned a value but never used.",["544"],{"desc":"545","fix":"546"},{"desc":"547","fix":"548"},{"desc":"549","fix":"550"},{"desc":"551","fix":"552"},{"desc":"553","fix":"554"},{"desc":"555","fix":"556"},{"desc":"549","fix":"557"},{"desc":"558","fix":"559"},{"desc":"560","fix":"561"},{"desc":"549","fix":"562"},"Update the dependencies array to be: [dispatch, isConnected, user]",{"range":"563","text":"564"},"Update the dependencies array to be: [dispatch, isConnected, isError, message]",{"range":"565","text":"566"},"Update the dependencies array to be: [fetchProfileUser, user]",{"range":"567","text":"568"},"Update the dependencies array to be: [fetchProfileUser, profileImage]",{"range":"569","text":"570"},"Update the dependencies array to be: [isConnected, activeUser, anthem, user, fetchProfileUser]",{"range":"571","text":"572"},"Update the dependencies array to be: [checkPFP, profileImage]",{"range":"573","text":"574"},{"range":"575","text":"568"},"Update the dependencies array to be: [data.img.data, data.profileImage, data.song]",{"range":"576","text":"577"},"Update the dependencies array to be: [displayPosts, fetchData]",{"range":"578","text":"579"},{"range":"580","text":"568"},[1104,1123],"[dispatch, isConnected, user]",[1531,1533],"[dispatch, isConnected, isError, message]",[1230,1236],"[fetchProfileUser, user]",[5531,5545],"[fetchProfileUser, profileImage]",[3004,3043],"[isConnected, activeUser, anthem, user, fetchProfileUser]",[1924,1938],"[checkPFP, profileImage]",[1386,1392],[2551,2553],"[data.img.data, data.profileImage, data.song]",[1324,1338],"[displayPosts, fetchData]",[744,750]]