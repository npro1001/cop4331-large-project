{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nfunction parseHotkey(hotkey) {\n  const keys = hotkey.toLowerCase().split(\"+\").map(part => part.trim());\n  const modifiers = {\n    alt: keys.includes(\"alt\"),\n    ctrl: keys.includes(\"ctrl\"),\n    meta: keys.includes(\"meta\"),\n    mod: keys.includes(\"mod\"),\n    shift: keys.includes(\"shift\")\n  };\n  const reservedKeys = [\"alt\", \"ctrl\", \"meta\", \"shift\", \"mod\"];\n  const freeKey = keys.find(key => !reservedKeys.includes(key));\n  return __spreadProps(__spreadValues({}, modifiers), {\n    key: freeKey\n  });\n}\nfunction isExactHotkey(hotkey, event) {\n  const {\n    alt,\n    ctrl,\n    meta,\n    mod,\n    shift,\n    key\n  } = hotkey;\n  const {\n    altKey,\n    ctrlKey,\n    metaKey,\n    shiftKey,\n    key: pressedKey\n  } = event;\n  if (alt !== altKey) {\n    return false;\n  }\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n  if (shift !== shiftKey) {\n    return false;\n  }\n  if (key && (pressedKey.toLowerCase() === key.toLowerCase() || event.code.replace(\"Key\", \"\").toLowerCase() === key.toLowerCase())) {\n    return true;\n  }\n  return false;\n}\nfunction getHotkeyMatcher(hotkey) {\n  return event => isExactHotkey(parseHotkey(hotkey), event);\n}\nfunction getHotkeyHandler(hotkeys) {\n  return event => {\n    const _event = \"nativeEvent\" in event ? event.nativeEvent : event;\n    hotkeys.forEach(_ref => {\n      let [hotkey, handler] = _ref;\n      if (getHotkeyMatcher(hotkey)(_event)) {\n        event.preventDefault();\n        handler(_event);\n      }\n    });\n  };\n}\nexport { getHotkeyHandler, getHotkeyMatcher, parseHotkey };","map":{"version":3,"mappings":"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","names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","parseHotkey","hotkey","keys","toLowerCase","split","map","part","trim","modifiers","alt","includes","ctrl","meta","mod","shift","reservedKeys","freeKey","find","isExactHotkey","event","altKey","ctrlKey","metaKey","shiftKey","pressedKey","code","replace","getHotkeyMatcher","getHotkeyHandler","hotkeys","_event","nativeEvent","forEach","handler","preventDefault"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\node_modules\\@mantine\\hooks\\src\\use-hotkeys\\parse-hotkey.ts"],"sourcesContent":["export type KeyboardModifiers = {\n  alt: boolean;\n  ctrl: boolean;\n  meta: boolean;\n  mod: boolean;\n  shift: boolean;\n};\n\nexport type Hotkey = KeyboardModifiers & {\n  key?: string;\n};\n\ntype CheckHotkeyMatch = (event: KeyboardEvent) => boolean;\n\nexport function parseHotkey(hotkey: string): Hotkey {\n  const keys = hotkey\n    .toLowerCase()\n    .split('+')\n    .map((part) => part.trim());\n\n  const modifiers: KeyboardModifiers = {\n    alt: keys.includes('alt'),\n    ctrl: keys.includes('ctrl'),\n    meta: keys.includes('meta'),\n    mod: keys.includes('mod'),\n    shift: keys.includes('shift'),\n  };\n\n  const reservedKeys = ['alt', 'ctrl', 'meta', 'shift', 'mod'];\n\n  const freeKey = keys.find((key) => !reservedKeys.includes(key));\n\n  return {\n    ...modifiers,\n    key: freeKey,\n  };\n}\n\nfunction isExactHotkey(hotkey: Hotkey, event: KeyboardEvent): boolean {\n  const { alt, ctrl, meta, mod, shift, key } = hotkey;\n  const { altKey, ctrlKey, metaKey, shiftKey, key: pressedKey } = event;\n\n  if (alt !== altKey) {\n    return false;\n  }\n\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n  if (shift !== shiftKey) {\n    return false;\n  }\n\n  if (\n    key &&\n    (pressedKey.toLowerCase() === key.toLowerCase() ||\n      event.code.replace('Key', '').toLowerCase() === key.toLowerCase())\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function getHotkeyMatcher(hotkey: string): CheckHotkeyMatch {\n  return (event) => isExactHotkey(parseHotkey(hotkey), event);\n}\n\ntype HotkeyItem = [string, (event: React.KeyboardEvent<HTMLElement> | KeyboardEvent) => void];\n\nexport function getHotkeyHandler(hotkeys: HotkeyItem[]) {\n  return (event: React.KeyboardEvent<HTMLElement> | KeyboardEvent) => {\n    const _event = 'nativeEvent' in event ? event.nativeEvent : event;\n    hotkeys.forEach(([hotkey, handler]) => {\n      if (getHotkeyMatcher(hotkey)(_event)) {\n        event.preventDefault();\n        handler(_event);\n      }\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}