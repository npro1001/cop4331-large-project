{"ast":null,"code":"import { useRef, useCallback, useEffect } from 'react';\nimport { FOCUS_SELECTOR, tabbable, focusable } from './tabbable.js';\nimport { scopeTab } from './scope-tab.js';\nimport { createAriaHider } from './create-aria-hider.js';\nfunction useFocusTrap() {\n  let active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  const ref = useRef();\n  const restoreAria = useRef(null);\n  const setRef = useCallback(node => {\n    if (!active) {\n      return;\n    }\n    if (node === null) {\n      return;\n    }\n    restoreAria.current = createAriaHider(node);\n    if (ref.current === node) {\n      return;\n    }\n    if (node) {\n      const processNode = () => {\n        let focusElement = node.querySelector(\"[data-autofocus]\");\n        if (!focusElement) {\n          const children = Array.from(node.querySelectorAll(FOCUS_SELECTOR));\n          focusElement = children.find(tabbable) || children.find(focusable) || null;\n          if (!focusElement && focusable(node)) focusElement = node;\n        }\n        if (focusElement) {\n          focusElement.focus({\n            preventScroll: true\n          });\n        } else if (process.env.NODE_ENV === \"development\") {\n          console.warn(\"[@mantine/hooks/use-focus-trap] Failed to find focusable element within provided node\", node);\n        }\n      };\n      setTimeout(() => {\n        if (node.ownerDocument) {\n          processNode();\n        } else if (process.env.NODE_ENV === \"development\") {\n          console.warn(\"[@mantine/hooks/use-focus-trap] Ref node is not part of the dom\", node);\n        }\n      });\n      ref.current = node;\n    } else {\n      ref.current = null;\n    }\n  }, [active]);\n  useEffect(() => {\n    if (!active) {\n      return void 0;\n    }\n    const handleKeyDown = event => {\n      if (event.key === \"Tab\" && ref.current) {\n        scopeTab(ref.current, event);\n      }\n    };\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n      if (restoreAria.current) {\n        restoreAria.current();\n      }\n    };\n  }, [active]);\n  return setRef;\n}\nexport { useFocusTrap };","map":{"version":3,"mappings":";;;;AAIO,SAASA,YAAY,GAAgB;EAAA,IAAfC,MAAM,uEAAG,IAAI;EACxC,MAAMC,GAAG,GAAGC,MAAM,EAAE;EACpB,MAAMC,WAAW,GAAGD,MAAM,CAAC,IAAI,CAAC;EAChC,MAAME,MAAM,GAAGC,WAAW,CAAEC,IAAI,IAAK;IACnC,IAAI,CAACN,MAAM,EAAE;MACX;IACN;IACI,IAAIM,IAAI,KAAK,IAAI,EAAE;MACjB;IACN;IACIH,WAAW,CAACI,OAAO,GAAGC,eAAe,CAACF,IAAI,CAAC;IAC3C,IAAIL,GAAG,CAACM,OAAO,KAAKD,IAAI,EAAE;MACxB;IACN;IACI,IAAIA,IAAI,EAAE;MACR,MAAMG,WAAW,GAAG,MAAM;QACxB,IAAIC,YAAY,GAAGJ,IAAI,CAACK,aAAa,CAAC,kBAAkB,CAAC;QACzD,IAAI,CAACD,YAAY,EAAE;UACjB,MAAME,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAACR,IAAI,CAACS,gBAAgB,CAACC,cAAc,CAAC,CAAC;UAClEN,YAAY,GAAGE,QAAQ,CAACK,IAAI,CAACC,QAAQ,CAAC,IAAIN,QAAQ,CAACK,IAAI,CAACE,SAAS,CAAC,IAAI,IAAI;UAC1E,IAAI,CAACT,YAAY,IAAIS,SAAS,CAACb,IAAI,CAAC,EAClCI,YAAY,GAAGJ,IAAI;QAC/B;QACQ,IAAII,YAAY,EAAE;UAChBA,YAAY,CAACU,KAAK,CAAC;YAAEC,aAAa,EAAE;UAAI,CAAE,CAAC;QACrD,CAAS,MAAM,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;UACjDC,OAAO,CAACC,IAAI,CAAC,uFAAuF,EAAEpB,IAAI,CAAC;QACrH;MACA,CAAO;MACDqB,UAAU,CAAC,MAAM;QACf,IAAIrB,IAAI,CAACsB,aAAa,EAAE;UACtBnB,WAAW,EAAE;QACvB,CAAS,MAAM,IAAIa,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;UACjDC,OAAO,CAACC,IAAI,CAAC,iEAAiE,EAAEpB,IAAI,CAAC;QAC/F;MACA,CAAO,CAAC;MACFL,GAAG,CAACM,OAAO,GAAGD,IAAI;IACxB,CAAK,MAAM;MACLL,GAAG,CAACM,OAAO,GAAG,IAAI;IACxB;EACA,CAAG,EAAE,CAACP,MAAM,CAAC,CAAC;EACZ6B,SAAS,CAAC,MAAM;IACd,IAAI,CAAC7B,MAAM,EAAE;MACX,OAAO,KAAK,CAAC;IACnB;IACI,MAAM8B,aAAa,GAAIC,KAAK,IAAK;MAC/B,IAAIA,KAAK,CAACC,GAAG,KAAK,KAAK,IAAI/B,GAAG,CAACM,OAAO,EAAE;QACtC0B,QAAQ,CAAChC,GAAG,CAACM,OAAO,EAAEwB,KAAK,CAAC;MACpC;IACA,CAAK;IACDG,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEL,aAAa,CAAC;IACnD,OAAO,MAAM;MACXI,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAEN,aAAa,CAAC;MACtD,IAAI3B,WAAW,CAACI,OAAO,EAAE;QACvBJ,WAAW,CAACI,OAAO,EAAE;MAC7B;IACA,CAAK;EACL,CAAG,EAAE,CAACP,MAAM,CAAC,CAAC;EACZ,OAAOI,MAAM;AACf","names":["useFocusTrap","active","ref","useRef","restoreAria","setRef","useCallback","node","current","createAriaHider","processNode","focusElement","querySelector","children","Array","from","querySelectorAll","FOCUS_SELECTOR","find","tabbable","focusable","focus","preventScroll","process","env","NODE_ENV","console","warn","setTimeout","ownerDocument","useEffect","handleKeyDown","event","key","scopeTab","document","addEventListener","removeEventListener"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\node_modules\\@mantine\\hooks\\src\\use-focus-trap\\use-focus-trap.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { FOCUS_SELECTOR, focusable, tabbable } from './tabbable';\nimport { scopeTab } from './scope-tab';\nimport { createAriaHider } from './create-aria-hider';\n\nexport function useFocusTrap(active = true): (instance: HTMLElement | null) => void {\n  const ref = useRef<HTMLElement | null>();\n  const restoreAria = useRef<Function | null>(null);\n\n  const setRef = useCallback(\n    (node: HTMLElement | null) => {\n      if (!active) {\n        return;\n      }\n\n      if (node === null) {\n        return;\n      }\n\n      restoreAria.current = createAriaHider(node);\n      if (ref.current === node) {\n        return;\n      }\n\n      if (node) {\n        const processNode = () => {\n          let focusElement: HTMLElement = node.querySelector('[data-autofocus]');\n\n          if (!focusElement) {\n            const children = Array.from<HTMLElement>(node.querySelectorAll(FOCUS_SELECTOR));\n            focusElement = children.find(tabbable) || children.find(focusable) || null;\n            if (!focusElement && focusable(node)) focusElement = node;\n          }\n\n          if (focusElement) {\n            focusElement.focus({ preventScroll: true });\n          } else if (process.env.NODE_ENV === 'development') {\n            // eslint-disable-next-line no-console\n            console.warn(\n              '[@mantine/hooks/use-focus-trap] Failed to find focusable element within provided node',\n              node\n            );\n          }\n        };\n\n        // Delay processing the HTML node by a frame. This ensures focus is assigned correctly.\n        setTimeout(() => {\n          if (node.ownerDocument) {\n            processNode();\n          } else if (process.env.NODE_ENV === 'development') {\n            // eslint-disable-next-line no-console\n            console.warn('[@mantine/hooks/use-focus-trap] Ref node is not part of the dom', node);\n          }\n        });\n\n        ref.current = node;\n      } else {\n        ref.current = null;\n      }\n    },\n    [active]\n  );\n\n  useEffect(() => {\n    if (!active) {\n      return undefined;\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Tab' && ref.current) {\n        scopeTab(ref.current, event);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n\n      if (restoreAria.current) {\n        restoreAria.current();\n      }\n    };\n  }, [active]);\n\n  return setRef;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}