{"ast":null,"code":"function groupOptions(_ref) {\n  let {\n    data\n  } = _ref;\n  const sortedData = [];\n  const unGroupedData = [];\n  const groupedData = data.reduce((acc, item, index) => {\n    if (item.group) {\n      if (acc[item.group]) acc[item.group].push(index);else acc[item.group] = [index];\n    } else {\n      unGroupedData.push(index);\n    }\n    return acc;\n  }, {});\n  Object.keys(groupedData).forEach(groupName => {\n    sortedData.push(...groupedData[groupName].map(index => data[index]));\n  });\n  sortedData.push(...unGroupedData.map(itemIndex => data[itemIndex]));\n  return sortedData;\n}\nfunction getGroupedOptions(data) {\n  const sorted = groupOptions({\n    data\n  });\n  const unGrouped = [];\n  const grouped = [];\n  let groupName = null;\n  sorted.forEach((item, index) => {\n    if (!item.group) {\n      unGrouped.push({\n        type: \"item\",\n        item,\n        index\n      });\n    } else {\n      if (groupName !== item.group) {\n        groupName = item.group;\n        grouped.push({\n          type: \"label\",\n          label: groupName\n        });\n      }\n      grouped.push({\n        type: \"item\",\n        item,\n        index\n      });\n    }\n  });\n  return {\n    grouped,\n    unGrouped,\n    items: [...grouped, ...unGrouped],\n    hasItems: grouped.length > 0 || unGrouped.length > 0\n  };\n}\nexport { getGroupedOptions, groupOptions };","map":{"version":3,"mappings":"AAAO,SAASA,YAAY,OAAW;EAAA,IAAV;IAAEC;EAAI,CAAE;EACnC,MAAMC,UAAU,GAAG,EAAE;EACrB,MAAMC,aAAa,GAAG,EAAE;EACxB,MAAMC,WAAW,GAAGH,IAAI,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,EAAEC,KAAK,KAAK;IACpD,IAAID,IAAI,CAACE,KAAK,EAAE;MACd,IAAIH,GAAG,CAACC,IAAI,CAACE,KAAK,CAAC,EACjBH,GAAG,CAACC,IAAI,CAACE,KAAK,CAAC,CAACC,IAAI,CAACF,KAAK,CAAC,CAAC,KAE5BF,GAAG,CAACC,IAAI,CAACE,KAAK,CAAC,GAAG,CAACD,KAAK,CAAC;IACjC,CAAK,MAAM;MACLL,aAAa,CAACO,IAAI,CAACF,KAAK,CAAC;IAC/B;IACI,OAAOF,GAAG;EACd,CAAG,EAAE,EAAE,CAAC;EACNK,MAAM,CAACC,IAAI,CAACR,WAAW,CAAC,CAACS,OAAO,CAAEC,SAAS,IAAK;IAC9CZ,UAAU,CAACQ,IAAI,CAAC,GAAGN,WAAW,CAACU,SAAS,CAAC,CAACC,GAAG,CAAEP,KAAK,IAAKP,IAAI,CAACO,KAAK,CAAC,CAAC,CAAC;EAC1E,CAAG,CAAC;EACFN,UAAU,CAACQ,IAAI,CAAC,GAAGP,aAAa,CAACY,GAAG,CAAEC,SAAS,IAAKf,IAAI,CAACe,SAAS,CAAC,CAAC,CAAC;EACrE,OAAOd,UAAU;AACnB;AACO,SAASe,iBAAiB,CAAChB,IAAI,EAAE;EACtC,MAAMiB,MAAM,GAAGlB,YAAY,CAAC;IAAEC;EAAI,CAAE,CAAC;EACrC,MAAMkB,SAAS,GAAG,EAAE;EACpB,MAAMC,OAAO,GAAG,EAAE;EAClB,IAAIN,SAAS,GAAG,IAAI;EACpBI,MAAM,CAACL,OAAO,CAAC,CAACN,IAAI,EAAEC,KAAK,KAAK;IAC9B,IAAI,CAACD,IAAI,CAACE,KAAK,EAAE;MACfU,SAAS,CAACT,IAAI,CAAC;QAAEW,IAAI,EAAE,MAAM;QAAEd,IAAI;QAAEC;MAAK,CAAE,CAAC;IACnD,CAAK,MAAM;MACL,IAAIM,SAAS,KAAKP,IAAI,CAACE,KAAK,EAAE;QAC5BK,SAAS,GAAGP,IAAI,CAACE,KAAK;QACtBW,OAAO,CAACV,IAAI,CAAC;UAAEW,IAAI,EAAE,OAAO;UAAEC,KAAK,EAAER;QAAS,CAAE,CAAC;MACzD;MACMM,OAAO,CAACV,IAAI,CAAC;QAAEW,IAAI,EAAE,MAAM;QAAEd,IAAI;QAAEC;MAAK,CAAE,CAAC;IACjD;EACA,CAAG,CAAC;EACF,OAAO;IACLY,OAAO;IACPD,SAAS;IACTI,KAAK,EAAE,CAAC,GAAGH,OAAO,EAAE,GAAGD,SAAS,CAAC;IACjCK,QAAQ,EAAEJ,OAAO,CAACK,MAAM,GAAG,CAAC,IAAIN,SAAS,CAACM,MAAM,GAAG;EACvD,CAAG;AACH","names":["groupOptions","data","sortedData","unGroupedData","groupedData","reduce","acc","item","index","group","push","Object","keys","forEach","groupName","map","itemIndex","getGroupedOptions","sorted","unGrouped","grouped","type","label","items","hasItems","length"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\node_modules\\@mantine\\utils\\src\\group-options\\group-options.ts"],"sourcesContent":["interface GroupData {\n  data: { group?: string }[];\n}\n\nexport function groupOptions({ data }: GroupData) {\n  const sortedData = [];\n  const unGroupedData = [];\n  const groupedData = data.reduce((acc, item, index) => {\n    if (item.group) {\n      if (acc[item.group]) acc[item.group].push(index);\n      else acc[item.group] = [index];\n    } else {\n      unGroupedData.push(index);\n    }\n    return acc;\n  }, {});\n\n  Object.keys(groupedData).forEach((groupName) => {\n    sortedData.push(...groupedData[groupName].map((index) => data[index]));\n  });\n\n  sortedData.push(...unGroupedData.map((itemIndex) => data[itemIndex]));\n\n  return sortedData;\n}\n\nexport function getGroupedOptions<T extends any[]>(data: T) {\n  type Item = { type: 'item'; item: T[number]; index: number };\n  type Label = { type: 'label'; label: string };\n\n  const sorted = groupOptions({ data });\n  const unGrouped: Item[] = [];\n  const grouped: (Item | Label)[] = [];\n  let groupName = null;\n\n  sorted.forEach((item, index) => {\n    if (!item.group) {\n      unGrouped.push({ type: 'item', item, index });\n    } else {\n      if (groupName !== item.group) {\n        groupName = item.group;\n        grouped.push({ type: 'label', label: groupName });\n      }\n      grouped.push({ type: 'item', item, index });\n    }\n  });\n\n  return {\n    grouped,\n    unGrouped,\n    items: [...grouped, ...unGrouped],\n    hasItems: grouped.length > 0 || unGrouped.length > 0,\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}