{"ast":null,"code":"import { useState, useRef, useCallback, useEffect } from 'react';\nfunction useHover() {\n  const [hovered, setHovered] = useState(false);\n  const ref = useRef(null);\n  const onMouseEnter = useCallback(() => setHovered(true), []);\n  const onMouseLeave = useCallback(() => setHovered(false), []);\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener(\"mouseenter\", onMouseEnter);\n      ref.current.addEventListener(\"mouseleave\", onMouseLeave);\n      return () => {\n        var _a, _b;\n        (_a = ref.current) == null ? void 0 : _a.removeEventListener(\"mouseenter\", onMouseEnter);\n        (_b = ref.current) == null ? void 0 : _b.removeEventListener(\"mouseleave\", onMouseLeave);\n      };\n    }\n    return void 0;\n  }, []);\n  return {\n    ref,\n    hovered\n  };\n}\nexport { useHover };","map":{"version":3,"mappings":";AACO,SAASA,QAAQ,GAAG;EACzB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMC,GAAG,GAAGC,MAAM,CAAC,IAAI,CAAC;EACxB,MAAMC,YAAY,GAAGC,WAAW,CAAC,MAAML,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;EAC5D,MAAMM,YAAY,GAAGD,WAAW,CAAC,MAAML,UAAU,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC;EAC7DO,SAAS,CAAC,MAAM;IACd,IAAIL,GAAG,CAACM,OAAO,EAAE;MACfN,GAAG,CAACM,OAAO,CAACC,gBAAgB,CAAC,YAAY,EAAEL,YAAY,CAAC;MACxDF,GAAG,CAACM,OAAO,CAACC,gBAAgB,CAAC,YAAY,EAAEH,YAAY,CAAC;MACxD,OAAO,MAAM;QACX,IAAII,EAAE,EAAEC,EAAE;QACV,CAACD,EAAE,GAAGR,GAAG,CAACM,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGE,EAAE,CAACE,mBAAmB,CAAC,YAAY,EAAER,YAAY,CAAC;QACxF,CAACO,EAAE,GAAGT,GAAG,CAACM,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGG,EAAE,CAACC,mBAAmB,CAAC,YAAY,EAAEN,YAAY,CAAC;MAChG,CAAO;IACP;IACI,OAAO,KAAK,CAAC;EACjB,CAAG,EAAE,EAAE,CAAC;EACN,OAAO;IAAEJ,GAAG;IAAEH;EAAO,CAAE;AACzB","names":["useHover","hovered","setHovered","useState","ref","useRef","onMouseEnter","useCallback","onMouseLeave","useEffect","current","addEventListener","_a","_b","removeEventListener"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\node_modules\\@mantine\\hooks\\src\\use-hover\\use-hover.ts"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\n\nexport function useHover<T extends HTMLElement = HTMLDivElement>() {\n  const [hovered, setHovered] = useState(false);\n  const ref = useRef<T>(null);\n  const onMouseEnter = useCallback(() => setHovered(true), []);\n  const onMouseLeave = useCallback(() => setHovered(false), []);\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener('mouseenter', onMouseEnter);\n      ref.current.addEventListener('mouseleave', onMouseLeave);\n\n      return () => {\n        ref.current?.removeEventListener('mouseenter', onMouseEnter);\n        ref.current?.removeEventListener('mouseleave', onMouseLeave);\n      };\n    }\n\n    return undefined;\n  }, []);\n\n  return { ref, hovered };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}