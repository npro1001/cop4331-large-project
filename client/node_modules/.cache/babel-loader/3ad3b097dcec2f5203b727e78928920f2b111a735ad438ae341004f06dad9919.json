{"ast":null,"code":"import { useState } from 'react';\nfunction useValidatedState(initialValue, validation, initialValidationState) {\n  const [value, setValue] = useState(initialValue);\n  const [lastValidValue, setLastValidValue] = useState(validation(initialValue) ? initialValue : void 0);\n  const [valid, setValid] = useState(typeof initialValidationState === \"boolean\" ? initialValidationState : validation(initialValue));\n  const onChange = val => {\n    if (validation(val)) {\n      setLastValidValue(val);\n      setValid(true);\n    } else {\n      setValid(false);\n    }\n    setValue(val);\n  };\n  return [{\n    value,\n    lastValidValue,\n    valid\n  }, onChange];\n}\nexport { useValidatedState };","map":{"version":3,"mappings":";AACO,SAASA,iBAAiB,CAACC,YAAY,EAAEC,UAAU,EAAEC,sBAAsB,EAAE;EAClF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAACL,YAAY,CAAC;EAChD,MAAM,CAACM,cAAc,EAAEC,iBAAiB,CAAC,GAAGF,QAAQ,CAACJ,UAAU,CAACD,YAAY,CAAC,GAAGA,YAAY,GAAG,KAAK,CAAC,CAAC;EACtG,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,OAAOH,sBAAsB,KAAK,SAAS,GAAGA,sBAAsB,GAAGD,UAAU,CAACD,YAAY,CAAC,CAAC;EACnI,MAAMU,QAAQ,GAAIC,GAAG,IAAK;IACxB,IAAIV,UAAU,CAACU,GAAG,CAAC,EAAE;MACnBJ,iBAAiB,CAACI,GAAG,CAAC;MACtBF,QAAQ,CAAC,IAAI,CAAC;IACpB,CAAK,MAAM;MACLA,QAAQ,CAAC,KAAK,CAAC;IACrB;IACIL,QAAQ,CAACO,GAAG,CAAC;EACjB,CAAG;EACD,OAAO,CAAC;IAAER,KAAK;IAAEG,cAAc;IAAEE;EAAK,CAAE,EAAEE,QAAQ,CAAC;AACrD","names":["useValidatedState","initialValue","validation","initialValidationState","value","setValue","useState","lastValidValue","setLastValidValue","valid","setValid","onChange","val"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\node_modules\\@mantine\\hooks\\src\\use-validated-state\\use-validated-state.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport function useValidatedState<T>(\n  initialValue: T,\n  validation: (value: T) => boolean,\n  initialValidationState?: boolean\n) {\n  const [value, setValue] = useState<T>(initialValue);\n  const [lastValidValue, setLastValidValue] = useState<T>(\n    validation(initialValue) ? initialValue : undefined\n  );\n  const [valid, setValid] = useState<boolean>(\n    typeof initialValidationState === 'boolean' ? initialValidationState : validation(initialValue)\n  );\n\n  const onChange = (val: T) => {\n    if (validation(val)) {\n      setLastValidValue(val);\n      setValid(true);\n    } else {\n      setValid(false);\n    }\n\n    setValue(val);\n  };\n\n  return [{ value, lastValidValue, valid }, onChange] as const;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}