{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\nimport { getLockStyles } from './utils/get-lock-styles.js';\nimport { injectStyles } from './utils/inject-style-tag.js';\nimport { insertStyleTag } from './utils/insert-style-tag.js';\nimport { makeStyleTag } from './utils/make-style-tag.js';\nfunction useScrollLock(lock) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    disableBodyPadding: false\n  };\n  const [scrollLocked, setScrollLocked] = useState(lock || false);\n  const scrollTop = useRef(0);\n  const {\n    disableBodyPadding\n  } = options;\n  const stylesheet = useRef(null);\n  const lockScroll = () => {\n    scrollTop.current = window.scrollY;\n    const styles = getLockStyles({\n      disableBodyPadding\n    });\n    const sheet = makeStyleTag();\n    injectStyles(sheet, styles);\n    insertStyleTag(sheet);\n    stylesheet.current = sheet;\n  };\n  const unlockScroll = () => {\n    if (!(stylesheet == null ? void 0 : stylesheet.current)) return;\n    stylesheet.current.parentNode.removeChild(stylesheet.current);\n    stylesheet.current = null;\n  };\n  useEffect(() => {\n    if (scrollLocked) {\n      lockScroll();\n    } else {\n      unlockScroll();\n    }\n    return unlockScroll;\n  }, [scrollLocked]);\n  useEffect(() => {\n    if (lock !== void 0) {\n      setScrollLocked(lock);\n    }\n  }, [lock]);\n  useEffect(() => {\n    if (lock === void 0 && typeof window !== \"undefined\") {\n      window.document.body.style.overflow === \"hidden\" && setScrollLocked(true);\n    }\n  }, [setScrollLocked]);\n  return [scrollLocked, setScrollLocked];\n}\nexport { useScrollLock };","map":{"version":3,"mappings":";;;;;AAKO,SAASA,aAAa,CAACC,IAAI,EAE/B;EAAA,IAFiCC,OAAO,uEAAG;IAC5CC,kBAAkB,EAAE;EACtB,CAAC;EACC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGC,QAAQ,CAACL,IAAI,IAAI,KAAK,CAAC;EAC/D,MAAMM,SAAS,GAAGC,MAAM,CAAC,CAAC,CAAC;EAC3B,MAAM;IAAEL;EAAkB,CAAE,GAAGD,OAAO;EACtC,MAAMO,UAAU,GAAGD,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAME,UAAU,GAAG,MAAM;IACvBH,SAAS,CAACI,OAAO,GAAGC,MAAM,CAACC,OAAO;IAClC,MAAMC,MAAM,GAAGC,aAAa,CAAC;MAAEZ;IAAkB,CAAE,CAAC;IACpD,MAAMa,KAAK,GAAGC,YAAY,EAAE;IAC5BC,YAAY,CAACF,KAAK,EAAEF,MAAM,CAAC;IAC3BK,cAAc,CAACH,KAAK,CAAC;IACrBP,UAAU,CAACE,OAAO,GAAGK,KAAK;EAC9B,CAAG;EACD,MAAMI,YAAY,GAAG,MAAM;IACzB,IAAI,EAAEX,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACE,OAAO,CAAC,EACrD;IACFF,UAAU,CAACE,OAAO,CAACU,UAAU,CAACC,WAAW,CAACb,UAAU,CAACE,OAAO,CAAC;IAC7DF,UAAU,CAACE,OAAO,GAAG,IAAI;EAC7B,CAAG;EACDY,SAAS,CAAC,MAAM;IACd,IAAInB,YAAY,EAAE;MAChBM,UAAU,EAAE;IAClB,CAAK,MAAM;MACLU,YAAY,EAAE;IACpB;IACI,OAAOA,YAAY;EACvB,CAAG,EAAE,CAAChB,YAAY,CAAC,CAAC;EAClBmB,SAAS,CAAC,MAAM;IACd,IAAItB,IAAI,KAAK,KAAK,CAAC,EAAE;MACnBI,eAAe,CAACJ,IAAI,CAAC;IAC3B;EACA,CAAG,EAAE,CAACA,IAAI,CAAC,CAAC;EACVsB,SAAS,CAAC,MAAM;IACd,IAAItB,IAAI,KAAK,KAAK,CAAC,IAAI,OAAOW,MAAM,KAAK,WAAW,EAAE;MACpDA,MAAM,CAACY,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,KAAK,QAAQ,IAAItB,eAAe,CAAC,IAAI,CAAC;IAC/E;EACA,CAAG,EAAE,CAACA,eAAe,CAAC,CAAC;EACrB,OAAO,CAACD,YAAY,EAAEC,eAAe,CAAC;AACxC","names":["useScrollLock","lock","options","disableBodyPadding","scrollLocked","setScrollLocked","useState","scrollTop","useRef","stylesheet","lockScroll","current","window","scrollY","styles","getLockStyles","sheet","makeStyleTag","injectStyles","insertStyleTag","unlockScroll","parentNode","removeChild","useEffect","document","body","style","overflow"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\node_modules\\@mantine\\hooks\\src\\use-scroll-lock\\use-scroll-lock.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nimport { getLockStyles } from './utils/get-lock-styles';\nimport { injectStyles } from './utils/inject-style-tag';\nimport { insertStyleTag } from './utils/insert-style-tag';\nimport { makeStyleTag } from './utils/make-style-tag';\n\nexport function useScrollLock(\n  lock?: boolean,\n  options = {\n    disableBodyPadding: false,\n  }\n) {\n  const [scrollLocked, setScrollLocked] = useState(lock || false);\n  const scrollTop = useRef(0);\n\n  const { disableBodyPadding } = options;\n\n  const stylesheet = useRef<CSSStyleSheet | any | null>(null);\n\n  const lockScroll = () => {\n    scrollTop.current = window.scrollY;\n\n    const styles = getLockStyles({ disableBodyPadding });\n\n    /**\n     * by applying styles via style tag\n     * we dont care about previous styles due to inheritance\n     * when scroll gets unlocked we delete that style tag\n     */\n    const sheet = makeStyleTag();\n\n    injectStyles(sheet, styles);\n    insertStyleTag(sheet);\n\n    stylesheet.current = sheet;\n  };\n\n  const unlockScroll = () => {\n    if (!stylesheet?.current) return;\n\n    stylesheet.current.parentNode.removeChild(stylesheet.current);\n    stylesheet.current = null;\n  };\n\n  useEffect(() => {\n    if (scrollLocked) {\n      lockScroll();\n    } else {\n      unlockScroll();\n    }\n\n    return unlockScroll;\n  }, [scrollLocked]);\n\n  useEffect(() => {\n    if (lock !== undefined) {\n      setScrollLocked(lock);\n    }\n  }, [lock]);\n\n  useEffect(() => {\n    if (lock === undefined && typeof window !== 'undefined') {\n      window.document.body.style.overflow === 'hidden' && setScrollLocked(true);\n    }\n  }, [setScrollLocked]);\n\n  return [scrollLocked, setScrollLocked] as const;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}