{"ast":null,"code":"function getOS() {\n  const {\n    userAgent\n  } = window.navigator;\n  const macosPlatforms = /(Macintosh)|(MacIntel)|(MacPPC)|(Mac68K)/i;\n  const windowsPlatforms = /(Win32)|(Win64)|(Windows)|(WinCE)/i;\n  const iosPlatforms = /(iPhone)|(iPad)|(iPod)/i;\n  if (macosPlatforms.test(userAgent)) {\n    return \"macos\";\n  }\n  if (iosPlatforms.test(userAgent)) {\n    return \"ios\";\n  }\n  if (windowsPlatforms.test(userAgent)) {\n    return \"windows\";\n  }\n  if (/Android/i.test(userAgent)) {\n    return \"android\";\n  }\n  if (/Linux/i.test(userAgent)) {\n    return \"linux\";\n  }\n  return \"undetermined\";\n}\nfunction useOs() {\n  if (typeof window !== \"undefined\") {\n    return getOS();\n  }\n  return \"undetermined\";\n}\nexport { useOs };","map":{"version":3,"mappings":"AAAA,SAASA,KAAK,GAAG;EACf,MAAM;IAAEC;EAAS,CAAE,GAAGC,MAAM,CAACC,SAAS;EACtC,MAAMC,cAAc,GAAG,2CAA2C;EAClE,MAAMC,gBAAgB,GAAG,oCAAoC;EAC7D,MAAMC,YAAY,GAAG,yBAAyB;EAC9C,IAAIF,cAAc,CAACG,IAAI,CAACN,SAAS,CAAC,EAAE;IAClC,OAAO,OAAO;EAClB;EACE,IAAIK,YAAY,CAACC,IAAI,CAACN,SAAS,CAAC,EAAE;IAChC,OAAO,KAAK;EAChB;EACE,IAAII,gBAAgB,CAACE,IAAI,CAACN,SAAS,CAAC,EAAE;IACpC,OAAO,SAAS;EACpB;EACE,IAAI,UAAU,CAACM,IAAI,CAACN,SAAS,CAAC,EAAE;IAC9B,OAAO,SAAS;EACpB;EACE,IAAI,QAAQ,CAACM,IAAI,CAACN,SAAS,CAAC,EAAE;IAC5B,OAAO,OAAO;EAClB;EACE,OAAO,cAAc;AACvB;AACO,SAASO,KAAK,GAAG;EACtB,IAAI,OAAON,MAAM,KAAK,WAAW,EAAE;IACjC,OAAOF,KAAK,EAAE;EAClB;EACE,OAAO,cAAc;AACvB","names":["getOS","userAgent","window","navigator","macosPlatforms","windowsPlatforms","iosPlatforms","test","useOs"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\node_modules\\@mantine\\hooks\\src\\use-os\\use-os.ts"],"sourcesContent":["export type OS = 'undetermined' | 'macos' | 'ios' | 'windows' | 'android' | 'linux';\n\nfunction getOS(): OS {\n  const { userAgent } = window.navigator;\n  const macosPlatforms = /(Macintosh)|(MacIntel)|(MacPPC)|(Mac68K)/i;\n  const windowsPlatforms = /(Win32)|(Win64)|(Windows)|(WinCE)/i;\n  const iosPlatforms = /(iPhone)|(iPad)|(iPod)/i;\n\n  if (macosPlatforms.test(userAgent)) {\n    return 'macos';\n  }\n  if (iosPlatforms.test(userAgent)) {\n    return 'ios';\n  }\n  if (windowsPlatforms.test(userAgent)) {\n    return 'windows';\n  }\n  if (/Android/i.test(userAgent)) {\n    return 'android';\n  }\n  if (/Linux/i.test(userAgent)) {\n    return 'linux';\n  }\n\n  return 'undetermined';\n}\n\nexport function useOs(): OS {\n  if (typeof window !== 'undefined') {\n    return getOS();\n  }\n\n  return 'undetermined';\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}