{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nfunction getCurves(_ref) {\n  let {\n    size,\n    thickness,\n    sections,\n    renderRoundedLineCaps\n  } = _ref;\n  const sum = sections.reduce((acc, current) => acc + current.value, 0);\n  const accumulated = Math.PI * ((size * 0.9 - thickness * 2) / 2) * 2;\n  let offset = accumulated;\n  const curves = [];\n  const curvesInOrder = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    curves.push({\n      sum,\n      offset,\n      data: sections[i],\n      root: false\n    });\n    offset -= sections[i].value / 100 * accumulated;\n  }\n  curves.push({\n    sum,\n    offset,\n    data: null,\n    root: true\n  });\n  curvesInOrder.push(__spreadProps(__spreadValues({}, curves[curves.length - 1]), {\n    lineRoundCaps: false\n  }));\n  if (curves.length > 2) {\n    curvesInOrder.push(__spreadProps(__spreadValues({}, curves[0]), {\n      lineRoundCaps: renderRoundedLineCaps\n    }));\n    curvesInOrder.push(__spreadProps(__spreadValues({}, curves[curves.length - 2]), {\n      lineRoundCaps: renderRoundedLineCaps\n    }));\n    for (let i = 1; i <= curves.length - 3; i += 1) {\n      curvesInOrder.push(__spreadProps(__spreadValues({}, curves[i]), {\n        lineRoundCaps: false\n      }));\n    }\n  } else {\n    curvesInOrder.push(__spreadProps(__spreadValues({}, curves[0]), {\n      lineRoundCaps: renderRoundedLineCaps\n    }));\n  }\n  return curvesInOrder;\n}\nexport { getCurves };","map":{"version":3,"mappings":"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","names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","getCurves","size","thickness","sections","renderRoundedLineCaps","sum","reduce","acc","current","accumulated","Math","PI","offset","curves","curvesInOrder","i","length","push","data","root","lineRoundCaps"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\node_modules\\@mantine\\core\\src\\RingProgress\\get-curves\\get-curves.ts"],"sourcesContent":["import type { MantineColor } from '@mantine/styles';\n\ninterface CurveData extends React.ComponentPropsWithRef<'circle'> {\n  value: number;\n  color: MantineColor;\n  tooltip?: React.ReactNode;\n}\n\ninterface GetCurves {\n  sections: CurveData[];\n  size: number;\n  thickness: number;\n  renderRoundedLineCaps: boolean;\n}\n\ninterface Curve {\n  sum: number;\n  offset: number;\n  root: boolean;\n  data: CurveData;\n  lineRoundCaps?: boolean;\n}\n\nexport function getCurves({ size, thickness, sections, renderRoundedLineCaps }: GetCurves) {\n  const sum = sections.reduce((acc, current) => acc + current.value, 0);\n  const accumulated = Math.PI * ((size * 0.9 - thickness * 2) / 2) * 2;\n  let offset = accumulated;\n  const curves: Curve[] = [];\n  const curvesInOrder: Curve[] = [];\n\n  for (let i = 0; i < sections.length; i += 1) {\n    curves.push({ sum, offset, data: sections[i], root: false });\n    offset -= (sections[i].value / 100) * accumulated;\n  }\n\n  curves.push({ sum, offset, data: null, root: true });\n\n  // Reorder curves to layer appropriately and selectively set caps to round\n\n  curvesInOrder.push({ ...curves[curves.length - 1], lineRoundCaps: false });\n  if (curves.length > 2) {\n    curvesInOrder.push({ ...curves[0], lineRoundCaps: renderRoundedLineCaps });\n    curvesInOrder.push({ ...curves[curves.length - 2], lineRoundCaps: renderRoundedLineCaps });\n    for (let i = 1; i <= curves.length - 3; i += 1) {\n      curvesInOrder.push({ ...curves[i], lineRoundCaps: false });\n    }\n  } else {\n    curvesInOrder.push({ ...curves[0], lineRoundCaps: renderRoundedLineCaps });\n  }\n\n  return curvesInOrder;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}