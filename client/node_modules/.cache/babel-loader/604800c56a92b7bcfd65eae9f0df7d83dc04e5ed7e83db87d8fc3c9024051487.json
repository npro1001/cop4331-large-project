{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\nimport { useReducedMotion, useDidUpdate } from '@mantine/hooks';\nimport { useMantineTheme } from '@mantine/styles';\nfunction useTransition(_ref) {\n  let {\n    duration,\n    exitDuration,\n    timingFunction,\n    mounted,\n    onEnter,\n    onExit,\n    onEntered,\n    onExited\n  } = _ref;\n  const theme = useMantineTheme();\n  const shouldReduceMotion = useReducedMotion();\n  const reduceMotion = theme.respectReducedMotion ? shouldReduceMotion : false;\n  const [transitionStatus, setStatus] = useState(mounted ? \"entered\" : \"exited\");\n  let transitionDuration = reduceMotion ? 0 : duration;\n  const timeoutRef = useRef(-1);\n  const handleStateChange = shouldMount => {\n    const preHandler = shouldMount ? onEnter : onExit;\n    const handler = shouldMount ? onEntered : onExited;\n    setStatus(shouldMount ? \"pre-entering\" : \"pre-exiting\");\n    window.clearTimeout(timeoutRef.current);\n    transitionDuration = reduceMotion ? 0 : shouldMount ? duration : exitDuration;\n    if (transitionDuration === 0) {\n      typeof preHandler === \"function\" && preHandler();\n      typeof handler === \"function\" && handler();\n      setStatus(shouldMount ? \"entered\" : \"exited\");\n    } else {\n      const preStateTimeout = window.setTimeout(() => {\n        typeof preHandler === \"function\" && preHandler();\n        setStatus(shouldMount ? \"entering\" : \"exiting\");\n      }, 10);\n      timeoutRef.current = window.setTimeout(() => {\n        window.clearTimeout(preStateTimeout);\n        typeof handler === \"function\" && handler();\n        setStatus(shouldMount ? \"entered\" : \"exited\");\n      }, transitionDuration);\n    }\n  };\n  useDidUpdate(() => {\n    handleStateChange(mounted);\n  }, [mounted]);\n  useEffect(() => () => window.clearTimeout(timeoutRef.current), []);\n  return {\n    transitionDuration,\n    transitionStatus,\n    transitionTimingFunction: timingFunction || theme.transitionTimingFunction\n  };\n}\nexport { useTransition };","map":{"version":3,"mappings":";;;AAGO,SAASA,aAAa,OAS1B;EAAA,IAT2B;IAC5BC,QAAQ;IACRC,YAAY;IACZC,cAAc;IACdC,OAAO;IACPC,OAAO;IACPC,MAAM;IACNC,SAAS;IACTC;EACF,CAAC;EACC,MAAMC,KAAK,GAAGC,eAAe,EAAE;EAC/B,MAAMC,kBAAkB,GAAGC,gBAAgB,EAAE;EAC7C,MAAMC,YAAY,GAAGJ,KAAK,CAACK,oBAAoB,GAAGH,kBAAkB,GAAG,KAAK;EAC5E,MAAM,CAACI,gBAAgB,EAAEC,SAAS,CAAC,GAAGC,QAAQ,CAACb,OAAO,GAAG,SAAS,GAAG,QAAQ,CAAC;EAC9E,IAAIc,kBAAkB,GAAGL,YAAY,GAAG,CAAC,GAAGZ,QAAQ;EACpD,MAAMkB,UAAU,GAAGC,MAAM,CAAC,CAAC,CAAC,CAAC;EAC7B,MAAMC,iBAAiB,GAAIC,WAAW,IAAK;IACzC,MAAMC,UAAU,GAAGD,WAAW,GAAGjB,OAAO,GAAGC,MAAM;IACjD,MAAMkB,OAAO,GAAGF,WAAW,GAAGf,SAAS,GAAGC,QAAQ;IAClDQ,SAAS,CAACM,WAAW,GAAG,cAAc,GAAG,aAAa,CAAC;IACvDG,MAAM,CAACC,YAAY,CAACP,UAAU,CAACQ,OAAO,CAAC;IACvCT,kBAAkB,GAAGL,YAAY,GAAG,CAAC,GAAGS,WAAW,GAAGrB,QAAQ,GAAGC,YAAY;IAC7E,IAAIgB,kBAAkB,KAAK,CAAC,EAAE;MAC5B,OAAOK,UAAU,KAAK,UAAU,IAAIA,UAAU,EAAE;MAChD,OAAOC,OAAO,KAAK,UAAU,IAAIA,OAAO,EAAE;MAC1CR,SAAS,CAACM,WAAW,GAAG,SAAS,GAAG,QAAQ,CAAC;IACnD,CAAK,MAAM;MACL,MAAMM,eAAe,GAAGH,MAAM,CAACI,UAAU,CAAC,MAAM;QAC9C,OAAON,UAAU,KAAK,UAAU,IAAIA,UAAU,EAAE;QAChDP,SAAS,CAACM,WAAW,GAAG,UAAU,GAAG,SAAS,CAAC;MACvD,CAAO,EAAE,EAAE,CAAC;MACNH,UAAU,CAACQ,OAAO,GAAGF,MAAM,CAACI,UAAU,CAAC,MAAM;QAC3CJ,MAAM,CAACC,YAAY,CAACE,eAAe,CAAC;QACpC,OAAOJ,OAAO,KAAK,UAAU,IAAIA,OAAO,EAAE;QAC1CR,SAAS,CAACM,WAAW,GAAG,SAAS,GAAG,QAAQ,CAAC;MACrD,CAAO,EAAEJ,kBAAkB,CAAC;IAC5B;EACA,CAAG;EACDY,YAAY,CAAC,MAAM;IACjBT,iBAAiB,CAACjB,OAAO,CAAC;EAC9B,CAAG,EAAE,CAACA,OAAO,CAAC,CAAC;EACb2B,SAAS,CAAC,MAAM,MAAMN,MAAM,CAACC,YAAY,CAACP,UAAU,CAACQ,OAAO,CAAC,EAAE,EAAE,CAAC;EAClE,OAAO;IACLT,kBAAkB;IAClBH,gBAAgB;IAChBiB,wBAAwB,EAAE7B,cAAc,IAAIM,KAAK,CAACuB;EACtD,CAAG;AACH","names":["useTransition","duration","exitDuration","timingFunction","mounted","onEnter","onExit","onEntered","onExited","theme","useMantineTheme","shouldReduceMotion","useReducedMotion","reduceMotion","respectReducedMotion","transitionStatus","setStatus","useState","transitionDuration","timeoutRef","useRef","handleStateChange","shouldMount","preHandler","handler","window","clearTimeout","current","preStateTimeout","setTimeout","useDidUpdate","useEffect","transitionTimingFunction"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\node_modules\\@mantine\\core\\src\\Transition\\use-transition.ts"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { useReducedMotion, useDidUpdate } from '@mantine/hooks';\nimport { useMantineTheme } from '@mantine/styles';\n\nexport type TransitionStatus =\n  | 'entered'\n  | 'exited'\n  | 'entering'\n  | 'exiting'\n  | 'pre-exiting'\n  | 'pre-entering';\n\ninterface UseTransition {\n  duration: number;\n  exitDuration: number;\n  timingFunction: string;\n  mounted: boolean;\n  onEnter?(): void;\n  onExit?(): void;\n  onEntered?(): void;\n  onExited?(): void;\n}\n\nexport function useTransition({\n  duration,\n  exitDuration,\n  timingFunction,\n  mounted,\n  onEnter,\n  onExit,\n  onEntered,\n  onExited,\n}: UseTransition) {\n  const theme = useMantineTheme();\n  const shouldReduceMotion = useReducedMotion();\n  const reduceMotion = theme.respectReducedMotion ? shouldReduceMotion : false;\n  const [transitionStatus, setStatus] = useState<TransitionStatus>(mounted ? 'entered' : 'exited');\n  let transitionDuration = reduceMotion ? 0 : duration;\n  const timeoutRef = useRef<number>(-1);\n\n  const handleStateChange = (shouldMount: boolean) => {\n    const preHandler = shouldMount ? onEnter : onExit;\n    const handler = shouldMount ? onEntered : onExited;\n\n    setStatus(shouldMount ? 'pre-entering' : 'pre-exiting');\n    window.clearTimeout(timeoutRef.current);\n    transitionDuration = reduceMotion ? 0 : shouldMount ? duration : exitDuration;\n\n    if (transitionDuration === 0) {\n      typeof preHandler === 'function' && preHandler();\n      typeof handler === 'function' && handler();\n      setStatus(shouldMount ? 'entered' : 'exited');\n    } else {\n      const preStateTimeout = window.setTimeout(() => {\n        typeof preHandler === 'function' && preHandler();\n        setStatus(shouldMount ? 'entering' : 'exiting');\n      }, 10);\n\n      timeoutRef.current = window.setTimeout(() => {\n        window.clearTimeout(preStateTimeout);\n        typeof handler === 'function' && handler();\n        setStatus(shouldMount ? 'entered' : 'exited');\n      }, transitionDuration);\n    }\n  };\n\n  useDidUpdate(() => {\n    handleStateChange(mounted);\n  }, [mounted]);\n\n  useEffect(() => () => window.clearTimeout(timeoutRef.current), []);\n\n  return {\n    transitionDuration,\n    transitionStatus,\n    transitionTimingFunction: timingFunction || theme.transitionTimingFunction,\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}