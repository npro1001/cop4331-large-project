{"ast":null,"code":"import { useState } from 'react';\nimport { clamp } from '../utils/clamp/clamp.js';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  min: -Infinity,\n  max: Infinity\n};\nfunction useCounter() {\n  let initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let options = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    min,\n    max\n  } = __spreadValues(__spreadValues({}, DEFAULT_OPTIONS), options);\n  const [count, setCount] = useState(clamp(initialValue, min, max));\n  const increment = () => setCount(current => clamp(current + 1, min, max));\n  const decrement = () => setCount(current => clamp(current - 1, min, max));\n  const set = value => setCount(clamp(value, min, max));\n  const reset = () => setCount(clamp(initialValue, min, max));\n  return [count, {\n    increment,\n    decrement,\n    set,\n    reset\n  }];\n}\nexport { useCounter };","map":{"version":3,"mappings":";;AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAc;AACrC,IAAIC,mBAAmB,GAAGF,MAAM,CAACG,qBAAqB;AACtD,IAAIC,YAAY,GAAGJ,MAAM,CAACK,SAAS,CAACC,cAAc;AAClD,IAAIC,YAAY,GAAGP,MAAM,CAACK,SAAS,CAACG,oBAAoB;AACxD,IAAIC,eAAe,GAAG,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAKD,GAAG,IAAID,GAAG,GAAGX,SAAS,CAACW,GAAG,EAAEC,GAAG,EAAE;EAAEE,UAAU,EAAE,IAAI;EAAEC,YAAY,EAAE,IAAI;EAAEC,QAAQ,EAAE,IAAI;EAAEH;AAAK,CAAE,CAAC,GAAGF,GAAG,CAACC,GAAG,CAAC,GAAGC,KAAK;AAC/J,IAAII,cAAc,GAAG,CAACC,CAAC,EAAEC,CAAC,KAAK;EAC7B,KAAK,IAAIC,IAAI,IAAID,CAAC,KAAKA,CAAC,GAAG,EAAE,CAAC,EAC5B,IAAId,YAAY,CAACgB,IAAI,CAACF,CAAC,EAAEC,IAAI,CAAC,EAC5BV,eAAe,CAACQ,CAAC,EAAEE,IAAI,EAAED,CAAC,CAACC,IAAI,CAAC,CAAC;EACrC,IAAIjB,mBAAmB,EACrB,KAAK,IAAIiB,IAAI,IAAIjB,mBAAmB,CAACgB,CAAC,CAAC,EAAE;IACvC,IAAIX,YAAY,CAACa,IAAI,CAACF,CAAC,EAAEC,IAAI,CAAC,EAC5BV,eAAe,CAACQ,CAAC,EAAEE,IAAI,EAAED,CAAC,CAACC,IAAI,CAAC,CAAC;EACzC;EACE,OAAOF,CAAC;AACV,CAAC;AAGD,MAAMI,eAAe,GAAG;EACtBC,GAAG,EAAE,CAACC,QAAQ;EACdC,GAAG,EAAED;AACP,CAAC;AACM,SAASE,UAAU,GAA4B;EAAA,IAA3BC,YAAY,uEAAG,CAAC;EAAA,IAAEC,OAAO;EAClD,MAAM;IAAEL,GAAG;IAAEE;EAAG,CAAE,GAAGR,cAAc,CAACA,cAAc,CAAC,EAAE,EAAEK,eAAe,CAAC,EAAEM,OAAO,CAAC;EACjF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAACC,KAAK,CAACL,YAAY,EAAEJ,GAAG,EAAEE,GAAG,CAAC,CAAC;EACjE,MAAMQ,SAAS,GAAG,MAAMH,QAAQ,CAAEI,OAAO,IAAKF,KAAK,CAACE,OAAO,GAAG,CAAC,EAAEX,GAAG,EAAEE,GAAG,CAAC,CAAC;EAC3E,MAAMU,SAAS,GAAG,MAAML,QAAQ,CAAEI,OAAO,IAAKF,KAAK,CAACE,OAAO,GAAG,CAAC,EAAEX,GAAG,EAAEE,GAAG,CAAC,CAAC;EAC3E,MAAMW,GAAG,GAAIvB,KAAK,IAAKiB,QAAQ,CAACE,KAAK,CAACnB,KAAK,EAAEU,GAAG,EAAEE,GAAG,CAAC,CAAC;EACvD,MAAMY,KAAK,GAAG,MAAMP,QAAQ,CAACE,KAAK,CAACL,YAAY,EAAEJ,GAAG,EAAEE,GAAG,CAAC,CAAC;EAC3D,OAAO,CAACI,KAAK,EAAE;IAAEI,SAAS;IAAEE,SAAS;IAAEC,GAAG;IAAEC;EAAK,CAAE,CAAC;AACtD","names":["__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","DEFAULT_OPTIONS","min","Infinity","max","useCounter","initialValue","options","count","setCount","useState","clamp","increment","current","decrement","set","reset"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\node_modules\\@mantine\\hooks\\src\\use-counter\\use-counter.ts"],"sourcesContent":["import { useState } from 'react';\nimport { clamp } from '../utils';\n\nconst DEFAULT_OPTIONS = {\n  min: -Infinity,\n  max: Infinity,\n};\n\nexport function useCounter(initialValue = 0, options?: Partial<{ min: number; max: number }>) {\n  const { min, max } = { ...DEFAULT_OPTIONS, ...options };\n  const [count, setCount] = useState<number>(clamp(initialValue, min, max));\n\n  const increment = () => setCount((current) => clamp(current + 1, min, max));\n  const decrement = () => setCount((current) => clamp(current - 1, min, max));\n  const set = (value: number) => setCount(clamp(value, min, max));\n  const reset = () => setCount(clamp(initialValue, min, max));\n\n  return [count, { increment, decrement, set, reset }] as const;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}