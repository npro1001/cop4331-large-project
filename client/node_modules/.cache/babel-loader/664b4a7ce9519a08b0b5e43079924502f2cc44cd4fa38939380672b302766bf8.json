{"ast":null,"code":"import React from 'react';\nimport { getSafeId } from '@mantine/utils';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { AccordionContextProvider } from './Accordion.context.js';\nimport { ACCORDION_ERRORS } from './Accordion.errors.js';\nfunction AccordionProvider(_ref) {\n  let {\n    children,\n    multiple,\n    value,\n    defaultValue,\n    onChange,\n    id,\n    loop,\n    transitionDuration,\n    disableChevronRotation,\n    chevronPosition,\n    chevronSize,\n    order,\n    chevron,\n    variant,\n    radius\n  } = _ref;\n  const uid = useId(id);\n  const [_value, handleChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? [] : null,\n    onChange\n  });\n  const isItemActive = itemValue => Array.isArray(_value) ? _value.includes(itemValue) : itemValue === _value;\n  const handleItemChange = itemValue => {\n    const nextValue = Array.isArray(_value) ? _value.includes(itemValue) ? _value.filter(selectedValue => selectedValue !== itemValue) : [..._value, itemValue] : itemValue === _value ? null : itemValue;\n    handleChange(nextValue);\n  };\n  return /* @__PURE__ */React.createElement(AccordionContextProvider, {\n    value: {\n      isItemActive,\n      onChange: handleItemChange,\n      getControlId: getSafeId(`${uid}-control`, ACCORDION_ERRORS.value),\n      getRegionId: getSafeId(`${uid}-panel`, ACCORDION_ERRORS.value),\n      transitionDuration,\n      disableChevronRotation,\n      chevronPosition,\n      chevronSize,\n      order,\n      chevron,\n      loop,\n      variant,\n      radius\n    }\n  }, children);\n}\nexport { AccordionProvider };","map":{"version":3,"mappings":";;;;;AAKO,SAASA,iBAAiB,OAgB9B;EAAA,IAhB+B;IAChCC,QAAQ;IACRC,QAAQ;IACRC,KAAK;IACLC,YAAY;IACZC,QAAQ;IACRC,EAAE;IACFC,IAAI;IACJC,kBAAkB;IAClBC,sBAAsB;IACtBC,eAAe;IACfC,WAAW;IACXC,KAAK;IACLC,OAAO;IACPC,OAAO;IACPC;EACF,CAAC;EACC,MAAMC,GAAG,GAAGC,KAAK,CAACX,EAAE,CAAC;EACrB,MAAM,CAACY,MAAM,EAAEC,YAAY,CAAC,GAAGC,eAAe,CAAC;IAC7CjB,KAAK;IACLC,YAAY;IACZiB,UAAU,EAAEnB,QAAQ,GAAG,EAAE,GAAG,IAAI;IAChCG;EACJ,CAAG,CAAC;EACF,MAAMiB,YAAY,GAAIC,SAAS,IAAKC,KAAK,CAACC,OAAO,CAACP,MAAM,CAAC,GAAGA,MAAM,CAACQ,QAAQ,CAACH,SAAS,CAAC,GAAGA,SAAS,KAAKL,MAAM;EAC7G,MAAMS,gBAAgB,GAAIJ,SAAS,IAAK;IACtC,MAAMK,SAAS,GAAGJ,KAAK,CAACC,OAAO,CAACP,MAAM,CAAC,GAAGA,MAAM,CAACQ,QAAQ,CAACH,SAAS,CAAC,GAAGL,MAAM,CAACW,MAAM,CAAEC,aAAa,IAAKA,aAAa,KAAKP,SAAS,CAAC,GAAG,CAAC,GAAGL,MAAM,EAAEK,SAAS,CAAC,GAAGA,SAAS,KAAKL,MAAM,GAAG,IAAI,GAAGK,SAAS;IACvMJ,YAAY,CAACS,SAAS,CAAC;EAC3B,CAAG;EACD,sBAAuBG,KAAK,CAACC,aAAa,CAACC,wBAAwB,EAAE;IACnE9B,KAAK,EAAE;MACLmB,YAAY;MACZjB,QAAQ,EAAEsB,gBAAgB;MAC1BO,YAAY,EAAEC,SAAS,CAAE,GAAEnB,GAAI,UAAS,EAAEoB,gBAAgB,CAACjC,KAAK,CAAC;MACjEkC,WAAW,EAAEF,SAAS,CAAE,GAAEnB,GAAI,QAAO,EAAEoB,gBAAgB,CAACjC,KAAK,CAAC;MAC9DK,kBAAkB;MAClBC,sBAAsB;MACtBC,eAAe;MACfC,WAAW;MACXC,KAAK;MACLC,OAAO;MACPN,IAAI;MACJO,OAAO;MACPC;IACN;EACA,CAAG,EAAEd,QAAQ,CAAC;AACd","names":["AccordionProvider","children","multiple","value","defaultValue","onChange","id","loop","transitionDuration","disableChevronRotation","chevronPosition","chevronSize","order","chevron","variant","radius","uid","useId","_value","handleChange","useUncontrolled","finalValue","isItemActive","itemValue","Array","isArray","includes","handleItemChange","nextValue","filter","selectedValue","React","createElement","AccordionContextProvider","getControlId","getSafeId","ACCORDION_ERRORS","getRegionId"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\node_modules\\@mantine\\core\\src\\Accordion\\AccordionProvider.tsx"],"sourcesContent":["import React from 'react';\nimport { getSafeId } from '@mantine/utils';\nimport { useUncontrolled, useId } from '@mantine/hooks';\nimport { MantineNumberSize } from '@mantine/styles';\nimport { AccordionContextProvider } from './Accordion.context';\nimport {\n  AccordionValue,\n  AccordionChevronPosition,\n  AccordionHeadingOrder,\n  AccordionVariant,\n} from './Accordion.types';\nimport { ACCORDION_ERRORS } from './Accordion.errors';\n\nexport interface AccordionProviderProps<Multiple extends boolean = false> {\n  /** Base id, used to generate ids that connect labels with controls, by default generated randomly */\n  id?: string;\n\n  /** Determines whether arrow key presses should loop though items (first to last and last to first) */\n  loop?: boolean;\n\n  /** Accordion content */\n  children: React.ReactNode;\n\n  /** Determines whether multiple items can be opened at a time */\n  multiple?: Multiple;\n\n  /** Value for controlled component */\n  value?: AccordionValue<Multiple>;\n\n  /** Default value for uncontrolled component */\n  defaultValue?: AccordionValue<Multiple>;\n\n  /** Callback for controlled component */\n  onChange?(value: AccordionValue<Multiple>): void;\n\n  /** Transition duration in ms, set 0 to disable transitions */\n  transitionDuration?: number;\n\n  /** Determines whether chevron rotation should be disabled */\n  disableChevronRotation?: boolean;\n\n  /** Determines position of the chevron */\n  chevronPosition?: AccordionChevronPosition;\n\n  /** Chevron size in px */\n  chevronSize?: number;\n\n  /** Heading order, has no effect on visuals */\n  order?: AccordionHeadingOrder;\n\n  /** Replaces chevron on all items */\n  chevron?: React.ReactNode;\n\n  /** Controls visuals */\n  variant?: AccordionVariant;\n\n  /** border-radius from theme.radius or number to set value in px, will not be applied to default variant  */\n  radius?: MantineNumberSize;\n}\n\nexport function AccordionProvider<Multiple extends boolean = false>({\n  children,\n  multiple,\n  value,\n  defaultValue,\n  onChange,\n  id,\n  loop,\n  transitionDuration,\n  disableChevronRotation,\n  chevronPosition,\n  chevronSize,\n  order,\n  chevron,\n  variant,\n  radius,\n}: AccordionProviderProps<Multiple>) {\n  const uid = useId(id);\n  const [_value, handleChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? ([] as any) : null,\n    onChange,\n  });\n\n  const isItemActive = (itemValue: string) =>\n    Array.isArray(_value) ? _value.includes(itemValue) : itemValue === _value;\n\n  const handleItemChange = (itemValue: string) => {\n    const nextValue: AccordionValue<Multiple> = Array.isArray(_value)\n      ? _value.includes(itemValue)\n        ? _value.filter((selectedValue) => selectedValue !== itemValue)\n        : [..._value, itemValue]\n      : itemValue === _value\n      ? null\n      : (itemValue as any);\n\n    handleChange(nextValue);\n  };\n\n  return (\n    <AccordionContextProvider\n      value={{\n        isItemActive,\n        onChange: handleItemChange,\n        getControlId: getSafeId(`${uid}-control`, ACCORDION_ERRORS.value),\n        getRegionId: getSafeId(`${uid}-panel`, ACCORDION_ERRORS.value),\n        transitionDuration,\n        disableChevronRotation,\n        chevronPosition,\n        chevronSize,\n        order,\n        chevron,\n        loop,\n        variant,\n        radius,\n      }}\n    >\n      {children}\n    </AccordionContextProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}