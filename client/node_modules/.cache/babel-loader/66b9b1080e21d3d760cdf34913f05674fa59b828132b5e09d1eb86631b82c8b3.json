{"ast":null,"code":"// For making HTTP request and sending data in localStorage\n\nimport axios from 'axios';\nconst API_URL = '/api/users/';\n\n// Register user\nconst register = async userData => {\n  const registerResponse = await axios.post(API_URL, userData);\n  if (registerResponse.data) {\n    const verifyResponse = await axios.post(API_URL + 'confirm', userData);\n    if (verifyResponse.data) {\n      // localStorage.setItem('user', JSON.stringify(response.data)) \n      // Idk ab this... should only be in login\n      return verifyResponse.data;\n    }\n  }\n  return registerResponse.data;\n};\n\n// Login user\nconst login = async userData => {\n  const response = await axios.post(API_URL + 'login', userData);\n  if (response.data) {\n    localStorage.setItem('user', JSON.stringify(response.data));\n  }\n  return response.data;\n};\n\n// Logout user - easy way\nconst logout = () => {\n  localStorage.removeItem('user');\n};\n\n// Reset user password\nconst reset = async (passwordToken, password) => {\n  let pass = {\n    passwordToken: passwordToken,\n    password: password\n  };\n  const response = await axios.put(API_URL + \"reset\", pass);\n  if (response.data) {\n    return response.data;\n  }\n  return null;\n};\nconst update = async (name, username, anthemId, anthemTitle, anthemArtist1, anthemImage, anthemUrl, token) => {\n  const response = await axios({\n    method: 'put',\n    url: API_URL + 'update',\n    data: name,\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (response.data) {\n    //! This is potentially dangerous - response is not always good\n    // localStorage.setItem('user', JSON.stringify(response.data))\n    return response.data;\n  }\n  return null;\n};\nconst getMe = async token => {\n  const response = await axios({\n    method: 'GET',\n    url: API_URL + 'me',\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (response.data) {\n    //! This is potentially dangerous - response is not always good\n    // localStorage.setItem('user', JSON.stringify(response.data))\n    return response.data;\n  }\n  return null;\n};\nconst uploadPFP = async (picture, token) => {\n  const response = await axios({\n    method: \"post\",\n    url: API_URL + 'uploadProfilePic',\n    data: picture,\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  console.log({\n    response\n  });\n  if (response.data) {\n    return response.data;\n  }\n  return null;\n};\n\n//follow user\nconst follow = async (targetUserId, user, token) => {\n  const response = await axios({\n    method: \"put\",\n    url: API_URL + targetUserId + '/follow',\n    data: {\n      currentUserId: user\n    },\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (response.data) {\n    return response.data;\n  }\n  return null;\n};\nconst unfollow = async (targetUserId, user, token) => {\n  const response = await axios({\n    method: \"put\",\n    url: API_URL + targetUserId + '/unfollow',\n    data: {\n      currentUserId: user\n    },\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (response.data) {\n    return response.data;\n  }\n  return null;\n};\nconst passRequest = async email => {\n  console.log(email);\n  const response = await axios.post(API_URL + \"resetEmail\", {\n    email: email\n  });\n  if (response.data) {\n    return response.data;\n  }\n  return null;\n};\nconst putTopArtistService = async (topArtist, token) => {\n  const response = await axios({\n    method: \"put\",\n    url: API_URL + 'putTopArtist',\n    data: topArtist,\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (response.data) {\n    return response.data;\n  }\n  return null;\n};\nconst getTopArtistService = async (userId, token) => {\n  const response = await axios({\n    method: \"get\",\n    url: API_URL + userId + '/putTopArtist',\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (response.data) {\n    return response.data;\n  }\n  return null;\n};\nconst authService = {\n  register,\n  login,\n  logout,\n  reset,\n  update,\n  getMe,\n  uploadPFP,\n  follow,\n  unfollow,\n  passRequest,\n  putTopArtistService,\n  getTopArtistService\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","register","userData","registerResponse","post","data","verifyResponse","login","response","localStorage","setItem","JSON","stringify","logout","removeItem","reset","passwordToken","password","pass","put","update","name","username","anthemId","anthemTitle","anthemArtist1","anthemImage","anthemUrl","token","method","url","headers","Authorization","getMe","uploadPFP","picture","console","log","follow","targetUserId","user","currentUserId","unfollow","passRequest","email","putTopArtistService","topArtist","getTopArtistService","userId","authService"],"sources":["C:/Users/rff96/Documents/GitHub/cop4331-large-project/client/src/features/auth/authService.js"],"sourcesContent":["// For making HTTP request and sending data in localStorage\r\n\r\nimport axios from 'axios'\r\n\r\nconst API_URL = '/api/users/'\r\n\r\n// Register user\r\nconst register = async (userData) => {\r\n    const registerResponse = await axios.post(API_URL, userData)\r\n    if (registerResponse.data) {\r\n        const verifyResponse = await axios.post(API_URL + 'confirm', userData)\r\n        if (verifyResponse.data) {\r\n            // localStorage.setItem('user', JSON.stringify(response.data)) \r\n            // Idk ab this... should only be in login\r\n            return verifyResponse.data\r\n        }\r\n    }\r\n    return registerResponse.data\r\n}\r\n\r\n// Login user\r\nconst login = async (userData) => {\r\n    const response = await axios.post(API_URL + 'login', userData)\r\n    if (response.data) {\r\n        localStorage.setItem('user', JSON.stringify(response.data))\r\n    }\r\n    return response.data\r\n}\r\n\r\n// Logout user - easy way\r\nconst logout = () => {\r\n    localStorage.removeItem('user')\r\n}\r\n\r\n// Reset user password\r\nconst reset = async (passwordToken, password) => {\r\n\r\n    let pass = {\r\n        passwordToken: passwordToken,\r\n        password: password\r\n    }\r\n    \r\n    const response = await axios.put(API_URL + \"reset\", pass)\r\n    if (response.data) {\r\n      \r\n        return response.data\r\n    }\r\n    return null;\r\n}\r\n\r\nconst update = async (name, username, anthemId, anthemTitle, anthemArtist1, anthemImage, anthemUrl, token) => {\r\n\r\n    const response = await axios({\r\n        method: 'put',\r\n        url: API_URL + 'update',\r\n        data: name,\r\n        headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n\r\n    if (response.data) {\r\n\r\n        //! This is potentially dangerous - response is not always good\r\n        // localStorage.setItem('user', JSON.stringify(response.data))\r\n        return response.data\r\n    }\r\n    return null;\r\n}\r\n\r\nconst getMe = async (token) => {\r\n    const response = await axios({\r\n        method: 'GET',\r\n        url: API_URL + 'me',\r\n        headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n\r\n    if (response.data) {\r\n\r\n        //! This is potentially dangerous - response is not always good\r\n        // localStorage.setItem('user', JSON.stringify(response.data))\r\n        return response.data\r\n    }\r\n    return null;\r\n}\r\n\r\nconst uploadPFP = async (picture, token) => {\r\n    const response = await axios({\r\n        method: \"post\",\r\n        url: API_URL + 'uploadProfilePic', \r\n        data: picture,\r\n        headers:{\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n    console.log({ response });\r\n    if (response.data) {\r\n        return response.data\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n//follow user\r\nconst follow = async (targetUserId, user, token) => {\r\n\r\n    const response = await axios({\r\n        method: \"put\",\r\n        url: API_URL + targetUserId + '/follow', \r\n        data: {\r\n            currentUserId: user\r\n        },\r\n        headers:{\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n    if (response.data) {\r\n        return response.data\r\n    }\r\n    return null;\r\n}\r\n\r\nconst unfollow = async (targetUserId, user, token) => {\r\n\r\n    const response = await axios({\r\n        method: \"put\",\r\n        url: API_URL + targetUserId + '/unfollow', \r\n        data: {\r\n            currentUserId: user\r\n        },\r\n        headers:{\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n    if (response.data) {\r\n        return response.data\r\n    }\r\n    return null;\r\n} \r\n\r\nconst passRequest = async (email) => {\r\n\r\n    console.log(email)\r\n    const response = await axios.post(API_URL + \"resetEmail\", {email: email})\r\n    if (response.data) {\r\n        return response.data\r\n    }\r\n    return null;\r\n} \r\n\r\nconst putTopArtistService = async (topArtist, token) => {\r\n\r\n    const response = await axios({\r\n        method: \"put\",\r\n        url: API_URL + 'putTopArtist', \r\n        data: topArtist,\r\n        headers:{\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n    if (response.data) {\r\n        return response.data\r\n    }\r\n    return null;\r\n} \r\n\r\nconst getTopArtistService = async (userId, token) => {\r\n\r\n    const response = await axios({\r\n        method: \"get\",\r\n        url: API_URL + userId + '/putTopArtist', \r\n        headers:{\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n    if (response.data) {\r\n        return response.data\r\n    }\r\n    return null;\r\n} \r\nconst authService = {\r\n    register,\r\n    login,\r\n    logout,\r\n    reset,\r\n    update,\r\n    getMe,\r\n    uploadPFP,\r\n    follow,\r\n    unfollow,\r\n    passRequest,\r\n    putTopArtistService,\r\n    getTopArtistService\r\n\r\n}\r\n\r\nexport default authService"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}