{"ast":null,"code":"function createAriaHider(containerNode) {\n  let selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"body > :not(script)\";\n  const rootNodes = Array.from(document.querySelectorAll(selector)).map(node => {\n    if (node.contains(containerNode)) {\n      return void 0;\n    }\n    const ariaHidden = node.getAttribute(\"aria-hidden\");\n    if (ariaHidden === null || ariaHidden === \"false\") {\n      node.setAttribute(\"aria-hidden\", \"true\");\n    }\n    return {\n      node,\n      ariaHidden\n    };\n  });\n  return () => {\n    rootNodes.forEach(item => {\n      if (!item) {\n        return;\n      }\n      if (item.ariaHidden === null) {\n        item.node.removeAttribute(\"aria-hidden\");\n      } else {\n        item.node.setAttribute(\"aria-hidden\", item.ariaHidden);\n      }\n    });\n  };\n}\nexport { createAriaHider };","map":{"version":3,"mappings":"AAAO,SAASA,eAAe,CAACC,aAAa,EAAoC;EAAA,IAAlCC,QAAQ,uEAAG,qBAAqB;EAC7E,MAAMC,SAAS,GAAGC,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACC,gBAAgB,CAACL,QAAQ,CAAC,CAAC,CAACM,GAAG,CAAEC,IAAI,IAAK;IAC9E,IAAIA,IAAI,CAACC,QAAQ,CAACT,aAAa,CAAC,EAAE;MAChC,OAAO,KAAK,CAAC;IACnB;IACI,MAAMU,UAAU,GAAGF,IAAI,CAACG,YAAY,CAAC,aAAa,CAAC;IACnD,IAAID,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,OAAO,EAAE;MACjDF,IAAI,CAACI,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;IAC9C;IACI,OAAO;MAAEJ,IAAI;MAAEE;IAAU,CAAE;EAC/B,CAAG,CAAC;EACF,OAAO,MAAM;IACXR,SAAS,CAACW,OAAO,CAAEC,IAAI,IAAK;MAC1B,IAAI,CAACA,IAAI,EAAE;QACT;MACR;MACM,IAAIA,IAAI,CAACJ,UAAU,KAAK,IAAI,EAAE;QAC5BI,IAAI,CAACN,IAAI,CAACO,eAAe,CAAC,aAAa,CAAC;MAChD,CAAO,MAAM;QACLD,IAAI,CAACN,IAAI,CAACI,YAAY,CAAC,aAAa,EAAEE,IAAI,CAACJ,UAAU,CAAC;MAC9D;IACA,CAAK,CAAC;EACN,CAAG;AACH","names":["createAriaHider","containerNode","selector","rootNodes","Array","from","document","querySelectorAll","map","node","contains","ariaHidden","getAttribute","setAttribute","forEach","item","removeAttribute"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\node_modules\\@mantine\\hooks\\src\\use-focus-trap\\create-aria-hider.ts"],"sourcesContent":["type Value = {\n  node: HTMLElement;\n  ariaHidden: string;\n};\n\nexport function createAriaHider(\n  containerNode: HTMLElement,\n  selector: string = 'body > :not(script)'\n) {\n  const rootNodes: Value[] = Array.from<HTMLElement>(document.querySelectorAll(selector)).map(\n    (node) => {\n      if (node.contains(containerNode)) {\n        return undefined;\n      }\n\n      const ariaHidden = node.getAttribute('aria-hidden');\n\n      if (ariaHidden === null || ariaHidden === 'false') {\n        node.setAttribute('aria-hidden', 'true');\n      }\n\n      return { node, ariaHidden };\n    }\n  );\n\n  return () => {\n    rootNodes.forEach((item) => {\n      if (!item) {\n        return;\n      }\n\n      if (item.ariaHidden === null) {\n        item.node.removeAttribute('aria-hidden');\n      } else {\n        item.node.setAttribute('aria-hidden', item.ariaHidden);\n      }\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}