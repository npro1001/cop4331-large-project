{"ast":null,"code":"import React, { useState } from 'react';\nimport { useIsomorphicEffect } from '../use-isomorphic-effect/use-isomorphic-effect.js';\nconst randomId = () => `mantine-${Math.random().toString(36).slice(2, 11)}`;\nconst useReactId = React[\"useId\".toString()] || (() => void 0);\nfunction useClientId() {\n  const [uuid, setUuid] = useState(\"\");\n  useIsomorphicEffect(() => {\n    setUuid(randomId());\n  }, []);\n  return uuid;\n}\nfunction getReactId() {\n  const id = useReactId();\n  return id ? `mantine-${id.replace(/:/g, \"\")}` : \"\";\n}\nfunction useId(staticId) {\n  return typeof staticId === \"string\" ? staticId : getReactId() || useClientId();\n}\nexport { useId };","map":{"version":3,"mappings":";;AAEA,MAAMA,QAAQ,GAAG,MAAO,WAAUC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAE,EAAC;AAC3E,MAAMC,UAAU,GAAGC,KAAK,CAAC,OAAO,CAACH,QAAQ,EAAE,CAAC,KAAK,MAAM,KAAK,CAAC,CAAC;AAC9D,SAASI,WAAW,GAAG;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EACpCC,mBAAmB,CAAC,MAAM;IACxBF,OAAO,CAACT,QAAQ,EAAE,CAAC;EACvB,CAAG,EAAE,EAAE,CAAC;EACN,OAAOQ,IAAI;AACb;AACA,SAASI,UAAU,GAAG;EACpB,MAAMC,EAAE,GAAGR,UAAU,EAAE;EACvB,OAAOQ,EAAE,GAAI,WAAUA,EAAE,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAE,EAAC,GAAG,EAAE;AACpD;AACO,SAASC,KAAK,CAACC,QAAQ,EAAE;EAC9B,OAAO,OAAOA,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAGJ,UAAU,EAAE,IAAIL,WAAW,EAAE;AAChF","names":["randomId","Math","random","toString","slice","useReactId","React","useClientId","uuid","setUuid","useState","useIsomorphicEffect","getReactId","id","replace","useId","staticId"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\node_modules\\@mantine\\hooks\\src\\use-id\\use-id.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport { useIsomorphicEffect } from '../use-isomorphic-effect/use-isomorphic-effect';\n\nconst randomId = () => `mantine-${Math.random().toString(36).slice(2, 11)}`;\n\nconst useReactId: () => string | undefined =\n  (React as any)['useId'.toString()] || (() => undefined);\n\nfunction useClientId() {\n  const [uuid, setUuid] = useState('');\n\n  useIsomorphicEffect(() => {\n    setUuid(randomId());\n  }, []);\n\n  return uuid;\n}\n\nfunction getReactId() {\n  const id = useReactId();\n  return id ? `mantine-${id.replace(/:/g, '')}` : '';\n}\n\nexport function useId(staticId?: string) {\n  return typeof staticId === 'string' ? staticId : getReactId() || useClientId();\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}