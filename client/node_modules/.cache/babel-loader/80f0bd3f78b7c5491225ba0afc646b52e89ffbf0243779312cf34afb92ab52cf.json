{"ast":null,"code":"import React, { useState, useRef, useEffect } from 'react';\nimport { useMove, clampUseMovePosition } from '@mantine/hooks';\nimport { Thumb } from '../Thumb/Thumb.js';\nimport useStyles from './Saturation.styles.js';\nimport { convertHsvaTo } from '../converters/converters.js';\nfunction Saturation(_ref) {\n  let {\n    value,\n    onChange,\n    onChangeEnd,\n    focusable = true,\n    __staticSelector = \"saturation\",\n    size,\n    color,\n    saturationLabel,\n    classNames,\n    styles,\n    unstyled\n  } = _ref;\n  const {\n    classes\n  } = useStyles({\n    size\n  }, {\n    classNames,\n    styles,\n    name: __staticSelector,\n    unstyled\n  });\n  const [position, setPosition] = useState({\n    x: value.s / 100,\n    y: 1 - value.v / 100\n  });\n  const positionRef = useRef(position);\n  const {\n    ref\n  } = useMove(_ref2 => {\n    let {\n      x,\n      y\n    } = _ref2;\n    positionRef.current = {\n      x,\n      y\n    };\n    onChange({\n      s: Math.round(x * 100),\n      v: Math.round((1 - y) * 100)\n    });\n  }, {\n    onScrubEnd: () => {\n      const {\n        x,\n        y\n      } = positionRef.current;\n      onChangeEnd({\n        s: Math.round(x * 100),\n        v: Math.round((1 - y) * 100)\n      });\n    }\n  });\n  useEffect(() => {\n    setPosition({\n      x: value.s / 100,\n      y: 1 - value.v / 100\n    });\n  }, [value.s, value.v]);\n  const handleArrow = (event, pos) => {\n    event.preventDefault();\n    const _position = clampUseMovePosition(pos);\n    onChange({\n      s: Math.round(_position.x * 100),\n      v: Math.round((1 - _position.y) * 100)\n    });\n    onChangeEnd({\n      s: Math.round(_position.x * 100),\n      v: Math.round((1 - _position.y) * 100)\n    });\n  };\n  const handleKeyDown = event => {\n    switch (event.key) {\n      case \"ArrowUp\":\n        {\n          handleArrow(event, {\n            y: position.y - 0.05,\n            x: position.x\n          });\n          break;\n        }\n      case \"ArrowDown\":\n        {\n          handleArrow(event, {\n            y: position.y + 0.05,\n            x: position.x\n          });\n          break;\n        }\n      case \"ArrowRight\":\n        {\n          handleArrow(event, {\n            x: position.x + 0.05,\n            y: position.y\n          });\n          break;\n        }\n      case \"ArrowLeft\":\n        {\n          handleArrow(event, {\n            x: position.x - 0.05,\n            y: position.y\n          });\n          break;\n        }\n    }\n  };\n  return /* @__PURE__ */React.createElement(\"div\", {\n    className: classes.saturation,\n    ref,\n    role: \"slider\",\n    \"aria-label\": saturationLabel,\n    \"aria-valuenow\": position.x,\n    \"aria-valuetext\": convertHsvaTo(\"rgba\", value),\n    tabIndex: focusable ? 0 : -1,\n    onKeyDown: handleKeyDown\n  }, /* @__PURE__ */React.createElement(\"div\", {\n    className: classes.saturationOverlay,\n    style: {\n      backgroundColor: `hsl(${value.h}, 100%, 50%)`\n    }\n  }), /* @__PURE__ */React.createElement(\"div\", {\n    className: classes.saturationOverlay,\n    style: {\n      backgroundImage: \"linear-gradient(90deg, #fff, transparent)\"\n    }\n  }), /* @__PURE__ */React.createElement(\"div\", {\n    className: classes.saturationOverlay,\n    style: {\n      backgroundImage: \"linear-gradient(0deg, #000, transparent)\"\n    }\n  }), /* @__PURE__ */React.createElement(Thumb, {\n    __staticSelector,\n    classNames,\n    styles,\n    position,\n    className: classes.saturationThumb,\n    style: {\n      backgroundColor: color\n    },\n    size\n  }));\n}\nSaturation.displayName = \"@mantine/core/Saturation\";\nexport { Saturation };","map":{"version":3,"mappings":"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","names":["Saturation","value","onChange","onChangeEnd","focusable","__staticSelector","size","color","saturationLabel","classNames","styles","unstyled","classes","useStyles","name","position","setPosition","useState","x","s","y","v","positionRef","useRef","ref","useMove","current","Math","round","onScrubEnd","useEffect","handleArrow","event","pos","preventDefault","_position","clampUseMovePosition","handleKeyDown","key","React","createElement","className","saturation","role","convertHsvaTo","tabIndex","onKeyDown","saturationOverlay","style","backgroundColor","h","backgroundImage","Thumb","saturationThumb","displayName"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\node_modules\\@mantine\\core\\src\\ColorPicker\\Saturation\\Saturation.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useMove, clampUseMovePosition, UseMovePosition } from '@mantine/hooks';\nimport { DefaultProps, MantineSize, Selectors } from '@mantine/styles';\nimport { HsvaColor } from '../types';\nimport { Thumb, ThumbStylesNames } from '../Thumb/Thumb';\nimport useStyles from './Saturation.styles';\nimport { convertHsvaTo } from '../converters';\n\nexport type SaturationStylesNames =\n  | Exclude<Selectors<typeof useStyles>, 'saturationOverlay' | 'saturationThumb'>\n  | ThumbStylesNames;\n\ninterface SaturationProps extends DefaultProps<SaturationStylesNames> {\n  value: HsvaColor;\n  onChange(color: Partial<HsvaColor>): void;\n  onChangeEnd(color: Partial<HsvaColor>): void;\n  saturationLabel?: string;\n  size: MantineSize;\n  color: string;\n  focusable?: boolean;\n  __staticSelector?: string;\n}\n\nexport function Saturation({\n  value,\n  onChange,\n  onChangeEnd,\n  focusable = true,\n  __staticSelector = 'saturation',\n  size,\n  color,\n  saturationLabel,\n  classNames,\n  styles,\n  unstyled,\n}: SaturationProps) {\n  const { classes } = useStyles({ size }, { classNames, styles, name: __staticSelector, unstyled });\n  const [position, setPosition] = useState({ x: value.s / 100, y: 1 - value.v / 100 });\n  const positionRef = useRef(position);\n\n  const { ref } = useMove(\n    ({ x, y }) => {\n      positionRef.current = { x, y };\n      onChange({ s: Math.round(x * 100), v: Math.round((1 - y) * 100) });\n    },\n    {\n      onScrubEnd: () => {\n        const { x, y } = positionRef.current;\n        onChangeEnd({ s: Math.round(x * 100), v: Math.round((1 - y) * 100) });\n      },\n    }\n  );\n\n  useEffect(() => {\n    setPosition({ x: value.s / 100, y: 1 - value.v / 100 });\n  }, [value.s, value.v]);\n\n  const handleArrow = (event: React.KeyboardEvent<HTMLDivElement>, pos: UseMovePosition) => {\n    event.preventDefault();\n    const _position = clampUseMovePosition(pos);\n    onChange({ s: Math.round(_position.x * 100), v: Math.round((1 - _position.y) * 100) });\n    onChangeEnd({ s: Math.round(_position.x * 100), v: Math.round((1 - _position.y) * 100) });\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    switch (event.key) {\n      case 'ArrowUp': {\n        handleArrow(event, { y: position.y - 0.05, x: position.x });\n        break;\n      }\n\n      case 'ArrowDown': {\n        handleArrow(event, { y: position.y + 0.05, x: position.x });\n        break;\n      }\n\n      case 'ArrowRight': {\n        handleArrow(event, { x: position.x + 0.05, y: position.y });\n        break;\n      }\n\n      case 'ArrowLeft': {\n        handleArrow(event, { x: position.x - 0.05, y: position.y });\n        break;\n      }\n    }\n  };\n\n  return (\n    <div\n      className={classes.saturation}\n      ref={ref}\n      role=\"slider\"\n      aria-label={saturationLabel}\n      aria-valuenow={position.x}\n      aria-valuetext={convertHsvaTo('rgba', value)}\n      tabIndex={focusable ? 0 : -1}\n      onKeyDown={handleKeyDown}\n    >\n      <div\n        className={classes.saturationOverlay}\n        style={{ backgroundColor: `hsl(${value.h}, 100%, 50%)` }}\n      />\n\n      <div\n        className={classes.saturationOverlay}\n        style={{ backgroundImage: 'linear-gradient(90deg, #fff, transparent)' }}\n      />\n\n      <div\n        className={classes.saturationOverlay}\n        style={{ backgroundImage: 'linear-gradient(0deg, #000, transparent)' }}\n      />\n\n      <Thumb\n        __staticSelector={__staticSelector}\n        classNames={classNames}\n        styles={styles}\n        position={position}\n        className={classes.saturationThumb}\n        style={{ backgroundColor: color }}\n        size={size}\n      />\n    </div>\n  );\n}\n\nSaturation.displayName = '@mantine/core/Saturation';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}