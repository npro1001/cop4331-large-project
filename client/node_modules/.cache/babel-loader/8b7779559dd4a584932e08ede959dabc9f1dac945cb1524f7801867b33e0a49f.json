{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\nfunction useInterval(fn, interval) {\n  const [active, setActive] = useState(false);\n  const intervalRef = useRef();\n  const fnRef = useRef();\n  useEffect(() => {\n    fnRef.current = fn;\n  }, [fn]);\n  const start = () => {\n    setActive(old => {\n      if (!old && !intervalRef.current) {\n        intervalRef.current = window.setInterval(fnRef.current, interval);\n      }\n      return true;\n    });\n  };\n  const stop = () => {\n    setActive(false);\n    window.clearInterval(intervalRef.current);\n    intervalRef.current = void 0;\n  };\n  const toggle = () => {\n    if (active) {\n      stop();\n    } else {\n      start();\n    }\n  };\n  return {\n    start,\n    stop,\n    toggle,\n    active\n  };\n}\nexport { useInterval };","map":{"version":3,"mappings":";AACO,SAASA,WAAW,CAACC,EAAE,EAAEC,QAAQ,EAAE;EACxC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAMC,WAAW,GAAGC,MAAM,EAAE;EAC5B,MAAMC,KAAK,GAAGD,MAAM,EAAE;EACtBE,SAAS,CAAC,MAAM;IACdD,KAAK,CAACE,OAAO,GAAGT,EAAE;EACtB,CAAG,EAAE,CAACA,EAAE,CAAC,CAAC;EACR,MAAMU,KAAK,GAAG,MAAM;IAClBP,SAAS,CAAEQ,GAAG,IAAK;MACjB,IAAI,CAACA,GAAG,IAAI,CAACN,WAAW,CAACI,OAAO,EAAE;QAChCJ,WAAW,CAACI,OAAO,GAAGG,MAAM,CAACC,WAAW,CAACN,KAAK,CAACE,OAAO,EAAER,QAAQ,CAAC;MACzE;MACM,OAAO,IAAI;IACjB,CAAK,CAAC;EACN,CAAG;EACD,MAAMa,IAAI,GAAG,MAAM;IACjBX,SAAS,CAAC,KAAK,CAAC;IAChBS,MAAM,CAACG,aAAa,CAACV,WAAW,CAACI,OAAO,CAAC;IACzCJ,WAAW,CAACI,OAAO,GAAG,KAAK,CAAC;EAChC,CAAG;EACD,MAAMO,MAAM,GAAG,MAAM;IACnB,IAAId,MAAM,EAAE;MACVY,IAAI,EAAE;IACZ,CAAK,MAAM;MACLJ,KAAK,EAAE;IACb;EACA,CAAG;EACD,OAAO;IAAEA,KAAK;IAAEI,IAAI;IAAEE,MAAM;IAAEd;EAAM,CAAE;AACxC","names":["useInterval","fn","interval","active","setActive","useState","intervalRef","useRef","fnRef","useEffect","current","start","old","window","setInterval","stop","clearInterval","toggle"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\node_modules\\@mantine\\hooks\\src\\use-interval\\use-interval.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport function useInterval(fn: () => void, interval: number) {\n  const [active, setActive] = useState(false);\n  const intervalRef = useRef<number>();\n  const fnRef = useRef<() => void>();\n\n  useEffect(() => {\n    fnRef.current = fn;\n  }, [fn]);\n\n  const start = () => {\n    setActive((old) => {\n      if (!old && !intervalRef.current) {\n        intervalRef.current = window.setInterval(fnRef.current, interval);\n      }\n      return true;\n    });\n  };\n\n  const stop = () => {\n    setActive(false);\n    window.clearInterval(intervalRef.current);\n    intervalRef.current = undefined;\n  };\n\n  const toggle = () => {\n    if (active) {\n      stop();\n    } else {\n      start();\n    }\n  };\n\n  return { start, stop, toggle, active };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}