{"ast":null,"code":"// For making HTTP request and sending data in localStorage\n\nimport axios from 'axios';\nconst API_URL = '/api/spotify/';\nlet IDresult = \"\";\nlet genreResult = \"\";\nlet target = \"\";\nlet allGenres = [\"acoustic\", \"afrobeat\", \"alt-rock\", \"alternative\", \"ambient\", \"anime\", \"bluegrass\", \"blues\", \"bossanova\", \"breakbeat\", \"chicago-house\", \"chill\", \"classical\", \"club\", \"country\", \"dance\", \"dancehall\", \"deep-house\", \"detroit-techno\", \"disco\", \"drum-and-bass\", \"dub\", \"dubstep\", \"edm\", \"electro\", \"electronic\", \"emo\", \"folk\", \"funk\", \"garage\", \"gospel\", \"goth\", \"grindcore\", \"groove\", \"grunge\", \"guitar\", \"happy\", \"hard-rock\", \"hardcore\", \"hardstyle\", \"heavy-metal\", \"hip-hop\", \"holidays\", \"honky-tonk\", \"house\", \"idm\", \"indie\", \"indie-pop\", \"industrial\", \"j-pop\", \"jazz\", \"k-pop\", \"latin\", \"latino\", \"metal\", \"metal-misc\", \"metalcore\", \"minimal-techno\", \"mpb\", \"new-age\", \"new-release\", \"party\", \"piano\", \"pop\", \"pop-film\", \"post-dubstep\", \"power-pop\", \"progressive-house\", \"psych-rock\", \"punk\", \"punk-rock\", \"r-n-b\", \"rainy-day\", \"reggae\", \"reggaeton\", \"rock\", \"rock-n-roll\", \"rockabilly\", \"romance\", \"sad\", \"salsa\", \"samba\", \"show-tunes\", \"singer-songwriter\", \"ska\", \"sleep\", \"songwriter\", \"soul\", \"soundtracks\", \"study\", \"summer\", \"synth-pop\", \"tango\", \"techno\", \"trip-hop\", \"work-out\", \"world-music\"];\n\n// Map for localStorage keys\nconst LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp'\n};\n\n// Map to retrieve localStorage values\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\n\n// Generate random string\nconst getRandomString = length => {\n  let text = '';\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n};\nconst stateKey = 'spotify_auth_state';\n\n/**\r\n * Handles logic for retrieving the Spotify access token from localStorage\r\n * or URL query params\r\n * @returns {string} A spotify access token\r\n */\nconst connect = async () => {\n  // console.log(\"ASDASDASDASD\")\n  // console.log(window.location.search)\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in')\n  };\n  const hasError = urlParams.get('error');\n  console.log(\"hadError: \" + hasError);\n\n  // If theres an error OR the token has expired => refresh token\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    console.log(\"refreshToken called\");\n    refreshToken();\n  }\n\n  // If theres a valid access token, use that\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken;\n  }\n\n  // If there is a token in the URL query params, user is logging in for the first time\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    // Store the query params in localStorage\n    for (const property in queryParams) {\n      window.localStorage.setItem(property, queryParams[property]);\n    }\n    // Set timestamp\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n\n    // Return access token from query params\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  }\n  return false;\n};\n\n/**\r\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\r\n * and now is greater than the expiration time of 3600 seconds (1 hour).\r\n * @returns {boolean} Whether or not the access token in localStorage has expired\r\n */\nconst hasTokenExpired = () => {\n  console.log('inside hasTokenExpired');\n  const {\n    accessToken,\n    timestamp,\n    expireTime\n  } = LOCALSTORAGE_VALUES;\n  if (!accessToken || !timestamp) {\n    return false;\n  }\n  const millisecondsElapsed = Date.now() - Number(timestamp);\n  return millisecondsElapsed / 1000 > Number(expireTime);\n};\n\n/**\r\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\r\n * in our Node app, then update values in localStorage with data from response.\r\n * @returns {void}\r\n */\nconst refreshToken = async () => {\n  try {\n    // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n    if (!LOCALSTORAGE_VALUES.refreshToken || LOCALSTORAGE_VALUES.refreshToken === 'undefined' || Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000 < 1000) {\n      console.error('No refresh token available');\n      logout();\n    }\n\n    // Use `/refresh_token` endpoint from our Node app\n    const {\n      data\n    } = await axios.get(`/api/spotify/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`);\n\n    // Update localStorage values\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n\n    // Reload the page for localStorage updates to be reflected\n    window.location.reload();\n    console.log(\"TOKEN WAS REFRESHED\");\n  } catch (e) {\n    console.error(e);\n  }\n};\nexport const logout = () => {\n  localStorage.removeItem('spotify_access_token');\n  localStorage.removeItem('spotify_refresh_token');\n  localStorage.removeItem('spotify_token_expire_time');\n  localStorage.removeItem('spotify_token_timestamp');\n};\n\n// export const accessToken = connect()\n\n// /**\n//  * Axios global request headers\n//  */\n\n//  axios.defaults.baseURL = 'https://api.spotify.com/v1';\n//  axios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\n//  axios.defaults.headers['Content-Type'] = 'application/json';\n//  axios.defaults.headers['Allow-Access-Control-Origin'] = '*';\n\nexport const accessToken = connect();\n// {\\n  \\\"error\\\": {\\n    \\\"status\\\": 400,\\n    \\\"message\\\": \\\"Only valid bearer authentication supported\\\"\\n  }\\n}\"\n\n// @desc    Get user's top artist\n// @route   GET /api/spotify/top_artist\n// @access  Private\nexport const getTopArtist = async () => {\n  if (hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken();\n  }\n  try {\n    const response = await axios({\n      method: 'get',\n      url: `https://api.spotify.com/v1/me/top/artists?limit=3&time_range=long_term`,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem(LOCALSTORAGE_KEYS.accessToken)}`\n      }\n    });\n    target = response.data.items[0].id;\n    IDresult = target.concat(\",\", response.data.items[2].id);\n    target = response.data.items[0].genres[0].toString();\n    if (allGenres.includes(target)) genreResult = target;\n    // genreResult = target //.concat(\",\", response.data.items[1].genres[1].toString())\n\n    if (response) return response;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n};\n\n// @desc    Get user's top artist\n// @route   GET /api/spotify/top_genre\n// @access  Private\nexport const getTopGenre = async () => {\n  if (hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken();\n  }\n  try {\n    console.log(\"getTopGenre was called\");\n    console.log(localStorage.getItem(LOCALSTORAGE_KEYS.accessToken));\n    const response = await axios({\n      method: 'get',\n      url: `https://api.spotify.com/v1/recommendations/available-genre-seeds`,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem(LOCALSTORAGE_KEYS.accessToken)}`\n      }\n    });\n    console.log(response);\n    console.log(response.items[0]);\n    if (response) return response;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n};\n\n// @desc    Get recommended songs\n// @route   GET /api/spotify/recommendSongs\n// @access  Private\nexport const recommendSongs = async (token, user) => {\n  if (hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken();\n  }\n  console.log(genreResult);\n\n  //if genre result is empty, get 5 random ones from the list above\n  if (genreResult == \"\") {\n    let choices = Array.from(Array(90), (x, i) => i);\n    var num = Math.floor(Math.random() * choices.length);\n    var pick = choices.splice(num, 1); // remove number from array\n    let one = pick;\n    console.log(one);\n    num = Math.floor(Math.random() * choices.length);\n    let two = choices.splice(num, 1);\n    console.log(two);\n    num = Math.floor(Math.random() * choices.length);\n    let three = choices.splice(num, 1);\n    console.log(three);\n    num = Math.floor(Math.random() * choices.length);\n    let four = choices.splice(num, 1);\n    console.log(four);\n    num = Math.floor(Math.random() * choices.length);\n    let five = choices.splice(num, 1);\n    console.log(five);\n    genreResult += allGenres[one] + \",\" + allGenres[two] + \",\" + allGenres[three] + \",\" + allGenres[four] + \",\" + allGenres[five];\n    console.log(genreResult);\n  }\n  const response = await axios({\n    method: 'get',\n    url: `https://api.spotify.com/v1/recommendations?seed_genres=${genreResult}`,\n    headers: {\n      'Accept': \"application/json\",\n      'Content-Type': \"application/json\",\n      'Authorization': `Bearer ${LOCALSTORAGE_VALUES.accessToken}`\n    }\n  });\n  return response;\n};\n\n// @desc    Get user's top artist\n// @route   GET /api/spotify/top_genre\n// @access  Private\n// API documentation: https://developer.spotify.com/documentation/web-api/reference/#/operations/search\nexport const searchTracks = async param => {\n  if (hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken();\n  }\n  try {\n    const token = localStorage.getItem(LOCALSTORAGE_KEYS.accessToken);\n    const response = await axios({\n      method: 'get',\n      url: `https://api.spotify.com/v1/search?q=${param}&type=track&include_external=audio&limit=7`,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem(LOCALSTORAGE_KEYS.accessToken)}`\n      }\n    });\n    // console.log(response);\n    // console.log(response.items);\n    if (response) return response;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n};\nconst spotifyService = {\n  connect,\n  refreshToken,\n  hasTokenExpired,\n  logout,\n  getTopArtist,\n  getTopGenre,\n  recommendSongs,\n  searchTracks\n};\nexport default spotifyService;","map":{"version":3,"names":["axios","API_URL","IDresult","genreResult","target","allGenres","LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","getRandomString","length","text","possible","i","charAt","Math","floor","random","stateKey","connect","queryString","location","search","urlParams","URLSearchParams","queryParams","get","hasError","console","log","hasTokenExpired","property","setItem","Date","now","millisecondsElapsed","Number","error","logout","data","access_token","reload","e","removeItem","getTopArtist","response","method","url","headers","items","id","concat","genres","toString","includes","getTopGenre","recommendSongs","token","user","choices","Array","from","x","num","pick","splice","one","two","three","four","five","searchTracks","param","spotifyService"],"sources":["C:/Users/rff96/Documents/GitHub/cop4331-large-project/client/src/features/spotify/spotifyService.js"],"sourcesContent":["// For making HTTP request and sending data in localStorage\r\n\r\nimport axios from 'axios'\r\n\r\nconst API_URL = '/api/spotify/'\r\nlet IDresult = \"\"\r\nlet genreResult = \"\"\r\nlet target = \"\"\r\nlet allGenres = [\r\n    \"acoustic\",\r\n    \"afrobeat\",\r\n    \"alt-rock\",\r\n    \"alternative\",\r\n    \"ambient\",\r\n    \"anime\",\r\n    \"bluegrass\",\r\n    \"blues\",\r\n    \"bossanova\",\r\n    \"breakbeat\",\r\n    \"chicago-house\",\r\n    \"chill\",\r\n    \"classical\",\r\n    \"club\",\r\n    \"country\",\r\n    \"dance\",\r\n    \"dancehall\",\r\n    \"deep-house\",\r\n    \"detroit-techno\",\r\n    \"disco\",\r\n    \"drum-and-bass\",\r\n    \"dub\",\r\n    \"dubstep\",\r\n    \"edm\",\r\n    \"electro\",\r\n    \"electronic\",\r\n    \"emo\",\r\n    \"folk\",\r\n    \"funk\",\r\n    \"garage\",\r\n    \"gospel\",\r\n    \"goth\",\r\n    \"grindcore\",\r\n    \"groove\",\r\n    \"grunge\",\r\n    \"guitar\",\r\n    \"happy\",\r\n    \"hard-rock\",\r\n    \"hardcore\",\r\n    \"hardstyle\",\r\n    \"heavy-metal\",\r\n    \"hip-hop\",\r\n    \"holidays\",\r\n    \"honky-tonk\",\r\n    \"house\",\r\n    \"idm\",\r\n    \"indie\",\r\n    \"indie-pop\",\r\n    \"industrial\",\r\n    \"j-pop\",\r\n    \"jazz\",\r\n    \"k-pop\",\r\n    \"latin\",\r\n    \"latino\",\r\n    \"metal\",\r\n    \"metal-misc\",\r\n    \"metalcore\",\r\n    \"minimal-techno\",\r\n    \"mpb\",\r\n    \"new-age\",\r\n    \"new-release\",\r\n    \"party\",\r\n    \"piano\",\r\n    \"pop\",\r\n    \"pop-film\",\r\n    \"post-dubstep\",\r\n    \"power-pop\",\r\n    \"progressive-house\",\r\n    \"psych-rock\",\r\n    \"punk\",\r\n    \"punk-rock\",\r\n    \"r-n-b\",\r\n    \"rainy-day\",\r\n    \"reggae\",\r\n    \"reggaeton\",\r\n    \"rock\",\r\n    \"rock-n-roll\",\r\n    \"rockabilly\",\r\n    \"romance\",\r\n    \"sad\",\r\n    \"salsa\",\r\n    \"samba\",\r\n    \"show-tunes\",\r\n    \"singer-songwriter\",\r\n    \"ska\",\r\n    \"sleep\",\r\n    \"songwriter\",\r\n    \"soul\",\r\n    \"soundtracks\",\r\n    \"study\",\r\n    \"summer\",\r\n    \"synth-pop\",\r\n    \"tango\",\r\n    \"techno\",\r\n    \"trip-hop\",\r\n    \"work-out\",\r\n    \"world-music\"\r\n]\r\n\r\n// Map for localStorage keys\r\nconst LOCALSTORAGE_KEYS = {\r\n    accessToken: 'spotify_access_token',\r\n    refreshToken: 'spotify_refresh_token',\r\n    expireTime: 'spotify_token_expire_time',\r\n    timestamp: 'spotify_token_timestamp',\r\n}\r\n\r\n// Map to retrieve localStorage values\r\nconst LOCALSTORAGE_VALUES = {\r\n    accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\r\n    refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\r\n    expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\r\n    timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\r\n}\r\n\r\n// Generate random string\r\nconst getRandomString = length => {\r\n    let text = ''\r\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n    for (let i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length))\r\n    }\r\n    return text;\r\n}\r\nconst stateKey = 'spotify_auth_state'\r\n\r\n/**\r\n * Handles logic for retrieving the Spotify access token from localStorage\r\n * or URL query params\r\n * @returns {string} A spotify access token\r\n */\r\nconst connect = async () => {\r\n\r\n    // console.log(\"ASDASDASDASD\")\r\n    // console.log(window.location.search)\r\n    const queryString = window.location.search\r\n    const urlParams = new URLSearchParams(queryString)\r\n\r\n    const queryParams = {\r\n        [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\r\n        [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\r\n        [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\r\n    }\r\n\r\n    const hasError = urlParams.get('error')\r\n    console.log(\"hadError: \" + hasError)\r\n\r\n    // If theres an error OR the token has expired => refresh token\r\n    if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n        console.log(\"refreshToken called\")\r\n        refreshToken()\r\n    }\r\n\r\n    // If theres a valid access token, use that\r\n    if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\r\n        return LOCALSTORAGE_VALUES.accessToken\r\n    }\r\n\r\n    // If there is a token in the URL query params, user is logging in for the first time\r\n    if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\r\n\r\n        // Store the query params in localStorage\r\n        for (const property in queryParams) {\r\n            window.localStorage.setItem(property, queryParams[property])\r\n        }\r\n        // Set timestamp\r\n        window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now())\r\n\r\n        // Return access token from query params\r\n        return queryParams[LOCALSTORAGE_KEYS.accessToken]\r\n    }\r\n\r\n    return false\r\n}\r\n\r\n\r\n/**\r\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\r\n * and now is greater than the expiration time of 3600 seconds (1 hour).\r\n * @returns {boolean} Whether or not the access token in localStorage has expired\r\n */\r\nconst hasTokenExpired = () => {\r\n    console.log('inside hasTokenExpired');\r\n    const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES\r\n\r\n    if (!accessToken || !timestamp) {\r\n        return false\r\n    }\r\n    const millisecondsElapsed = Date.now() - Number(timestamp)\r\n    return (millisecondsElapsed / 1000) > Number(expireTime)\r\n}\r\n\r\n/**\r\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\r\n * in our Node app, then update values in localStorage with data from response.\r\n * @returns {void}\r\n */\r\nconst refreshToken = async () => {\r\n    try {\r\n\r\n        // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\r\n        if (!LOCALSTORAGE_VALUES.refreshToken ||\r\n            LOCALSTORAGE_VALUES.refreshToken === 'undefined' ||\r\n            (Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000) < 1000\r\n        ) {\r\n\r\n            console.error('No refresh token available')\r\n            logout()\r\n        }\r\n\r\n        // Use `/refresh_token` endpoint from our Node app\r\n        const { data } = await axios.get(`/api/spotify/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`)\r\n\r\n        // Update localStorage values\r\n        window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token)\r\n        window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now())\r\n\r\n        // Reload the page for localStorage updates to be reflected\r\n        window.location.reload()\r\n\r\n        console.log(\"TOKEN WAS REFRESHED\")\r\n\r\n    } catch (e) {\r\n        console.error(e)\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem('spotify_access_token')\r\n    localStorage.removeItem('spotify_refresh_token')\r\n    localStorage.removeItem('spotify_token_expire_time')\r\n    localStorage.removeItem('spotify_token_timestamp')\r\n}\r\n\r\n// export const accessToken = connect()\r\n\r\n// /**\r\n//  * Axios global request headers\r\n//  */\r\n\r\n//  axios.defaults.baseURL = 'https://api.spotify.com/v1';\r\n//  axios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\r\n//  axios.defaults.headers['Content-Type'] = 'application/json';\r\n//  axios.defaults.headers['Allow-Access-Control-Origin'] = '*';\r\n\r\nexport const accessToken = connect()\r\n// {\\n  \\\"error\\\": {\\n    \\\"status\\\": 400,\\n    \\\"message\\\": \\\"Only valid bearer authentication supported\\\"\\n  }\\n}\"\r\n\r\n// @desc    Get user's top artist\r\n// @route   GET /api/spotify/top_artist\r\n// @access  Private\r\nexport const getTopArtist = async () => {\r\n\r\n    if (hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n        refreshToken()\r\n    }\r\n\r\n    try {\r\n        const response = await axios({\r\n            method: 'get',\r\n            url: `https://api.spotify.com/v1/me/top/artists?limit=3&time_range=long_term`,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem(LOCALSTORAGE_KEYS.accessToken)}`\r\n            }\r\n        })\r\n\r\n        target = response.data.items[0].id\r\n        IDresult = target.concat(\",\", response.data.items[2].id)\r\n\r\n        target= response.data.items[0].genres[0].toString();\r\n        if(allGenres.includes(target)) genreResult = target\r\n        // genreResult = target //.concat(\",\", response.data.items[1].genres[1].toString())\r\n\r\n        if (response) return response;\r\n    } catch (error) {\r\n        console.error(error)\r\n        return false\r\n    }\r\n}\r\n\r\n\r\n// @desc    Get user's top artist\r\n// @route   GET /api/spotify/top_genre\r\n// @access  Private\r\nexport const getTopGenre = async () => {\r\n\r\n    if (hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n        refreshToken()\r\n    }\r\n\r\n    try {\r\n        console.log(\"getTopGenre was called\")\r\n        console.log(localStorage.getItem(LOCALSTORAGE_KEYS.accessToken));\r\n        const response = await axios({\r\n            method: 'get',\r\n            url: `https://api.spotify.com/v1/recommendations/available-genre-seeds`,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem(LOCALSTORAGE_KEYS.accessToken)}`\r\n            }\r\n        })\r\n        console.log(response);\r\n        console.log(response.items[0]);\r\n        if (response) return response;\r\n    } catch (error) {\r\n        console.error(error)\r\n        return false\r\n    }\r\n}\r\n\r\n// @desc    Get recommended songs\r\n// @route   GET /api/spotify/recommendSongs\r\n// @access  Private\r\nexport const recommendSongs = async (token, user) => {\r\n\r\n    if (hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n        refreshToken()\r\n    }\r\n\r\n    console.log(genreResult)\r\n\r\n    //if genre result is empty, get 5 random ones from the list above\r\n    if (genreResult == \"\") {\r\n\r\n        let choices = Array.from(Array(90), (x, i) => i)\r\n        var num = Math.floor(Math.random() * choices.length);\r\n\r\n        var pick = choices.splice(num, 1) // remove number from array\r\n        let one = pick;\r\n        console.log(one)\r\n\r\n        num = Math.floor(Math.random() * choices.length);\r\n        let two = choices.splice(num, 1)\r\n        console.log(two)\r\n\r\n        num = Math.floor(Math.random() * choices.length);\r\n        let three = choices.splice(num, 1)\r\n        console.log(three)\r\n\r\n        num = Math.floor(Math.random() * choices.length);\r\n        let four = choices.splice(num, 1)\r\n        console.log(four)\r\n\r\n\r\n        num = Math.floor(Math.random() * choices.length);\r\n        let five = choices.splice(num, 1)\r\n        console.log(five)\r\n\r\n        \r\n\r\n        genreResult += allGenres[one]+\",\"+allGenres[two]+\",\"+allGenres[three]+\",\"+allGenres[four]+\",\"+allGenres[five]\r\n\r\n        console.log(genreResult)\r\n    }\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `https://api.spotify.com/v1/recommendations?seed_genres=${genreResult}`,\r\n        headers: {\r\n            'Accept': \"application/json\",\r\n            'Content-Type': \"application/json\",\r\n            'Authorization': `Bearer ${LOCALSTORAGE_VALUES.accessToken}`\r\n        }\r\n    });\r\n    return response;\r\n};\r\n\r\n// @desc    Get user's top artist\r\n// @route   GET /api/spotify/top_genre\r\n// @access  Private\r\n// API documentation: https://developer.spotify.com/documentation/web-api/reference/#/operations/search\r\nexport const searchTracks = async (param) => {\r\n\r\n    if (hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n        refreshToken()\r\n    }\r\n\r\n    try {\r\n\r\n        const token = localStorage.getItem(LOCALSTORAGE_KEYS.accessToken);\r\n        const response = await axios({\r\n            method: 'get',\r\n            url: `https://api.spotify.com/v1/search?q=${param}&type=track&include_external=audio&limit=7`,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem(LOCALSTORAGE_KEYS.accessToken)}`\r\n            }\r\n        })\r\n        // console.log(response);\r\n        // console.log(response.items);\r\n        if (response) return response;\r\n    } catch (error) {\r\n        console.error(error)\r\n        return false\r\n    }\r\n}\r\n\r\n\r\nconst spotifyService = {\r\n    connect,\r\n    refreshToken,\r\n    hasTokenExpired,\r\n    logout,\r\n    getTopArtist,\r\n    getTopGenre,\r\n    recommendSongs,\r\n    searchTracks,\r\n}\r\n\r\nexport default spotifyService\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,eAAe;AAC/B,IAAIC,QAAQ,GAAG,EAAE;AACjB,IAAIC,WAAW,GAAG,EAAE;AACpB,IAAIC,MAAM,GAAG,EAAE;AACf,IAAIC,SAAS,GAAG,CACZ,UAAU,EACV,UAAU,EACV,UAAU,EACV,aAAa,EACb,SAAS,EACT,OAAO,EACP,WAAW,EACX,OAAO,EACP,WAAW,EACX,WAAW,EACX,eAAe,EACf,OAAO,EACP,WAAW,EACX,MAAM,EACN,SAAS,EACT,OAAO,EACP,WAAW,EACX,YAAY,EACZ,gBAAgB,EAChB,OAAO,EACP,eAAe,EACf,KAAK,EACL,SAAS,EACT,KAAK,EACL,SAAS,EACT,YAAY,EACZ,KAAK,EACL,MAAM,EACN,MAAM,EACN,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,WAAW,EACX,UAAU,EACV,WAAW,EACX,aAAa,EACb,SAAS,EACT,UAAU,EACV,YAAY,EACZ,OAAO,EACP,KAAK,EACL,OAAO,EACP,WAAW,EACX,YAAY,EACZ,OAAO,EACP,MAAM,EACN,OAAO,EACP,OAAO,EACP,QAAQ,EACR,OAAO,EACP,YAAY,EACZ,WAAW,EACX,gBAAgB,EAChB,KAAK,EACL,SAAS,EACT,aAAa,EACb,OAAO,EACP,OAAO,EACP,KAAK,EACL,UAAU,EACV,cAAc,EACd,WAAW,EACX,mBAAmB,EACnB,YAAY,EACZ,MAAM,EACN,WAAW,EACX,OAAO,EACP,WAAW,EACX,QAAQ,EACR,WAAW,EACX,MAAM,EACN,aAAa,EACb,YAAY,EACZ,SAAS,EACT,KAAK,EACL,OAAO,EACP,OAAO,EACP,YAAY,EACZ,mBAAmB,EACnB,KAAK,EACL,OAAO,EACP,YAAY,EACZ,MAAM,EACN,aAAa,EACb,OAAO,EACP,QAAQ,EACR,WAAW,EACX,OAAO,EACP,QAAQ,EACR,UAAU,EACV,UAAU,EACV,aAAa,CAChB;;AAED;AACA,MAAMC,iBAAiB,GAAG;EACtBC,WAAW,EAAE,sBAAsB;EACnCC,YAAY,EAAE,uBAAuB;EACrCC,UAAU,EAAE,2BAA2B;EACvCC,SAAS,EAAE;AACf,CAAC;;AAED;AACA,MAAMC,mBAAmB,GAAG;EACxBJ,WAAW,EAAEK,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACC,WAAW,CAAC;EACvEC,YAAY,EAAEI,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACE,YAAY,CAAC;EACzEC,UAAU,EAAEG,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACG,UAAU,CAAC;EACrEC,SAAS,EAAEE,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACI,SAAS;AACtE,CAAC;;AAED;AACA,MAAMK,eAAe,GAAGC,MAAM,IAAI;EAC9B,IAAIC,IAAI,GAAG,EAAE;EACb,MAAMC,QAAQ,GAAG,gEAAgE;EACjF,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;IAC7BF,IAAI,IAAIC,QAAQ,CAACE,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGL,QAAQ,CAACF,MAAM,CAAC,CAAC;EACxE;EACA,OAAOC,IAAI;AACf,CAAC;AACD,MAAMO,QAAQ,GAAG,oBAAoB;;AAErC;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,YAAY;EAExB;EACA;EACA,MAAMC,WAAW,GAAGd,MAAM,CAACe,QAAQ,CAACC,MAAM;EAC1C,MAAMC,SAAS,GAAG,IAAIC,eAAe,CAACJ,WAAW,CAAC;EAElD,MAAMK,WAAW,GAAG;IAChB,CAACzB,iBAAiB,CAACC,WAAW,GAAGsB,SAAS,CAACG,GAAG,CAAC,cAAc,CAAC;IAC9D,CAAC1B,iBAAiB,CAACE,YAAY,GAAGqB,SAAS,CAACG,GAAG,CAAC,eAAe,CAAC;IAChE,CAAC1B,iBAAiB,CAACG,UAAU,GAAGoB,SAAS,CAACG,GAAG,CAAC,YAAY;EAC9D,CAAC;EAED,MAAMC,QAAQ,GAAGJ,SAAS,CAACG,GAAG,CAAC,OAAO,CAAC;EACvCE,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGF,QAAQ,CAAC;;EAEpC;EACA,IAAIA,QAAQ,IAAIG,eAAe,EAAE,IAAIzB,mBAAmB,CAACJ,WAAW,KAAK,WAAW,EAAE;IAClF2B,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC3B,YAAY,EAAE;EAClB;;EAEA;EACA,IAAIG,mBAAmB,CAACJ,WAAW,IAAII,mBAAmB,CAACJ,WAAW,KAAK,WAAW,EAAE;IACpF,OAAOI,mBAAmB,CAACJ,WAAW;EAC1C;;EAEA;EACA,IAAIwB,WAAW,CAACzB,iBAAiB,CAACC,WAAW,CAAC,EAAE;IAE5C;IACA,KAAK,MAAM8B,QAAQ,IAAIN,WAAW,EAAE;MAChCnB,MAAM,CAACC,YAAY,CAACyB,OAAO,CAACD,QAAQ,EAAEN,WAAW,CAACM,QAAQ,CAAC,CAAC;IAChE;IACA;IACAzB,MAAM,CAACC,YAAY,CAACyB,OAAO,CAAChC,iBAAiB,CAACI,SAAS,EAAE6B,IAAI,CAACC,GAAG,EAAE,CAAC;;IAEpE;IACA,OAAOT,WAAW,CAACzB,iBAAiB,CAACC,WAAW,CAAC;EACrD;EAEA,OAAO,KAAK;AAChB,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA,MAAM6B,eAAe,GAAG,MAAM;EAC1BF,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACrC,MAAM;IAAE5B,WAAW;IAAEG,SAAS;IAAED;EAAW,CAAC,GAAGE,mBAAmB;EAElE,IAAI,CAACJ,WAAW,IAAI,CAACG,SAAS,EAAE;IAC5B,OAAO,KAAK;EAChB;EACA,MAAM+B,mBAAmB,GAAGF,IAAI,CAACC,GAAG,EAAE,GAAGE,MAAM,CAAChC,SAAS,CAAC;EAC1D,OAAQ+B,mBAAmB,GAAG,IAAI,GAAIC,MAAM,CAACjC,UAAU,CAAC;AAC5D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMD,YAAY,GAAG,YAAY;EAC7B,IAAI;IAEA;IACA,IAAI,CAACG,mBAAmB,CAACH,YAAY,IACjCG,mBAAmB,CAACH,YAAY,KAAK,WAAW,IAC/C+B,IAAI,CAACC,GAAG,EAAE,GAAGE,MAAM,CAAC/B,mBAAmB,CAACD,SAAS,CAAC,GAAG,IAAI,GAAI,IAAI,EACpE;MAEEwB,OAAO,CAACS,KAAK,CAAC,4BAA4B,CAAC;MAC3CC,MAAM,EAAE;IACZ;;IAEA;IACA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAM7C,KAAK,CAACgC,GAAG,CAAE,4CAA2CrB,mBAAmB,CAACH,YAAa,EAAC,CAAC;;IAEhH;IACAI,MAAM,CAACC,YAAY,CAACyB,OAAO,CAAChC,iBAAiB,CAACC,WAAW,EAAEsC,IAAI,CAACC,YAAY,CAAC;IAC7ElC,MAAM,CAACC,YAAY,CAACyB,OAAO,CAAChC,iBAAiB,CAACI,SAAS,EAAE6B,IAAI,CAACC,GAAG,EAAE,CAAC;;IAEpE;IACA5B,MAAM,CAACe,QAAQ,CAACoB,MAAM,EAAE;IAExBb,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;EAEtC,CAAC,CAAC,OAAOa,CAAC,EAAE;IACRd,OAAO,CAACS,KAAK,CAACK,CAAC,CAAC;EACpB;AACJ,CAAC;AAED,OAAO,MAAMJ,MAAM,GAAG,MAAM;EACxB/B,YAAY,CAACoC,UAAU,CAAC,sBAAsB,CAAC;EAC/CpC,YAAY,CAACoC,UAAU,CAAC,uBAAuB,CAAC;EAChDpC,YAAY,CAACoC,UAAU,CAAC,2BAA2B,CAAC;EACpDpC,YAAY,CAACoC,UAAU,CAAC,yBAAyB,CAAC;AACtD,CAAC;;AAED;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAM1C,WAAW,GAAGkB,OAAO,EAAE;AACpC;;AAEA;AACA;AACA;AACA,OAAO,MAAMyB,YAAY,GAAG,YAAY;EAEpC,IAAId,eAAe,EAAE,IAAIzB,mBAAmB,CAACJ,WAAW,KAAK,WAAW,EAAE;IACtEC,YAAY,EAAE;EAClB;EAEA,IAAI;IACA,MAAM2C,QAAQ,GAAG,MAAMnD,KAAK,CAAC;MACzBoD,MAAM,EAAE,KAAK;MACbC,GAAG,EAAG,wEAAuE;MAC7EC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASzC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACC,WAAW,CAAE;MACnF;IACJ,CAAC,CAAC;IAEFH,MAAM,GAAG+C,QAAQ,CAACN,IAAI,CAACU,KAAK,CAAC,CAAC,CAAC,CAACC,EAAE;IAClCtD,QAAQ,GAAGE,MAAM,CAACqD,MAAM,CAAC,GAAG,EAAEN,QAAQ,CAACN,IAAI,CAACU,KAAK,CAAC,CAAC,CAAC,CAACC,EAAE,CAAC;IAExDpD,MAAM,GAAE+C,QAAQ,CAACN,IAAI,CAACU,KAAK,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,QAAQ,EAAE;IACnD,IAAGtD,SAAS,CAACuD,QAAQ,CAACxD,MAAM,CAAC,EAAED,WAAW,GAAGC,MAAM;IACnD;;IAEA,IAAI+C,QAAQ,EAAE,OAAOA,QAAQ;EACjC,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZT,OAAO,CAACS,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,KAAK;EAChB;AACJ,CAAC;;AAGD;AACA;AACA;AACA,OAAO,MAAMkB,WAAW,GAAG,YAAY;EAEnC,IAAIzB,eAAe,EAAE,IAAIzB,mBAAmB,CAACJ,WAAW,KAAK,WAAW,EAAE;IACtEC,YAAY,EAAE;EAClB;EAEA,IAAI;IACA0B,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrCD,OAAO,CAACC,GAAG,CAACtB,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACC,WAAW,CAAC,CAAC;IAChE,MAAM4C,QAAQ,GAAG,MAAMnD,KAAK,CAAC;MACzBoD,MAAM,EAAE,KAAK;MACbC,GAAG,EAAG,kEAAiE;MACvEC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASzC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACC,WAAW,CAAE;MACnF;IACJ,CAAC,CAAC;IACF2B,OAAO,CAACC,GAAG,CAACgB,QAAQ,CAAC;IACrBjB,OAAO,CAACC,GAAG,CAACgB,QAAQ,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9B,IAAIJ,QAAQ,EAAE,OAAOA,QAAQ;EACjC,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZT,OAAO,CAACS,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,KAAK;EAChB;AACJ,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMmB,cAAc,GAAG,OAAOC,KAAK,EAAEC,IAAI,KAAK;EAEjD,IAAI5B,eAAe,EAAE,IAAIzB,mBAAmB,CAACJ,WAAW,KAAK,WAAW,EAAE;IACtEC,YAAY,EAAE;EAClB;EAEA0B,OAAO,CAACC,GAAG,CAAChC,WAAW,CAAC;;EAExB;EACA,IAAIA,WAAW,IAAI,EAAE,EAAE;IAEnB,IAAI8D,OAAO,GAAGC,KAAK,CAACC,IAAI,CAACD,KAAK,CAAC,EAAE,CAAC,EAAE,CAACE,CAAC,EAAEjD,CAAC,KAAKA,CAAC,CAAC;IAChD,IAAIkD,GAAG,GAAGhD,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG0C,OAAO,CAACjD,MAAM,CAAC;IAEpD,IAAIsD,IAAI,GAAGL,OAAO,CAACM,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC,EAAC;IAClC,IAAIG,GAAG,GAAGF,IAAI;IACdpC,OAAO,CAACC,GAAG,CAACqC,GAAG,CAAC;IAEhBH,GAAG,GAAGhD,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG0C,OAAO,CAACjD,MAAM,CAAC;IAChD,IAAIyD,GAAG,GAAGR,OAAO,CAACM,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IAChCnC,OAAO,CAACC,GAAG,CAACsC,GAAG,CAAC;IAEhBJ,GAAG,GAAGhD,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG0C,OAAO,CAACjD,MAAM,CAAC;IAChD,IAAI0D,KAAK,GAAGT,OAAO,CAACM,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IAClCnC,OAAO,CAACC,GAAG,CAACuC,KAAK,CAAC;IAElBL,GAAG,GAAGhD,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG0C,OAAO,CAACjD,MAAM,CAAC;IAChD,IAAI2D,IAAI,GAAGV,OAAO,CAACM,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IACjCnC,OAAO,CAACC,GAAG,CAACwC,IAAI,CAAC;IAGjBN,GAAG,GAAGhD,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG0C,OAAO,CAACjD,MAAM,CAAC;IAChD,IAAI4D,IAAI,GAAGX,OAAO,CAACM,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IACjCnC,OAAO,CAACC,GAAG,CAACyC,IAAI,CAAC;IAIjBzE,WAAW,IAAIE,SAAS,CAACmE,GAAG,CAAC,GAAC,GAAG,GAACnE,SAAS,CAACoE,GAAG,CAAC,GAAC,GAAG,GAACpE,SAAS,CAACqE,KAAK,CAAC,GAAC,GAAG,GAACrE,SAAS,CAACsE,IAAI,CAAC,GAAC,GAAG,GAACtE,SAAS,CAACuE,IAAI,CAAC;IAE7G1C,OAAO,CAACC,GAAG,CAAChC,WAAW,CAAC;EAC5B;EACA,MAAMgD,QAAQ,GAAG,MAAMnD,KAAK,CAAC;IACzBoD,MAAM,EAAE,KAAK;IACbC,GAAG,EAAG,0DAAyDlD,WAAY,EAAC;IAC5EmD,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,UAAS3C,mBAAmB,CAACJ,WAAY;IAC/D;EACJ,CAAC,CAAC;EACF,OAAO4C,QAAQ;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAM0B,YAAY,GAAG,MAAOC,KAAK,IAAK;EAEzC,IAAI1C,eAAe,EAAE,IAAIzB,mBAAmB,CAACJ,WAAW,KAAK,WAAW,EAAE;IACtEC,YAAY,EAAE;EAClB;EAEA,IAAI;IAEA,MAAMuD,KAAK,GAAGlD,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACC,WAAW,CAAC;IACjE,MAAM4C,QAAQ,GAAG,MAAMnD,KAAK,CAAC;MACzBoD,MAAM,EAAE,KAAK;MACbC,GAAG,EAAG,uCAAsCyB,KAAM,4CAA2C;MAC7FxB,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASzC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACC,WAAW,CAAE;MACnF;IACJ,CAAC,CAAC;IACF;IACA;IACA,IAAI4C,QAAQ,EAAE,OAAOA,QAAQ;EACjC,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZT,OAAO,CAACS,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,KAAK;EAChB;AACJ,CAAC;AAGD,MAAMoC,cAAc,GAAG;EACnBtD,OAAO;EACPjB,YAAY;EACZ4B,eAAe;EACfQ,MAAM;EACNM,YAAY;EACZW,WAAW;EACXC,cAAc;EACde;AACJ,CAAC;AAED,eAAeE,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}