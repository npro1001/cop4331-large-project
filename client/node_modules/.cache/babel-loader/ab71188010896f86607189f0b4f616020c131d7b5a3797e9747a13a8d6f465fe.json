{"ast":null,"code":"function getSortedKeys(value, theme) {\n  const sorted = Object.keys(value).filter(breakpoint => breakpoint !== \"base\").sort((a, b) => theme.fn.size({\n    size: a,\n    sizes: theme.breakpoints\n  }) - theme.fn.size({\n    size: b,\n    sizes: theme.breakpoints\n  }));\n  return \"base\" in value ? [\"base\", ...sorted] : sorted;\n}\nfunction getResponsiveValue(_ref) {\n  let {\n    value,\n    theme,\n    getValue,\n    property\n  } = _ref;\n  if (value == null) {\n    return void 0;\n  }\n  if (typeof value === \"object\") {\n    const result = getSortedKeys(value, theme).reduce((acc, breakpointKey) => {\n      if (breakpointKey === \"base\" && value.base !== void 0) {\n        const baseValue = getValue(value.base, theme);\n        if (Array.isArray(property)) {\n          property.forEach(prop => {\n            acc[prop] = baseValue;\n          });\n          return acc;\n        }\n        acc[property] = baseValue;\n        return acc;\n      }\n      const breakpointValue = getValue(value[breakpointKey], theme);\n      if (Array.isArray(property)) {\n        acc[theme.fn.largerThan(breakpointKey)] = {};\n        property.forEach(prop => {\n          acc[theme.fn.largerThan(breakpointKey)][prop] = breakpointValue;\n        });\n        return acc;\n      }\n      acc[theme.fn.largerThan(breakpointKey)] = {\n        [property]: breakpointValue\n      };\n      return acc;\n    }, {});\n    return result;\n  }\n  const cssValue = getValue(value, theme);\n  if (Array.isArray(property)) {\n    return property.reduce((acc, prop) => {\n      acc[prop] = cssValue;\n      return acc;\n    }, {});\n  }\n  return {\n    [property]: cssValue\n  };\n}\nexport { getResponsiveValue };","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,CAACC,KAAK,EAAEC,KAAK,EAAE;EACnC,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACJ,KAAK,CAAC,CAACK,MAAM,CAAEC,UAAU,IAAKA,UAAU,KAAK,MAAM,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKR,KAAK,CAACS,EAAE,CAACC,IAAI,CAAC;IAAEA,IAAI,EAAEH,CAAC;IAAEI,KAAK,EAAEX,KAAK,CAACY;EAAW,CAAE,CAAC,GAAGZ,KAAK,CAACS,EAAE,CAACC,IAAI,CAAC;IAAEA,IAAI,EAAEF,CAAC;IAAEG,KAAK,EAAEX,KAAK,CAACY;EAAW,CAAE,CAAC,CAAC;EAC3M,OAAO,MAAM,IAAIb,KAAK,GAAG,CAAC,MAAM,EAAE,GAAGE,MAAM,CAAC,GAAGA,MAAM;AACvD;AACO,SAASY,kBAAkB,OAAuC;EAAA,IAAtC;IAAEd,KAAK;IAAEC,KAAK;IAAEc,QAAQ;IAAEC;EAAQ,CAAE;EACrE,IAAIhB,KAAK,IAAI,IAAI,EAAE;IACjB,OAAO,KAAK,CAAC;EACjB;EACE,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAMiB,MAAM,GAAGlB,aAAa,CAACC,KAAK,EAAEC,KAAK,CAAC,CAACiB,MAAM,CAAC,CAACC,GAAG,EAAEC,aAAa,KAAK;MACxE,IAAIA,aAAa,KAAK,MAAM,IAAIpB,KAAK,CAACqB,IAAI,KAAK,KAAK,CAAC,EAAE;QACrD,MAAMC,SAAS,GAAGP,QAAQ,CAACf,KAAK,CAACqB,IAAI,EAAEpB,KAAK,CAAC;QAC7C,IAAIsB,KAAK,CAACC,OAAO,CAACR,QAAQ,CAAC,EAAE;UAC3BA,QAAQ,CAACS,OAAO,CAAEC,IAAI,IAAK;YACzBP,GAAG,CAACO,IAAI,CAAC,GAAGJ,SAAS;UACjC,CAAW,CAAC;UACF,OAAOH,GAAG;QACpB;QACQA,GAAG,CAACH,QAAQ,CAAC,GAAGM,SAAS;QACzB,OAAOH,GAAG;MAClB;MACM,MAAMQ,eAAe,GAAGZ,QAAQ,CAACf,KAAK,CAACoB,aAAa,CAAC,EAAEnB,KAAK,CAAC;MAC7D,IAAIsB,KAAK,CAACC,OAAO,CAACR,QAAQ,CAAC,EAAE;QAC3BG,GAAG,CAAClB,KAAK,CAACS,EAAE,CAACkB,UAAU,CAACR,aAAa,CAAC,CAAC,GAAG,EAAE;QAC5CJ,QAAQ,CAACS,OAAO,CAAEC,IAAI,IAAK;UACzBP,GAAG,CAAClB,KAAK,CAACS,EAAE,CAACkB,UAAU,CAACR,aAAa,CAAC,CAAC,CAACM,IAAI,CAAC,GAAGC,eAAe;QACzE,CAAS,CAAC;QACF,OAAOR,GAAG;MAClB;MACMA,GAAG,CAAClB,KAAK,CAACS,EAAE,CAACkB,UAAU,CAACR,aAAa,CAAC,CAAC,GAAG;QACxC,CAACJ,QAAQ,GAAGW;MACpB,CAAO;MACD,OAAOR,GAAG;IAChB,CAAK,EAAE,EAAE,CAAC;IACN,OAAOF,MAAM;EACjB;EACE,MAAMY,QAAQ,GAAGd,QAAQ,CAACf,KAAK,EAAEC,KAAK,CAAC;EACvC,IAAIsB,KAAK,CAACC,OAAO,CAACR,QAAQ,CAAC,EAAE;IAC3B,OAAOA,QAAQ,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEO,IAAI,KAAK;MACpCP,GAAG,CAACO,IAAI,CAAC,GAAGG,QAAQ;MACpB,OAAOV,GAAG;IAChB,CAAK,EAAE,EAAE,CAAC;EACV;EACE,OAAO;IAAE,CAACH,QAAQ,GAAGa;EAAQ,CAAE;AACjC","names":["getSortedKeys","value","theme","sorted","Object","keys","filter","breakpoint","sort","a","b","fn","size","sizes","breakpoints","getResponsiveValue","getValue","property","result","reduce","acc","breakpointKey","base","baseValue","Array","isArray","forEach","prop","breakpointValue","largerThan","cssValue"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\node_modules\\@mantine\\core\\src\\Box\\style-system-props\\get-responsive-value\\get-responsive-value.ts"],"sourcesContent":["import { MantineTheme, CSSObject } from '@mantine/styles';\n\nfunction getSortedKeys(value: Record<string, any>, theme: MantineTheme) {\n  const sorted = Object.keys(value)\n    .filter((breakpoint) => breakpoint !== 'base')\n    .sort(\n      (a, b) =>\n        theme.fn.size({ size: a, sizes: theme.breakpoints }) -\n        theme.fn.size({ size: b, sizes: theme.breakpoints })\n    );\n  return 'base' in value ? ['base', ...sorted] : sorted;\n}\n\nexport type StyleProperty = string | string[];\n\ninterface GetResponsiveStyles {\n  value: any;\n  theme: MantineTheme;\n  getValue: (value: any, theme: MantineTheme) => any;\n  property: StyleProperty;\n}\n\nexport function getResponsiveValue({ value, theme, getValue, property }: GetResponsiveStyles) {\n  if (value == null) {\n    return undefined;\n  }\n\n  if (typeof value === 'object') {\n    const result = getSortedKeys(value, theme).reduce<CSSObject>((acc, breakpointKey) => {\n      if (breakpointKey === 'base' && value.base !== undefined) {\n        const baseValue = getValue(value.base, theme);\n\n        if (Array.isArray(property)) {\n          property.forEach((prop) => {\n            acc[prop] = baseValue;\n          });\n          return acc;\n        }\n\n        acc[property] = baseValue;\n        return acc;\n      }\n\n      const breakpointValue = getValue(value[breakpointKey], theme);\n\n      if (Array.isArray(property)) {\n        acc[theme.fn.largerThan(breakpointKey as any)] = {};\n        property.forEach((prop) => {\n          acc[theme.fn.largerThan(breakpointKey as any)][prop] = breakpointValue;\n        });\n\n        return acc;\n      }\n\n      acc[theme.fn.largerThan(breakpointKey as any)] = {\n        [property]: breakpointValue,\n      };\n\n      return acc;\n    }, {});\n\n    return result;\n  }\n\n  const cssValue = getValue(value, theme);\n\n  if (Array.isArray(property)) {\n    return property.reduce((acc, prop) => {\n      acc[prop] = cssValue;\n      return acc;\n    }, {});\n  }\n\n  return { [property]: cssValue };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}