{"ast":null,"code":"import { useRef, useEffect } from 'react';\nfunction useEventListener(type, listener, options) {\n  const ref = useRef();\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener(type, listener, options);\n      return () => {\n        var _a;\n        return (_a = ref.current) == null ? void 0 : _a.removeEventListener(type, listener, options);\n      };\n    }\n    return void 0;\n  }, [listener, options]);\n  return ref;\n}\nexport { useEventListener };","map":{"version":3,"mappings":";AACO,SAASA,gBAAgB,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACxD,MAAMC,GAAG,GAAGC,MAAM,EAAE;EACpBC,SAAS,CAAC,MAAM;IACd,IAAIF,GAAG,CAACG,OAAO,EAAE;MACfH,GAAG,CAACG,OAAO,CAACC,gBAAgB,CAACP,IAAI,EAAEC,QAAQ,EAAEC,OAAO,CAAC;MACrD,OAAO,MAAM;QACX,IAAIM,EAAE;QACN,OAAO,CAACA,EAAE,GAAGL,GAAG,CAACG,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGE,EAAE,CAACC,mBAAmB,CAACT,IAAI,EAAEC,QAAQ,EAAEC,OAAO,CAAC;MACpG,CAAO;IACP;IACI,OAAO,KAAK,CAAC;EACjB,CAAG,EAAE,CAACD,QAAQ,EAAEC,OAAO,CAAC,CAAC;EACvB,OAAOC,GAAG;AACZ","names":["useEventListener","type","listener","options","ref","useRef","useEffect","current","addEventListener","_a","removeEventListener"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\node_modules\\@mantine\\hooks\\src\\use-event-listener\\use-event-listener.ts"],"sourcesContent":["import { useRef, useEffect } from 'react';\n\nexport function useEventListener<K extends keyof HTMLElementEventMap, T extends HTMLElement = any>(\n  type: K,\n  listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions\n) {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener(type, listener, options);\n      return () => ref.current?.removeEventListener(type, listener, options);\n    }\n    return undefined;\n  }, [listener, options]);\n\n  return ref;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}