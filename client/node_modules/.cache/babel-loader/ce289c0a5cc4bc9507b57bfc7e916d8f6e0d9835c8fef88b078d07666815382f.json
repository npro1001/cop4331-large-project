{"ast":null,"code":"import { useState } from 'react';\nfunction useDisclosure(initialState, callbacks) {\n  const [opened, setOpened] = useState(initialState);\n  const open = () => {\n    var _a;\n    if (!opened) {\n      setOpened(true);\n      (_a = callbacks == null ? void 0 : callbacks.onOpen) == null ? void 0 : _a.call(callbacks);\n    }\n  };\n  const close = () => {\n    var _a;\n    if (opened) {\n      setOpened(false);\n      (_a = callbacks == null ? void 0 : callbacks.onClose) == null ? void 0 : _a.call(callbacks);\n    }\n  };\n  const toggle = () => {\n    opened ? close() : open();\n  };\n  return [opened, {\n    open,\n    close,\n    toggle\n  }];\n}\nexport { useDisclosure };","map":{"version":3,"mappings":";AACO,SAASA,aAAa,CAACC,YAAY,EAAEC,SAAS,EAAE;EACrD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGC,QAAQ,CAACJ,YAAY,CAAC;EAClD,MAAMK,IAAI,GAAG,MAAM;IACjB,IAAIC,EAAE;IACN,IAAI,CAACJ,MAAM,EAAE;MACXC,SAAS,CAAC,IAAI,CAAC;MACf,CAACG,EAAE,GAAGL,SAAS,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,SAAS,CAACM,MAAM,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,EAAE,CAACE,IAAI,CAACP,SAAS,CAAC;IAChG;EACA,CAAG;EACD,MAAMQ,KAAK,GAAG,MAAM;IAClB,IAAIH,EAAE;IACN,IAAIJ,MAAM,EAAE;MACVC,SAAS,CAAC,KAAK,CAAC;MAChB,CAACG,EAAE,GAAGL,SAAS,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,SAAS,CAACS,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGJ,EAAE,CAACE,IAAI,CAACP,SAAS,CAAC;IACjG;EACA,CAAG;EACD,MAAMU,MAAM,GAAG,MAAM;IACnBT,MAAM,GAAGO,KAAK,EAAE,GAAGJ,IAAI,EAAE;EAC7B,CAAG;EACD,OAAO,CAACH,MAAM,EAAE;IAAEG,IAAI;IAAEI,KAAK;IAAEE;EAAM,CAAE,CAAC;AAC1C","names":["useDisclosure","initialState","callbacks","opened","setOpened","useState","open","_a","onOpen","call","close","onClose","toggle"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\node_modules\\@mantine\\hooks\\src\\use-disclosure\\use-disclosure.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport function useDisclosure(\n  initialState: boolean,\n  callbacks?: { onOpen?(): void; onClose?(): void }\n) {\n  const [opened, setOpened] = useState(initialState);\n\n  const open = () => {\n    if (!opened) {\n      setOpened(true);\n      callbacks?.onOpen?.();\n    }\n  };\n\n  const close = () => {\n    if (opened) {\n      setOpened(false);\n      callbacks?.onClose?.();\n    }\n  };\n\n  const toggle = () => {\n    opened ? close() : open();\n  };\n\n  return [opened, { open, close, toggle }] as const;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}