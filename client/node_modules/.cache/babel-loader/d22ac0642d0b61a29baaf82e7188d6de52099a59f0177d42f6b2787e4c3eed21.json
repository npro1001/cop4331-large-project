{"ast":null,"code":"import { useState, useRef, useCallback } from 'react';\nfunction useIntersection(options) {\n  const [entry, setEntry] = useState(null);\n  const observer = useRef();\n  const ref = useCallback(element => {\n    if (observer.current) {\n      observer.current.disconnect();\n      observer.current = null;\n    }\n    if (element === null) {\n      setEntry(null);\n      return;\n    }\n    observer.current = new IntersectionObserver(_ref => {\n      let [_entry] = _ref;\n      setEntry(_entry);\n    }, options);\n    observer.current.observe(element);\n  }, [options == null ? void 0 : options.rootMargin, options == null ? void 0 : options.root, options == null ? void 0 : options.threshold]);\n  return {\n    ref,\n    entry\n  };\n}\nexport { useIntersection };","map":{"version":3,"mappings":";AACO,SAASA,eAAe,CAACC,OAAO,EAAE;EACvC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMC,QAAQ,GAAGC,MAAM,EAAE;EACzB,MAAMC,GAAG,GAAGC,WAAW,CAAEC,OAAO,IAAK;IACnC,IAAIJ,QAAQ,CAACK,OAAO,EAAE;MACpBL,QAAQ,CAACK,OAAO,CAACC,UAAU,EAAE;MAC7BN,QAAQ,CAACK,OAAO,GAAG,IAAI;IAC7B;IACI,IAAID,OAAO,KAAK,IAAI,EAAE;MACpBN,QAAQ,CAAC,IAAI,CAAC;MACd;IACN;IACIE,QAAQ,CAACK,OAAO,GAAG,IAAIE,oBAAoB,CAAC,QAAc;MAAA,IAAb,CAACC,MAAM,CAAC;MACnDV,QAAQ,CAACU,MAAM,CAAC;IACtB,CAAK,EAAEZ,OAAO,CAAC;IACXI,QAAQ,CAACK,OAAO,CAACI,OAAO,CAACL,OAAO,CAAC;EACrC,CAAG,EAAE,CAACR,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,UAAU,EAAEd,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACe,IAAI,EAAEf,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACgB,SAAS,CAAC,CAAC;EAC1I,OAAO;IAAEV,GAAG;IAAEL;EAAK,CAAE;AACvB","names":["useIntersection","options","entry","setEntry","useState","observer","useRef","ref","useCallback","element","current","disconnect","IntersectionObserver","_entry","observe","rootMargin","root","threshold"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\node_modules\\@mantine\\hooks\\src\\use-intersection\\use-intersection.ts"],"sourcesContent":["import { useCallback, useRef, useState } from 'react';\n\nexport function useIntersection<T extends HTMLElement = any>(\n  options?: ConstructorParameters<typeof IntersectionObserver>[1]\n) {\n  const [entry, setEntry] = useState<IntersectionObserverEntry>(null);\n\n  const observer = useRef<IntersectionObserver>();\n\n  const ref = useCallback(\n    (element: T | null) => {\n      if (observer.current) {\n        observer.current.disconnect();\n        observer.current = null;\n      }\n\n      if (element === null) {\n        setEntry(null);\n        return;\n      }\n\n      observer.current = new IntersectionObserver(([_entry]) => {\n        setEntry(_entry);\n      }, options);\n\n      observer.current.observe(element);\n    },\n    [options?.rootMargin, options?.root, options?.threshold]\n  );\n\n  return { ref, entry };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}