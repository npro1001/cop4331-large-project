{"ast":null,"code":"import React, { Children } from 'react';\nimport { useComponentDefaultProps } from '@mantine/styles';\nimport useStyles from './MediaQuery.styles.js';\nfunction MediaQuery(props) {\n  var _a;\n  const {\n    children,\n    smallerThan,\n    largerThan,\n    query,\n    styles,\n    className\n  } = useComponentDefaultProps(\"MediaQuery\", {}, props);\n  const {\n    classes,\n    cx\n  } = useStyles({\n    smallerThan,\n    largerThan,\n    query,\n    styles\n  }, {\n    name: \"MediaQuery\"\n  });\n  const child = Children.only(children);\n  if (typeof child === \"object\" && child !== null && \"props\" in child) {\n    return React.cloneElement(child, {\n      className: cx(classes.media, (_a = child.props) == null ? void 0 : _a.className, className)\n    });\n  }\n  return child;\n}\nMediaQuery.displayName = \"@mantine/core/MediaQuery\";\nexport { MediaQuery };","map":{"version":3,"mappings":";;;AAKO,SAASA,UAAU,CAACC,KAAK,EAAE;EAChC,IAAIC,EAAE;EACN,MAAM;IAAEC,QAAQ;IAAEC,WAAW;IAAEC,UAAU;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAS,CAAE,GAAGC,wBAAwB,CAAC,YAAY,EAAE,EAAE,EAAER,KAAK,CAAC;EACzH,MAAM;IAAES,OAAO;IAAEC;EAAE,CAAE,GAAGC,SAAS,CAAC;IAAER,WAAW;IAAEC,UAAU;IAAEC,KAAK;IAAEC;EAAM,CAAE,EAAE;IAAEM,IAAI,EAAE;EAAY,CAAE,CAAC;EACrG,MAAMC,KAAK,GAAGC,QAAQ,CAACC,IAAI,CAACb,QAAQ,CAAC;EACrC,IAAI,OAAOW,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,IAAI,OAAO,IAAIA,KAAK,EAAE;IACnE,OAAOG,KAAK,CAACC,YAAY,CAACJ,KAAK,EAAE;MAC/BN,SAAS,EAAEG,EAAE,CAACD,OAAO,CAACS,KAAK,EAAE,CAACjB,EAAE,GAAGY,KAAK,CAACb,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGC,EAAE,CAACM,SAAS,EAAEA,SAAS;IAChG,CAAK,CAAC;EACN;EACE,OAAOM,KAAK;AACd;AACAd,UAAU,CAACoB,WAAW,GAAG,0BAA0B","names":["MediaQuery","props","_a","children","smallerThan","largerThan","query","styles","className","useComponentDefaultProps","classes","cx","useStyles","name","child","Children","only","React","cloneElement","media","displayName"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\node_modules\\@mantine\\core\\src\\MediaQuery\\MediaQuery.tsx"],"sourcesContent":["import React, { Children } from 'react';\nimport {\n  MantineNumberSize,\n  CSSObject,\n  useComponentDefaultProps,\n  MantineTheme,\n} from '@mantine/styles';\nimport useStyles from './MediaQuery.styles';\n\nexport interface MediaQueryProps {\n  className?: string;\n\n  /** Child that should be shown at given breakpoint, it must accept className prop */\n  children: React.ReactNode;\n\n  /** Styles applied to child when viewport is smaller than given breakpoint */\n  smallerThan?: MantineNumberSize;\n\n  /** Styles applied to child when viewport is larger than given breakpoint */\n  largerThan?: MantineNumberSize;\n\n  /** Any other media query */\n  query?: string;\n\n  /** Styles applied to child when breakpoint matches */\n  styles: CSSObject | ((theme: MantineTheme) => CSSObject);\n}\n\nexport function MediaQuery(props: MediaQueryProps) {\n  const { children, smallerThan, largerThan, query, styles, className } = useComponentDefaultProps(\n    'MediaQuery',\n    {},\n    props\n  );\n\n  const { classes, cx } = useStyles(\n    { smallerThan, largerThan, query, styles },\n    { name: 'MediaQuery' }\n  );\n\n  const child = Children.only(children) as React.ReactElement;\n\n  if (typeof child === 'object' && child !== null && 'props' in child) {\n    return React.cloneElement(child, {\n      className: cx(classes.media, child.props?.className, className),\n    });\n  }\n\n  return child;\n}\n\nMediaQuery.displayName = '@mantine/core/MediaQuery';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}