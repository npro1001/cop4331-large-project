{"ast":null,"code":"import { useState } from 'react';\nfunction useSelectionState() {\n  let initialSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[], []];\n  const [selection, setSelection] = useState(initialSelection);\n  const handleSelect = (listIndex, value) => setSelection(currentSelection => {\n    const listSelection = currentSelection[listIndex];\n    let result = listSelection;\n    if (typeof value === \"string\") {\n      if (listSelection.includes(value)) {\n        result = listSelection.filter(item => item !== value);\n      } else {\n        result = [...listSelection, value];\n      }\n    }\n    const clone = [...currentSelection];\n    clone[listIndex] = result;\n    return clone;\n  });\n  const handleDeselect = (listIndex, values) => setSelection(currentSelection => {\n    const clone = [...currentSelection];\n    clone[listIndex] = currentSelection[listIndex].filter(item => !values.includes(item));\n    return clone;\n  });\n  const handleDeselectAll = listIndex => setSelection(currentSelection => {\n    const clone = [...currentSelection];\n    clone[listIndex] = [];\n    return clone;\n  });\n  const handlers = {\n    select: handleSelect,\n    deselect: handleDeselect,\n    deselectAll: handleDeselectAll\n  };\n  return [selection, handlers];\n}\nexport { useSelectionState };","map":{"version":3,"mappings":";AACO,SAASA,iBAAiB,GAA8B;EAAA,IAA7BC,gBAAgB,uEAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EAC3D,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGC,QAAQ,CAACH,gBAAgB,CAAC;EAC5D,MAAMI,YAAY,GAAG,CAACC,SAAS,EAAEC,KAAK,KAAKJ,YAAY,CAAEK,gBAAgB,IAAK;IAC5E,MAAMC,aAAa,GAAGD,gBAAgB,CAACF,SAAS,CAAC;IACjD,IAAII,MAAM,GAAGD,aAAa;IAC1B,IAAI,OAAOF,KAAK,KAAK,QAAQ,EAAE;MAC7B,IAAIE,aAAa,CAACE,QAAQ,CAACJ,KAAK,CAAC,EAAE;QACjCG,MAAM,GAAGD,aAAa,CAACG,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAKN,KAAK,CAAC;MAC/D,CAAO,MAAM;QACLG,MAAM,GAAG,CAAC,GAAGD,aAAa,EAAEF,KAAK,CAAC;MAC1C;IACA;IACI,MAAMO,KAAK,GAAG,CAAC,GAAGN,gBAAgB,CAAC;IACnCM,KAAK,CAACR,SAAS,CAAC,GAAGI,MAAM;IACzB,OAAOI,KAAK;EAChB,CAAG,CAAC;EACF,MAAMC,cAAc,GAAG,CAACT,SAAS,EAAEU,MAAM,KAAKb,YAAY,CAAEK,gBAAgB,IAAK;IAC/E,MAAMM,KAAK,GAAG,CAAC,GAAGN,gBAAgB,CAAC;IACnCM,KAAK,CAACR,SAAS,CAAC,GAAGE,gBAAgB,CAACF,SAAS,CAAC,CAACM,MAAM,CAAEC,IAAI,IAAK,CAACG,MAAM,CAACL,QAAQ,CAACE,IAAI,CAAC,CAAC;IACvF,OAAOC,KAAK;EAChB,CAAG,CAAC;EACF,MAAMG,iBAAiB,GAAIX,SAAS,IAAKH,YAAY,CAAEK,gBAAgB,IAAK;IAC1E,MAAMM,KAAK,GAAG,CAAC,GAAGN,gBAAgB,CAAC;IACnCM,KAAK,CAACR,SAAS,CAAC,GAAG,EAAE;IACrB,OAAOQ,KAAK;EAChB,CAAG,CAAC;EACF,MAAMI,QAAQ,GAAG;IACfC,MAAM,EAAEd,YAAY;IACpBe,QAAQ,EAAEL,cAAc;IACxBM,WAAW,EAAEJ;EACjB,CAAG;EACD,OAAO,CAACf,SAAS,EAAEgB,QAAQ,CAAC;AAC9B","names":["useSelectionState","initialSelection","selection","setSelection","useState","handleSelect","listIndex","value","currentSelection","listSelection","result","includes","filter","item","clone","handleDeselect","values","handleDeselectAll","handlers","select","deselect","deselectAll"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\node_modules\\@mantine\\core\\src\\TransferList\\use-selection-state\\use-selection-state.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport type Selection = [string[], string[]];\n\nexport function useSelectionState(initialSelection: Selection = [[], []]) {\n  const [selection, setSelection] = useState<Selection>(initialSelection);\n\n  const handleSelect = (listIndex: 0 | 1, value: string) =>\n    setSelection((currentSelection) => {\n      const listSelection = currentSelection[listIndex];\n      let result = listSelection;\n\n      if (typeof value === 'string') {\n        if (listSelection.includes(value)) {\n          result = listSelection.filter((item) => item !== value);\n        } else {\n          result = [...listSelection, value];\n        }\n      }\n\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = result;\n      return clone;\n    });\n\n  const handleDeselect = (listIndex: 0 | 1, values: string[]) =>\n    setSelection((currentSelection) => {\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = currentSelection[listIndex].filter((item) => !values.includes(item));\n      return clone;\n    });\n\n  const handleDeselectAll = (listIndex: 0 | 1) =>\n    setSelection((currentSelection) => {\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = [];\n      return clone;\n    });\n\n  const handlers = {\n    select: handleSelect,\n    deselect: handleDeselect,\n    deselectAll: handleDeselectAll,\n  };\n\n  return [selection, handlers] as const;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}