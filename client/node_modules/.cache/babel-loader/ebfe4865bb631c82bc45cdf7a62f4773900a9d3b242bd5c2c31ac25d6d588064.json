{"ast":null,"code":"import React, { createContext, useContext } from 'react';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst AvatarGroupContext = createContext(null);\nfunction AvatarGroupProvider(_ref) {\n  let {\n    spacing,\n    children\n  } = _ref;\n  return /* @__PURE__ */React.createElement(AvatarGroupContext.Provider, {\n    value: {\n      spacing\n    }\n  }, children);\n}\nfunction useAvatarGroupContext() {\n  const ctx = useContext(AvatarGroupContext);\n  if (ctx) {\n    return __spreadProps(__spreadValues({}, ctx), {\n      withinGroup: true\n    });\n  }\n  return {\n    spacing: null,\n    withinGroup: false\n  };\n}\nexport { AvatarGroupProvider, useAvatarGroupContext };","map":{"version":3,"mappings":";AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAc;AACrC,IAAIC,UAAU,GAAGF,MAAM,CAACG,gBAAgB;AACxC,IAAIC,iBAAiB,GAAGJ,MAAM,CAACK,yBAAyB;AACxD,IAAIC,mBAAmB,GAAGN,MAAM,CAACO,qBAAqB;AACtD,IAAIC,YAAY,GAAGR,MAAM,CAACS,SAAS,CAACC,cAAc;AAClD,IAAIC,YAAY,GAAGX,MAAM,CAACS,SAAS,CAACG,oBAAoB;AACxD,IAAIC,eAAe,GAAG,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAKD,GAAG,IAAID,GAAG,GAAGf,SAAS,CAACe,GAAG,EAAEC,GAAG,EAAE;EAAEE,UAAU,EAAE,IAAI;EAAEC,YAAY,EAAE,IAAI;EAAEC,QAAQ,EAAE,IAAI;EAAEH;AAAK,CAAE,CAAC,GAAGF,GAAG,CAACC,GAAG,CAAC,GAAGC,KAAK;AAC/J,IAAII,cAAc,GAAG,CAACC,CAAC,EAAEC,CAAC,KAAK;EAC7B,KAAK,IAAIC,IAAI,IAAID,CAAC,KAAKA,CAAC,GAAG,EAAE,CAAC,EAC5B,IAAId,YAAY,CAACgB,IAAI,CAACF,CAAC,EAAEC,IAAI,CAAC,EAC5BV,eAAe,CAACQ,CAAC,EAAEE,IAAI,EAAED,CAAC,CAACC,IAAI,CAAC,CAAC;EACrC,IAAIjB,mBAAmB,EACrB,KAAK,IAAIiB,IAAI,IAAIjB,mBAAmB,CAACgB,CAAC,CAAC,EAAE;IACvC,IAAIX,YAAY,CAACa,IAAI,CAACF,CAAC,EAAEC,IAAI,CAAC,EAC5BV,eAAe,CAACQ,CAAC,EAAEE,IAAI,EAAED,CAAC,CAACC,IAAI,CAAC,CAAC;EACzC;EACE,OAAOF,CAAC;AACV,CAAC;AACD,IAAII,aAAa,GAAG,CAACJ,CAAC,EAAEC,CAAC,KAAKpB,UAAU,CAACmB,CAAC,EAAEjB,iBAAiB,CAACkB,CAAC,CAAC,CAAC;AAEjE,MAAMI,kBAAkB,GAAGC,aAAa,CAAC,IAAI,CAAC;AACvC,SAASC,mBAAmB,OAAwB;EAAA,IAAvB;IAAEC,OAAO;IAAEC;EAAQ,CAAE;EACvD,sBAAuBC,KAAK,CAACC,aAAa,CAACN,kBAAkB,CAACO,QAAQ,EAAE;IACtEjB,KAAK,EAAE;MAAEa;IAAO;EACpB,CAAG,EAAEC,QAAQ,CAAC;AACd;AACO,SAASI,qBAAqB,GAAG;EACtC,MAAMC,GAAG,GAAGC,UAAU,CAACV,kBAAkB,CAAC;EAC1C,IAAIS,GAAG,EAAE;IACP,OAAOV,aAAa,CAACL,cAAc,CAAC,EAAE,EAAEe,GAAG,CAAC,EAAE;MAAEE,WAAW,EAAE;IAAI,CAAE,CAAC;EACxE;EACE,OAAO;IAAER,OAAO,EAAE,IAAI;IAAEQ,WAAW,EAAE;EAAK,CAAE;AAC9C","names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","AvatarGroupContext","createContext","AvatarGroupProvider","spacing","children","React","createElement","Provider","useAvatarGroupContext","ctx","useContext","withinGroup"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\node_modules\\@mantine\\core\\src\\Avatar\\AvatarGroup\\AvatarGroup.context.tsx"],"sourcesContent":["import React, { createContext, useContext } from 'react';\nimport { MantineNumberSize } from '@mantine/styles';\n\ninterface ContextValue {\n  spacing: MantineNumberSize;\n}\n\nconst AvatarGroupContext = createContext<ContextValue>(null);\n\ninterface AvatarGroupProviderProps extends ContextValue {\n  children: React.ReactNode;\n}\n\nexport function AvatarGroupProvider({ spacing, children }: AvatarGroupProviderProps) {\n  return <AvatarGroupContext.Provider value={{ spacing }}>{children}</AvatarGroupContext.Provider>;\n}\n\nexport function useAvatarGroupContext() {\n  const ctx = useContext(AvatarGroupContext);\n\n  if (ctx) {\n    return { ...ctx, withinGroup: true };\n  }\n\n  return { spacing: null, withinGroup: false };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}