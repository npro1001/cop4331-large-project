{"ast":null,"code":"import { useMemo } from 'react';\nimport { useUncontrolled } from '../use-uncontrolled/use-uncontrolled.js';\nimport { range } from '../utils/range/range.js';\nconst DOTS = \"dots\";\nfunction usePagination(_ref) {\n  let {\n    total,\n    siblings = 1,\n    boundaries = 1,\n    page,\n    initialPage = 1,\n    onChange\n  } = _ref;\n  const [activePage, setActivePage] = useUncontrolled({\n    value: page,\n    onChange,\n    defaultValue: initialPage,\n    finalValue: initialPage\n  });\n  const setPage = pageNumber => {\n    if (pageNumber <= 0) {\n      setActivePage(1);\n    } else if (pageNumber > total) {\n      setActivePage(total);\n    } else {\n      setActivePage(pageNumber);\n    }\n  };\n  const next = () => setPage(activePage + 1);\n  const previous = () => setPage(activePage - 1);\n  const first = () => setPage(1);\n  const last = () => setPage(total);\n  const paginationRange = useMemo(() => {\n    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n    if (totalPageNumbers >= total) {\n      return range(1, total);\n    }\n    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);\n    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = siblings * 2 + boundaries + 2;\n      return [...range(1, leftItemCount), DOTS, ...range(total - (boundaries - 1), total)];\n    }\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = boundaries + 1 + 2 * siblings;\n      return [...range(1, boundaries), DOTS, ...range(total - rightItemCount, total)];\n    }\n    return [...range(1, boundaries), DOTS, ...range(leftSiblingIndex, rightSiblingIndex), DOTS, ...range(total - boundaries + 1, total)];\n  }, [total, siblings, activePage]);\n  return {\n    range: paginationRange,\n    active: activePage,\n    setPage,\n    next,\n    previous,\n    first,\n    last\n  };\n}\nexport { DOTS, usePagination };","map":{"version":3,"mappings":"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","names":["DOTS","usePagination","total","siblings","boundaries","page","initialPage","onChange","activePage","setActivePage","useUncontrolled","value","defaultValue","finalValue","setPage","pageNumber","next","previous","first","last","paginationRange","useMemo","totalPageNumbers","range","leftSiblingIndex","Math","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","leftItemCount","rightItemCount","active"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\node_modules\\@mantine\\hooks\\src\\use-pagination\\use-pagination.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { useUncontrolled } from '../use-uncontrolled/use-uncontrolled';\nimport { range } from '../utils';\n\nexport const DOTS = 'dots';\n\nexport interface PaginationParams {\n  /** Page selected on initial render, defaults to 1 */\n  initialPage?: number;\n\n  /** Controlled active page number */\n  page?: number;\n\n  /** Total amount of pages */\n  total: number;\n\n  /** Siblings amount on left/right side of selected page, defaults to 1 */\n  siblings?: number;\n\n  /** Amount of elements visible on left/right edges, defaults to 1  */\n  boundaries?: number;\n\n  /** Callback fired after change of each page */\n  onChange?: (page: number) => void;\n}\n\nexport function usePagination({\n  total,\n  siblings = 1,\n  boundaries = 1,\n  page,\n  initialPage = 1,\n  onChange,\n}: PaginationParams) {\n  const [activePage, setActivePage] = useUncontrolled({\n    value: page,\n    onChange,\n    defaultValue: initialPage,\n    finalValue: initialPage,\n  });\n\n  const setPage = (pageNumber: number) => {\n    if (pageNumber <= 0) {\n      setActivePage(1);\n    } else if (pageNumber > total) {\n      setActivePage(total);\n    } else {\n      setActivePage(pageNumber);\n    }\n  };\n\n  const next = () => setPage(activePage + 1);\n  const previous = () => setPage(activePage - 1);\n  const first = () => setPage(1);\n  const last = () => setPage(total);\n\n  const paginationRange = useMemo((): (number | 'dots')[] => {\n    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n    if (totalPageNumbers >= total) {\n      return range(1, total);\n    }\n\n    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);\n\n    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = siblings * 2 + boundaries + 2;\n      return [...range(1, leftItemCount), DOTS, ...range(total - (boundaries - 1), total)];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = boundaries + 1 + 2 * siblings;\n      return [...range(1, boundaries), DOTS, ...range(total - rightItemCount, total)];\n    }\n\n    return [\n      ...range(1, boundaries),\n      DOTS,\n      ...range(leftSiblingIndex, rightSiblingIndex),\n      DOTS,\n      ...range(total - boundaries + 1, total),\n    ];\n  }, [total, siblings, activePage]);\n\n  return {\n    range: paginationRange,\n    active: activePage,\n    setPage,\n    next,\n    previous,\n    first,\n    last,\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}