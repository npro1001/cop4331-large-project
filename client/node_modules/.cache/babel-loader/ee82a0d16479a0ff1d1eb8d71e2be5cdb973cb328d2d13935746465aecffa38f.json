{"ast":null,"code":"import axios from 'axios';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\n// API URL\nconst API_URL = 'api/spotify';\n\n// Map for localStorage keys\nconst LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp'\n};\n\n// Map to retrieve localStorage values\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\n\n// /**\n//  * HAandles logic for retrieving the Spotify access token from localStorage\n//  * or URL query params\n//  * @returns {string} A spotify access token\n//  */\n// const getAccessToken = () => {\n//     const queryString = window.location.search\n//     const urlParams = new URLSearchParams(queryString)\n//     const queryParams = {\n//         [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n//         [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n//         [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\n//     }\n//     const hasError = urlParams.get('error')\n\n//     // If theres an error OR the token has expired => refresh token\n//     if(hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n//       refreshToken()\n//     }\n\n//     // If theres a valid access token, use that\n//     if(LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n//         return LOCALSTORAGE_VALUES.accessToken\n//     }\n\n//     // If there is a token in the URL query params, user is logging in for the first time\n//     if(queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n//         // Store the query params in localStorage\n//         for (const property in queryParams) {\n//             window.localStorage.setItem(property, queryParams[property])\n//         }\n//         // Set timestamp\n//         window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now())\n\n//         // Return access token from query params\n//         return queryParams[LOCALSTORAGE_KEYS.accessToken]\n//     }\n\n//     return false\n// }\n\n// /**\n//  * Checks if the amount of time that has elapsed between the timestamp in localStorage\n//  * and now is greater than the expiration time of 3600 seconds (1 hour).\n//  * @returns {boolean} Whether or not the access token in localStorage has expired\n//  */\n// const hasTokenExpired = () => {\n//     const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES\n//     if (!accessToken || !timestamp) {\n//       return false\n//     }\n//     const millisecondsElapsed = Date.now() - Number(timestamp)\n//     return (millisecondsElapsed / 1000) > Number(expireTime)\n// }\n\n// /**\n//  * Use the refresh token in localStorage to hit the /refresh_token endpoint\n//  * in our Node app, then update values in localStorage with data from response.\n//  * @returns {void}\n//  */\n// const refreshToken = async () => {\n//     try {\n//       // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n//       if (!LOCALSTORAGE_VALUES.refreshToken ||\n//         LOCALSTORAGE_VALUES.refreshToken === 'undefined' ||\n//         (Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000) < 1000\n//       ) {\n//         console.error('No refresh token available')       \n//         logout()\n//       }\n//       console.log(\"here\") //! ******\n\n//       // Use `/refresh_token` endpoint from our Node app\n//       const { data } = await axios.get(`${API_URL}/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`)\n\n//       // Update localStorage values\n//       window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token)\n//       window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now())\n\n//       // Reload the page for localStorage updates to be reflected\n//       window.location.reload()\n\n//     } catch (e) {\n//       console.error(e)\n//     }\n// }\n\n// /**\n//  * Get Current User's Profile\n//  * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile\n//  * @returns {Promise}\n//  */\n// export const getCurrentUserProfile = () => axios.get('/me');\n\n// /**\n//  * Get a List of Current User's Playlists\n//  * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-list-of-current-users-playlists\n//  * @returns {Promise}\n//  */\n// export const getCurrentUserPlaylists = (limit = 20) => {\n//     return axios.get(`/me/playlists?limit=${limit}`);\n//   };\n\n/**\r\n * Get a User's Top Artists and Tracks\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-top-artists-and-tracks\r\n * @param {string} time_range - 'short_term' (last 4 weeks) 'medium_term' (last 6 months) or 'long_term' (calculated from several years of data and including all new data as it becomes available). Defaults to 'short_term'\r\n * @returns {Promise}\r\n */\nexport const getTopArtists = async function () {\n  let time_range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'short_term';\n  const response = await axios({\n    method: 'get',\n    url: `https://api.spotify.com/v1/me/top/artists?time_range=${time_range}`,\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': `Bearer ${LOCALSTORAGE_VALUES.accessToken}`\n    }\n  });\n  console.log(response);\n  return response;\n};\n\n//get a user's top genre\nexport const getTopGenre = async function () {\n  let time_range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'short_term';\n  const response = await axios({\n    method: 'get',\n    url: `https://api.spotify.com/v1/me/top/genre?time_range=${time_range}`,\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': `Bearer ${LOCALSTORAGE_VALUES.accessToken}`\n    }\n  });\n  console.log(response);\n  return response;\n};\n\n//get recommended songs/artists?\nexport const recommendSongs = async (token, user) => {\n  const response = await axios({\n    method: 'get',\n    url: `${API_URL}/user/${user._id}/recommendations`,\n    //might be wrong\n    //url: `https://api.spotify.com/v1/recommendations`,//might be wrong\n    headers: {\n      'Accept': \"application/json\",\n      'Content-Type': \"application/json\",\n      'Authorization': `Bearer ${LOCALSTORAGE_VALUES.accessToken}`\n    }\n  });\n  console.log(response);\n  return response;\n};\n\n// // @desc    Get user's top artist\n// // @route   GET /api/spotify/top_artist\n// // @access  Private\n// export const getTopArtist = async () => {\n\n//     try{\n//         const response = await axios({\n//             method: 'get',\n//             url: `https://api.spotify.com/v1/me/top/artists?limit=1`,\n//             headers: {\n//                 'Content-type':'application/json',\n//                 'Authorization':`Bearer ${LOCALSTORAGE_VALUES.accessToken}`\n//             }\n//         })\n//         // console.log(response);\n//         // console.log(response.items[0]);\n//         if(response) return response;\n//     } catch (error) {\n//         console.error(error)\n//     }\n// }\n\n// /**\n//  * Get a User's Top Tracks\n//  * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-top-artists-and-tracks\n//  * @param {string} time_range - 'short_term' (last 4 weeks) 'medium_term' (last 6 months) or 'long_term' (calculated from several years of data and including all new data as it becomes available). Defaults to 'short_term'\n//  * @returns {Promise}\n//  */\n// export const getTopTracks = (time_range = 'short_term') => {\n//     return axios.get(`/me/top/tracks?time_range=${time_range}`);\n//   };\n\n// export const logout = () => {\n//     // Clear all localStorage items\n//     for(const property in LOCALSTORAGE_KEYS) {\n//         window.localStorage.removeItem(LOCALSTORAGE_KEYS[property])\n//     }\n//     // Navigate to homepage\n//     window.location = window.location.origin\n// }\n\n// export const accessToken = getAccessToken()\n\n// /**\n//      * Axios global request headers\n//      */\n//     axios.defaults.baseURL = 'https://api.spotify.com/v1';\n//     axios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\n//     axios.defaults.headers['Content-Type'] = 'application/json';","map":{"version":3,"names":["axios","BrowserRouter","Router","Routes","Route","API_URL","LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","getTopArtists","time_range","response","method","url","headers","console","log","getTopGenre","recommendSongs","token","user","_id"],"sources":["C:/Users/rff96/Documents/GitHub/cop4331-large-project/client/src/features/spotify/spotify.js"],"sourcesContent":["import axios from 'axios'\r\nimport {BrowserRouter as Router, Routes, Route} from 'react-router-dom'\r\n\r\n// API URL\r\nconst API_URL = 'api/spotify'\r\n\r\n// Map for localStorage keys\r\nconst LOCALSTORAGE_KEYS = {\r\n    accessToken: 'spotify_access_token',\r\n    refreshToken: 'spotify_refresh_token',\r\n    expireTime: 'spotify_token_expire_time',\r\n    timestamp: 'spotify_token_timestamp',\r\n}\r\n\r\n// Map to retrieve localStorage values\r\nconst LOCALSTORAGE_VALUES = {\r\n    accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\r\n    refreshToken:  window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\r\n    expireTime:  window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\r\n    timestamp:  window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\r\n}\r\n\r\n// /**\r\n//  * HAandles logic for retrieving the Spotify access token from localStorage\r\n//  * or URL query params\r\n//  * @returns {string} A spotify access token\r\n//  */\r\n// const getAccessToken = () => {\r\n//     const queryString = window.location.search\r\n//     const urlParams = new URLSearchParams(queryString)\r\n//     const queryParams = {\r\n//         [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\r\n//         [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\r\n//         [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\r\n//     }\r\n//     const hasError = urlParams.get('error')\r\n    \r\n//     // If theres an error OR the token has expired => refresh token\r\n//     if(hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n//       refreshToken()\r\n//     }\r\n    \r\n//     // If theres a valid access token, use that\r\n//     if(LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\r\n//         return LOCALSTORAGE_VALUES.accessToken\r\n//     }\r\n    \r\n    \r\n//     // If there is a token in the URL query params, user is logging in for the first time\r\n//     if(queryParams[LOCALSTORAGE_KEYS.accessToken]) {\r\n//         // Store the query params in localStorage\r\n//         for (const property in queryParams) {\r\n//             window.localStorage.setItem(property, queryParams[property])\r\n//         }\r\n//         // Set timestamp\r\n//         window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now())\r\n\r\n//         // Return access token from query params\r\n//         return queryParams[LOCALSTORAGE_KEYS.accessToken]\r\n//     }\r\n\r\n//     return false\r\n// }\r\n\r\n// /**\r\n//  * Checks if the amount of time that has elapsed between the timestamp in localStorage\r\n//  * and now is greater than the expiration time of 3600 seconds (1 hour).\r\n//  * @returns {boolean} Whether or not the access token in localStorage has expired\r\n//  */\r\n// const hasTokenExpired = () => {\r\n//     const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES\r\n//     if (!accessToken || !timestamp) {\r\n//       return false\r\n//     }\r\n//     const millisecondsElapsed = Date.now() - Number(timestamp)\r\n//     return (millisecondsElapsed / 1000) > Number(expireTime)\r\n// }\r\n\r\n// /**\r\n//  * Use the refresh token in localStorage to hit the /refresh_token endpoint\r\n//  * in our Node app, then update values in localStorage with data from response.\r\n//  * @returns {void}\r\n//  */\r\n// const refreshToken = async () => {\r\n//     try {\r\n//       // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\r\n//       if (!LOCALSTORAGE_VALUES.refreshToken ||\r\n//         LOCALSTORAGE_VALUES.refreshToken === 'undefined' ||\r\n//         (Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000) < 1000\r\n//       ) {\r\n//         console.error('No refresh token available')       \r\n//         logout()\r\n//       }\r\n//       console.log(\"here\") //! ******\r\n\r\n\r\n//       // Use `/refresh_token` endpoint from our Node app\r\n//       const { data } = await axios.get(`${API_URL}/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`)\r\n\r\n//       // Update localStorage values\r\n//       window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token)\r\n//       window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now())\r\n  \r\n//       // Reload the page for localStorage updates to be reflected\r\n//       window.location.reload()\r\n  \r\n//     } catch (e) {\r\n//       console.error(e)\r\n//     }\r\n// }\r\n\r\n\r\n// /**\r\n//  * Get Current User's Profile\r\n//  * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile\r\n//  * @returns {Promise}\r\n//  */\r\n// export const getCurrentUserProfile = () => axios.get('/me');\r\n\r\n// /**\r\n//  * Get a List of Current User's Playlists\r\n//  * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-list-of-current-users-playlists\r\n//  * @returns {Promise}\r\n//  */\r\n// export const getCurrentUserPlaylists = (limit = 20) => {\r\n//     return axios.get(`/me/playlists?limit=${limit}`);\r\n//   };\r\n\r\n/**\r\n * Get a User's Top Artists and Tracks\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-top-artists-and-tracks\r\n * @param {string} time_range - 'short_term' (last 4 weeks) 'medium_term' (last 6 months) or 'long_term' (calculated from several years of data and including all new data as it becomes available). Defaults to 'short_term'\r\n * @returns {Promise}\r\n */\r\nexport const getTopArtists = async (time_range = 'short_term') => {\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `https://api.spotify.com/v1/me/top/artists?time_range=${time_range}`,\r\n        headers: {\r\n            'Content-type':'application/json',\r\n            'Authorization':`Bearer ${LOCALSTORAGE_VALUES.accessToken}`\r\n        }\r\n    });\r\n    console.log(response);\r\n    return response;\r\n  };\r\n\r\n  //get a user's top genre\r\n export const getTopGenre = async (time_range = 'short_term') => {\r\n     const response = await axios({\r\n         method: 'get',\r\n         url: `https://api.spotify.com/v1/me/top/genre?time_range=${time_range}`,\r\n         headers: {\r\n             'Content-type':'application/json',\r\n             'Authorization':`Bearer ${LOCALSTORAGE_VALUES.accessToken}`\r\n         }\r\n     });\r\n     console.log(response);\r\n     return response;\r\n   };\r\n\r\n\r\n   //get recommended songs/artists?\r\n   export const recommendSongs = async (token, user) => {\r\n        const response = await axios({\r\n            method: 'get',\r\n            url: `${API_URL}/user/${user._id}/recommendations`,//might be wrong\r\n            //url: `https://api.spotify.com/v1/recommendations`,//might be wrong\r\n            headers: {\r\n                'Accept': \"application/json\",\r\n                'Content-Type': \"application/json\",\r\n                'Authorization': `Bearer ${LOCALSTORAGE_VALUES.accessToken}`\r\n            }\r\n        });\r\n\t\tconsole.log(response);\r\n\t\treturn response;\r\n    };\r\n\r\n  \r\n// // @desc    Get user's top artist\r\n// // @route   GET /api/spotify/top_artist\r\n// // @access  Private\r\n// export const getTopArtist = async () => {\r\n\r\n//     try{\r\n//         const response = await axios({\r\n//             method: 'get',\r\n//             url: `https://api.spotify.com/v1/me/top/artists?limit=1`,\r\n//             headers: {\r\n//                 'Content-type':'application/json',\r\n//                 'Authorization':`Bearer ${LOCALSTORAGE_VALUES.accessToken}`\r\n//             }\r\n//         })\r\n//         // console.log(response);\r\n//         // console.log(response.items[0]);\r\n//         if(response) return response;\r\n//     } catch (error) {\r\n//         console.error(error)\r\n//     }\r\n// }\r\n\r\n// /**\r\n//  * Get a User's Top Tracks\r\n//  * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-top-artists-and-tracks\r\n//  * @param {string} time_range - 'short_term' (last 4 weeks) 'medium_term' (last 6 months) or 'long_term' (calculated from several years of data and including all new data as it becomes available). Defaults to 'short_term'\r\n//  * @returns {Promise}\r\n//  */\r\n// export const getTopTracks = (time_range = 'short_term') => {\r\n//     return axios.get(`/me/top/tracks?time_range=${time_range}`);\r\n//   };\r\n\r\n// export const logout = () => {\r\n//     // Clear all localStorage items\r\n//     for(const property in LOCALSTORAGE_KEYS) {\r\n//         window.localStorage.removeItem(LOCALSTORAGE_KEYS[property])\r\n//     }\r\n//     // Navigate to homepage\r\n//     window.location = window.location.origin\r\n// }\r\n\r\n// export const accessToken = getAccessToken()\r\n\r\n\r\n// /**\r\n//      * Axios global request headers\r\n//      */\r\n//     axios.defaults.baseURL = 'https://api.spotify.com/v1';\r\n//     axios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\r\n//     axios.defaults.headers['Content-Type'] = 'application/json';"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAO,kBAAkB;;AAEvE;AACA,MAAMC,OAAO,GAAG,aAAa;;AAE7B;AACA,MAAMC,iBAAiB,GAAG;EACtBC,WAAW,EAAE,sBAAsB;EACnCC,YAAY,EAAE,uBAAuB;EACrCC,UAAU,EAAE,2BAA2B;EACvCC,SAAS,EAAE;AACf,CAAC;;AAED;AACA,MAAMC,mBAAmB,GAAG;EACxBJ,WAAW,EAAEK,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACC,WAAW,CAAC;EACvEC,YAAY,EAAGI,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACE,YAAY,CAAC;EAC1EC,UAAU,EAAGG,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACG,UAAU,CAAC;EACtEC,SAAS,EAAGE,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACI,SAAS;AACvE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,aAAa,GAAG,kBAAqC;EAAA,IAA9BC,UAAU,uEAAG,YAAY;EACzD,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAAC;IACzBkB,MAAM,EAAE,KAAK;IACbC,GAAG,EAAG,wDAAuDH,UAAW,EAAC;IACzEI,OAAO,EAAE;MACL,cAAc,EAAC,kBAAkB;MACjC,eAAe,EAAE,UAAST,mBAAmB,CAACJ,WAAY;IAC9D;EACJ,CAAC,CAAC;EACFc,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;EACrB,OAAOA,QAAQ;AACjB,CAAC;;AAED;AACD,OAAO,MAAMM,WAAW,GAAG,kBAAqC;EAAA,IAA9BP,UAAU,uEAAG,YAAY;EACvD,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAAC;IACzBkB,MAAM,EAAE,KAAK;IACbC,GAAG,EAAG,sDAAqDH,UAAW,EAAC;IACvEI,OAAO,EAAE;MACL,cAAc,EAAC,kBAAkB;MACjC,eAAe,EAAE,UAAST,mBAAmB,CAACJ,WAAY;IAC9D;EACJ,CAAC,CAAC;EACFc,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;EACrB,OAAOA,QAAQ;AACjB,CAAC;;AAGD;AACA,OAAO,MAAMO,cAAc,GAAG,OAAOC,KAAK,EAAEC,IAAI,KAAK;EAChD,MAAMT,QAAQ,GAAG,MAAMjB,KAAK,CAAC;IACzBkB,MAAM,EAAE,KAAK;IACbC,GAAG,EAAG,GAAEd,OAAQ,SAAQqB,IAAI,CAACC,GAAI,kBAAiB;IAAC;IACnD;IACAP,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,UAAST,mBAAmB,CAACJ,WAAY;IAC/D;EACJ,CAAC,CAAC;EACRc,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;EACrB,OAAOA,QAAQ;AACb,CAAC;;AAGL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}