{"ast":null,"code":"const getRelativePosition = _ref => {\n  let {\n    axis,\n    target,\n    parent,\n    alignment,\n    offset,\n    isList\n  } = _ref;\n  if (!target || !parent && typeof document === \"undefined\") {\n    return 0;\n  }\n  const isCustomParent = !!parent;\n  const parentElement = parent || document.body;\n  const parentPosition = parentElement.getBoundingClientRect();\n  const targetPosition = target.getBoundingClientRect();\n  const getDiff = property => targetPosition[property] - parentPosition[property];\n  if (axis === \"y\") {\n    const diff = getDiff(\"top\");\n    if (diff === 0) return 0;\n    if (alignment === \"start\") {\n      const distance = diff - offset;\n      const shouldScroll = distance <= targetPosition.height * (isList ? 0 : 1) || !isList;\n      return shouldScroll ? distance : 0;\n    }\n    const parentHeight = isCustomParent ? parentPosition.height : window.innerHeight;\n    if (alignment === \"end\") {\n      const distance = diff + offset - parentHeight + targetPosition.height;\n      const shouldScroll = distance >= -targetPosition.height * (isList ? 0 : 1) || !isList;\n      return shouldScroll ? distance : 0;\n    }\n    if (alignment === \"center\") {\n      return diff - parentHeight / 2 + targetPosition.height / 2;\n    }\n    return 0;\n  }\n  if (axis === \"x\") {\n    const diff = getDiff(\"left\");\n    if (diff === 0) return 0;\n    if (alignment === \"start\") {\n      const distance = diff - offset;\n      const shouldScroll = distance <= targetPosition.width || !isList;\n      return shouldScroll ? distance : 0;\n    }\n    const parentWidth = isCustomParent ? parentPosition.width : window.innerWidth;\n    if (alignment === \"end\") {\n      const distance = diff + offset - parentWidth + targetPosition.width;\n      const shouldScroll = distance >= -targetPosition.width || !isList;\n      return shouldScroll ? distance : 0;\n    }\n    if (alignment === \"center\") {\n      return diff - parentWidth / 2 + targetPosition.width / 2;\n    }\n    return 0;\n  }\n  return 0;\n};\nexport { getRelativePosition };","map":{"version":3,"mappings":"AAAY,MAACA,mBAAmB,GAAG,QAO7B;EAAA,IAP8B;IAClCC,IAAI;IACJC,MAAM;IACNC,MAAM;IACNC,SAAS;IACTC,MAAM;IACNC;EACF,CAAC;EACC,IAAI,CAACJ,MAAM,IAAI,CAACC,MAAM,IAAI,OAAOI,QAAQ,KAAK,WAAW,EAAE;IACzD,OAAO,CAAC;EACZ;EACE,MAAMC,cAAc,GAAG,CAAC,CAACL,MAAM;EAC/B,MAAMM,aAAa,GAAGN,MAAM,IAAII,QAAQ,CAACG,IAAI;EAC7C,MAAMC,cAAc,GAAGF,aAAa,CAACG,qBAAqB,EAAE;EAC5D,MAAMC,cAAc,GAAGX,MAAM,CAACU,qBAAqB,EAAE;EACrD,MAAME,OAAO,GAAIC,QAAQ,IAAKF,cAAc,CAACE,QAAQ,CAAC,GAAGJ,cAAc,CAACI,QAAQ,CAAC;EACjF,IAAId,IAAI,KAAK,GAAG,EAAE;IAChB,MAAMe,IAAI,GAAGF,OAAO,CAAC,KAAK,CAAC;IAC3B,IAAIE,IAAI,KAAK,CAAC,EACZ,OAAO,CAAC;IACV,IAAIZ,SAAS,KAAK,OAAO,EAAE;MACzB,MAAMa,QAAQ,GAAGD,IAAI,GAAGX,MAAM;MAC9B,MAAMa,YAAY,GAAGD,QAAQ,IAAIJ,cAAc,CAACM,MAAM,IAAIb,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAACA,MAAM;MACpF,OAAOY,YAAY,GAAGD,QAAQ,GAAG,CAAC;IACxC;IACI,MAAMG,YAAY,GAAGZ,cAAc,GAAGG,cAAc,CAACQ,MAAM,GAAGE,MAAM,CAACC,WAAW;IAChF,IAAIlB,SAAS,KAAK,KAAK,EAAE;MACvB,MAAMa,QAAQ,GAAGD,IAAI,GAAGX,MAAM,GAAGe,YAAY,GAAGP,cAAc,CAACM,MAAM;MACrE,MAAMD,YAAY,GAAGD,QAAQ,IAAI,CAACJ,cAAc,CAACM,MAAM,IAAIb,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAACA,MAAM;MACrF,OAAOY,YAAY,GAAGD,QAAQ,GAAG,CAAC;IACxC;IACI,IAAIb,SAAS,KAAK,QAAQ,EAAE;MAC1B,OAAOY,IAAI,GAAGI,YAAY,GAAG,CAAC,GAAGP,cAAc,CAACM,MAAM,GAAG,CAAC;IAChE;IACI,OAAO,CAAC;EACZ;EACE,IAAIlB,IAAI,KAAK,GAAG,EAAE;IAChB,MAAMe,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;IAC5B,IAAIE,IAAI,KAAK,CAAC,EACZ,OAAO,CAAC;IACV,IAAIZ,SAAS,KAAK,OAAO,EAAE;MACzB,MAAMa,QAAQ,GAAGD,IAAI,GAAGX,MAAM;MAC9B,MAAMa,YAAY,GAAGD,QAAQ,IAAIJ,cAAc,CAACU,KAAK,IAAI,CAACjB,MAAM;MAChE,OAAOY,YAAY,GAAGD,QAAQ,GAAG,CAAC;IACxC;IACI,MAAMO,WAAW,GAAGhB,cAAc,GAAGG,cAAc,CAACY,KAAK,GAAGF,MAAM,CAACI,UAAU;IAC7E,IAAIrB,SAAS,KAAK,KAAK,EAAE;MACvB,MAAMa,QAAQ,GAAGD,IAAI,GAAGX,MAAM,GAAGmB,WAAW,GAAGX,cAAc,CAACU,KAAK;MACnE,MAAML,YAAY,GAAGD,QAAQ,IAAI,CAACJ,cAAc,CAACU,KAAK,IAAI,CAACjB,MAAM;MACjE,OAAOY,YAAY,GAAGD,QAAQ,GAAG,CAAC;IACxC;IACI,IAAIb,SAAS,KAAK,QAAQ,EAAE;MAC1B,OAAOY,IAAI,GAAGQ,WAAW,GAAG,CAAC,GAAGX,cAAc,CAACU,KAAK,GAAG,CAAC;IAC9D;IACI,OAAO,CAAC;EACZ;EACE,OAAO,CAAC;AACV","names":["getRelativePosition","axis","target","parent","alignment","offset","isList","document","isCustomParent","parentElement","body","parentPosition","getBoundingClientRect","targetPosition","getDiff","property","diff","distance","shouldScroll","height","parentHeight","window","innerHeight","width","parentWidth","innerWidth"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\node_modules\\@mantine\\hooks\\src\\use-scroll-into-view\\utils\\get-relative-position.ts"],"sourcesContent":["export const getRelativePosition = ({\n  axis,\n  target,\n  parent,\n  alignment,\n  offset,\n  isList,\n}): number => {\n  if (!target || (!parent && typeof document === 'undefined')) {\n    return 0;\n  }\n  const isCustomParent = !!parent;\n  const parentElement = parent || document.body;\n  const parentPosition = parentElement.getBoundingClientRect();\n  const targetPosition = target.getBoundingClientRect();\n\n  const getDiff = (property: 'top' | 'left'): number =>\n    targetPosition[property] - parentPosition[property];\n\n  if (axis === 'y') {\n    const diff = getDiff('top');\n\n    if (diff === 0) return 0;\n\n    if (alignment === 'start') {\n      const distance = diff - offset;\n      const shouldScroll = distance <= targetPosition.height * (isList ? 0 : 1) || !isList;\n\n      return shouldScroll ? distance : 0;\n    }\n\n    const parentHeight = isCustomParent ? parentPosition.height : window.innerHeight;\n\n    if (alignment === 'end') {\n      const distance = diff + offset - parentHeight + targetPosition.height;\n      const shouldScroll = distance >= -targetPosition.height * (isList ? 0 : 1) || !isList;\n\n      return shouldScroll ? distance : 0;\n    }\n\n    if (alignment === 'center') {\n      return diff - parentHeight / 2 + targetPosition.height / 2;\n    }\n\n    return 0;\n  }\n\n  if (axis === 'x') {\n    const diff = getDiff('left');\n\n    if (diff === 0) return 0;\n\n    if (alignment === 'start') {\n      const distance = diff - offset;\n      const shouldScroll = distance <= targetPosition.width || !isList;\n\n      return shouldScroll ? distance : 0;\n    }\n\n    const parentWidth = isCustomParent ? parentPosition.width : window.innerWidth;\n\n    if (alignment === 'end') {\n      const distance = diff + offset - parentWidth + targetPosition.width;\n      const shouldScroll = distance >= -targetPosition.width || !isList;\n\n      return shouldScroll ? distance : 0;\n    }\n\n    if (alignment === 'center') {\n      return diff - parentWidth / 2 + targetPosition.width / 2;\n    }\n\n    return 0;\n  }\n\n  return 0;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}