{"ast":null,"code":"import { useRef } from 'react';\nimport { useIsomorphicEffect } from '../use-isomorphic-effect/use-isomorphic-effect.js';\nconst MIME_TYPES = {\n  ico: \"image/x-icon\",\n  png: \"image/png\",\n  svg: \"image/svg+xml\",\n  gif: \"image/gif\"\n};\nfunction useFavicon(url) {\n  const link = useRef();\n  useIsomorphicEffect(() => {\n    if (!url) {\n      return;\n    }\n    if (!link.current) {\n      const existingElements = document.querySelectorAll('link[rel*=\"icon\"]');\n      existingElements.forEach(element2 => document.head.removeChild(element2));\n      const element = document.createElement(\"link\");\n      element.rel = \"shortcut icon\";\n      link.current = element;\n      document.querySelector(\"head\").appendChild(element);\n    }\n    const splittedUrl = url.split(\".\");\n    link.current.setAttribute(\"type\", MIME_TYPES[splittedUrl[splittedUrl.length - 1].toLowerCase()]);\n    link.current.setAttribute(\"href\", url);\n  }, [url]);\n}\nexport { useFavicon };","map":{"version":3,"mappings":";;AAEA,MAAMA,UAAU,GAAG;EACjBC,GAAG,EAAE,cAAc;EACnBC,GAAG,EAAE,WAAW;EAChBC,GAAG,EAAE,eAAe;EACpBC,GAAG,EAAE;AACP,CAAC;AACM,SAASC,UAAU,CAACC,GAAG,EAAE;EAC9B,MAAMC,IAAI,GAAGC,MAAM,EAAE;EACrBC,mBAAmB,CAAC,MAAM;IACxB,IAAI,CAACH,GAAG,EAAE;MACR;IACN;IACI,IAAI,CAACC,IAAI,CAACG,OAAO,EAAE;MACjB,MAAMC,gBAAgB,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,mBAAmB,CAAC;MACvEF,gBAAgB,CAACG,OAAO,CAAEC,QAAQ,IAAKH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACF,QAAQ,CAAC,CAAC;MAC3E,MAAMG,OAAO,GAAGN,QAAQ,CAACO,aAAa,CAAC,MAAM,CAAC;MAC9CD,OAAO,CAACE,GAAG,GAAG,eAAe;MAC7Bb,IAAI,CAACG,OAAO,GAAGQ,OAAO;MACtBN,QAAQ,CAACS,aAAa,CAAC,MAAM,CAAC,CAACC,WAAW,CAACJ,OAAO,CAAC;IACzD;IACI,MAAMK,WAAW,GAAGjB,GAAG,CAACkB,KAAK,CAAC,GAAG,CAAC;IAClCjB,IAAI,CAACG,OAAO,CAACe,YAAY,CAAC,MAAM,EAAEzB,UAAU,CAACuB,WAAW,CAACA,WAAW,CAACG,MAAM,GAAG,CAAC,CAAC,CAACC,WAAW,EAAE,CAAC,CAAC;IAChGpB,IAAI,CAACG,OAAO,CAACe,YAAY,CAAC,MAAM,EAAEnB,GAAG,CAAC;EAC1C,CAAG,EAAE,CAACA,GAAG,CAAC,CAAC;AACX","names":["MIME_TYPES","ico","png","svg","gif","useFavicon","url","link","useRef","useIsomorphicEffect","current","existingElements","document","querySelectorAll","forEach","element2","head","removeChild","element","createElement","rel","querySelector","appendChild","splittedUrl","split","setAttribute","length","toLowerCase"],"sources":["C:\\Users\\rff96\\Documents\\GitHub\\cop4331-large-project\\client\\node_modules\\@mantine\\hooks\\src\\use-favicon\\use-favicon.ts"],"sourcesContent":["import { useRef } from 'react';\nimport { useIsomorphicEffect } from '../use-isomorphic-effect/use-isomorphic-effect';\n\nconst MIME_TYPES = {\n  ico: 'image/x-icon',\n  png: 'image/png',\n  svg: 'image/svg+xml',\n  gif: 'image/gif',\n};\n\nexport function useFavicon(url: string) {\n  const link = useRef<HTMLLinkElement>();\n\n  useIsomorphicEffect(() => {\n    if (!url) {\n      return;\n    }\n\n    if (!link.current) {\n      const existingElements = document.querySelectorAll<HTMLLinkElement>('link[rel*=\"icon\"]');\n      existingElements.forEach((element) => document.head.removeChild(element));\n\n      const element = document.createElement('link');\n      element.rel = 'shortcut icon';\n      link.current = element;\n      document.querySelector('head').appendChild(element);\n    }\n\n    const splittedUrl = url.split('.');\n    link.current.setAttribute(\n      'type',\n      MIME_TYPES[splittedUrl[splittedUrl.length - 1].toLowerCase()]\n    );\n    link.current.setAttribute('href', url);\n  }, [url]);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}